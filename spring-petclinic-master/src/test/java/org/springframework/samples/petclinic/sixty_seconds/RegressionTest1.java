package org.springframework.samples.petclinic.sixty_seconds;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        pet12.setName("hi!");
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        pet12.setName("hi!");
        boolean boolean21 = pet12.isNew();
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        java.time.LocalDate localDate24 = null;
        visit22.setDate(localDate24);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        java.time.LocalDate localDate28 = null;
        visit26.setDate(localDate28);
        java.time.LocalDate localDate30 = null;
        visit26.setDate(localDate30);
        visit26.setDescription("");
        visit26.setPetId((Integer) (-1));
        visit26.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner38 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate40 = pet39.getBirthDate();
        String str41 = pet39.getName();
        owner38.addPet(pet39);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        pet39.addVisit(visit43);
        java.time.LocalDate localDate46 = visit43.getDate();
        visit26.setDate(localDate46);
        visit22.setDate(localDate46);
        pet12.setBirthDate(localDate46);
        pet12.setName("hi!");
        org.springframework.samples.petclinic.visit.Visit visit52 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int53 = visit52.getPetId();
        java.time.LocalDate localDate54 = null;
        visit52.setDate(localDate54);
        java.time.LocalDate localDate56 = null;
        visit52.setDate(localDate56);
        visit52.setPetId((Integer) (-1));
        visit52.setDescription("hi!");
        pet12.addVisit(visit52);
        Integer int63 = visit52.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63.equals(1));
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setAddress("hi!");
        String str16 = owner0.getCity();
        String str17 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "" + "'", str17.equals(""));
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        visit0.setPetId((Integer) (-1));
        visit0.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        java.time.LocalDate localDate20 = visit17.getDate();
        visit0.setDate(localDate20);
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        String str23 = pet22.toString();
        java.time.LocalDate localDate24 = null;
        pet22.setBirthDate(localDate24);
        String str26 = pet22.getName();
        org.springframework.samples.petclinic.owner.Owner owner27 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate29 = pet28.getBirthDate();
        String str30 = pet28.getName();
        owner27.addPet(pet28);
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        pet28.addVisit(visit32);
        Integer int35 = visit32.getPetId();
        String str36 = visit32.getDescription();
        java.time.LocalDate localDate37 = visit32.getDate();
        pet22.addVisit(visit32);
        java.time.LocalDate localDate39 = pet22.getBirthDate();
        java.time.LocalDate localDate40 = pet22.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit41 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int42 = visit41.getPetId();
        java.time.LocalDate localDate43 = null;
        visit41.setDate(localDate43);
        org.springframework.samples.petclinic.visit.Visit visit45 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int46 = visit45.getPetId();
        java.time.LocalDate localDate47 = null;
        visit45.setDate(localDate47);
        java.time.LocalDate localDate49 = null;
        visit45.setDate(localDate49);
        visit45.setDescription("");
        visit45.setPetId((Integer) (-1));
        visit45.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner57 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet58 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate59 = pet58.getBirthDate();
        String str60 = pet58.getName();
        owner57.addPet(pet58);
        org.springframework.samples.petclinic.visit.Visit visit62 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int63 = visit62.getPetId();
        pet58.addVisit(visit62);
        java.time.LocalDate localDate65 = visit62.getDate();
        visit45.setDate(localDate65);
        visit41.setDate(localDate65);
        pet22.setBirthDate(localDate65);
        visit0.setDate(localDate65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate65);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        boolean boolean11 = owner0.isNew();
        String str12 = owner0.getFirstName();
        String str13 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "hi!" + "'", str12.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        boolean boolean13 = pet9.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter15.print(petType16, locale17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter15.print(petType19, locale20);
        pet9.setType(petType19);
        owner0.addPet(pet9);
        owner0.setTelephone("");
        String str26 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        pet2.addVisit(visit6);
        java.time.LocalDate localDate9 = visit6.getDate();
        visit0.setDate(localDate9);
        visit0.setDescription("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        vet0.setFirstName("hi!");
        Integer int7 = vet0.getId();
        Integer int8 = vet0.getId();
        vet0.setLastName("hi!");
        int int11 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        java.time.LocalDate localDate8 = pet5.getBirthDate();
        java.time.LocalDate localDate9 = pet5.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner10 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate12 = pet11.getBirthDate();
        String str13 = pet11.getName();
        owner10.addPet(pet11);
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        pet11.addVisit(visit15);
        java.time.LocalDate localDate18 = visit15.getDate();
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        String str20 = pet19.toString();
        org.springframework.samples.petclinic.owner.PetType petType21 = pet19.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository22 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter23 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository22);
        org.springframework.samples.petclinic.owner.PetType petType24 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale25 = null;
        String str26 = petTypeFormatter23.print(petType24, locale25);
        org.springframework.samples.petclinic.owner.PetType petType27 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter23.print(petType27, locale28);
        pet19.setType(petType27);
        org.springframework.samples.petclinic.owner.Owner owner31 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet32 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate33 = pet32.getBirthDate();
        String str34 = pet32.getName();
        owner31.addPet(pet32);
        org.springframework.samples.petclinic.visit.Visit visit36 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int37 = visit36.getPetId();
        pet32.addVisit(visit36);
        java.time.LocalDate localDate39 = visit36.getDate();
        pet19.setBirthDate(localDate39);
        visit15.setDate(localDate39);
        pet5.setBirthDate(localDate39);
        Class<?> wildcardClass43 = localDate39.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        owner5.setFirstName("hi!");
        owner5.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        org.springframework.samples.petclinic.owner.PetType petType16 = null;
        pet14.setType(petType16);
        boolean boolean18 = pet14.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository19 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter20 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter20.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetType petType24 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale25 = null;
        String str26 = petTypeFormatter20.print(petType24, locale25);
        pet14.setType(petType24);
        owner5.addPet(pet14);
        owner0.addPet(pet14);
        String str30 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        String str9 = owner0.getTelephone();
        owner0.setTelephone("");
        String str12 = owner0.getCity();
        String str13 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        String str4 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        String str7 = vet0.getLastName();
        int int8 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty9 = null;
        vet0.addSpecialty(specialty9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner5 = pet0.getOwner();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        pet0.setId((Integer) (-1));
        org.springframework.samples.petclinic.owner.Owner owner9 = pet0.getOwner();
        String str10 = pet0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setCity("");
        owner0.setAddress("");
        String str9 = owner0.getCity();
        String str10 = owner0.getCity();
        owner0.setAddress("hi!");
        owner0.setCity("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        visit13.setDescription("");
        java.time.LocalDate localDate18 = visit13.getDate();
        pet5.setBirthDate(localDate18);
        org.springframework.samples.petclinic.owner.Owner owner20 = pet5.getOwner();
        owner20.setAddress("hi!");
        String str23 = owner20.getTelephone();
        String str24 = owner20.getAddress();
        owner20.setAddress("");
        owner20.setTelephone("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "hi!" + "'", str24.equals("hi!"));
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        visit0.setPetId((Integer) 10);
        java.time.LocalDate localDate10 = visit0.getDate();
        java.time.LocalDate localDate11 = visit0.getDate();
        Class<?> wildcardClass12 = visit0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setId((Integer) 100);
        Integer int8 = pet0.getId();
        pet0.setId((Integer) 10);
        org.springframework.samples.petclinic.owner.Owner owner11 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        String str14 = pet12.getName();
        owner11.addPet(pet12);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        pet12.addVisit(visit16);
        Integer int19 = visit16.getPetId();
        Integer int20 = visit16.getPetId();
        boolean boolean21 = visit16.isNew();
        Integer int22 = visit16.getId();
        Integer int23 = visit16.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner24 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate26 = pet25.getBirthDate();
        String str27 = pet25.getName();
        owner24.addPet(pet25);
        org.springframework.samples.petclinic.visit.Visit visit29 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int30 = visit29.getPetId();
        pet25.addVisit(visit29);
        Integer int32 = visit29.getPetId();
        String str33 = visit29.getDescription();
        Integer int34 = visit29.getPetId();
        java.time.LocalDate localDate35 = visit29.getDate();
        visit16.setDate(localDate35);
        pet0.setBirthDate(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8.equals(100));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate35);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        owner5.setFirstName("hi!");
        owner5.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        org.springframework.samples.petclinic.owner.PetType petType16 = null;
        pet14.setType(petType16);
        boolean boolean18 = pet14.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository19 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter20 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter20.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetType petType24 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale25 = null;
        String str26 = petTypeFormatter20.print(petType24, locale25);
        pet14.setType(petType24);
        owner5.addPet(pet14);
        owner0.addPet(pet14);
        String str30 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setLastName("hi!");
        String str16 = owner0.getTelephone();
        String str17 = owner0.getLastName();
        owner0.setTelephone("");
        owner0.setCity("");
        String str22 = owner0.getAddress();
        String str23 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!" + "'", str17.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner2 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate4 = pet3.getBirthDate();
        String str5 = pet3.getName();
        owner2.addPet(pet3);
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        pet3.addVisit(visit7);
        Integer int10 = visit7.getPetId();
        Integer int11 = visit7.getPetId();
        boolean boolean12 = visit7.isNew();
        Integer int13 = visit7.getId();
        java.time.LocalDate localDate14 = visit7.getDate();
        visit0.setDate(localDate14);
        visit0.setDescription("hi!");
        visit0.setDescription("");
        visit0.setId((Integer) 0);
        java.time.LocalDate localDate22 = visit0.getDate();
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        String str24 = pet23.toString();
        org.springframework.samples.petclinic.owner.PetType petType25 = null;
        pet23.setType(petType25);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int28 = visit27.getPetId();
        java.time.LocalDate localDate29 = null;
        visit27.setDate(localDate29);
        org.springframework.samples.petclinic.visit.Visit visit31 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int32 = visit31.getPetId();
        java.time.LocalDate localDate33 = null;
        visit31.setDate(localDate33);
        java.time.LocalDate localDate35 = null;
        visit31.setDate(localDate35);
        visit31.setDescription("");
        visit31.setPetId((Integer) (-1));
        visit31.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner43 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet44 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate45 = pet44.getBirthDate();
        String str46 = pet44.getName();
        owner43.addPet(pet44);
        org.springframework.samples.petclinic.visit.Visit visit48 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int49 = visit48.getPetId();
        pet44.addVisit(visit48);
        java.time.LocalDate localDate51 = visit48.getDate();
        visit31.setDate(localDate51);
        visit27.setDate(localDate51);
        visit27.setDescription("");
        pet23.addVisit(visit27);
        org.springframework.samples.petclinic.owner.Owner owner57 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet58 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate59 = pet58.getBirthDate();
        String str60 = pet58.getName();
        owner57.addPet(pet58);
        org.springframework.samples.petclinic.visit.Visit visit62 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int63 = visit62.getPetId();
        pet58.addVisit(visit62);
        visit62.setDescription("");
        java.time.LocalDate localDate67 = visit62.getDate();
        visit27.setDate(localDate67);
        java.time.LocalDate localDate69 = visit27.getDate();
        visit0.setDate(localDate69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate69);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        pet0.addVisit(visit8);
        Integer int11 = visit8.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        String str20 = visit17.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner21 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate23 = pet22.getBirthDate();
        String str24 = pet22.getName();
        owner21.addPet(pet22);
        org.springframework.samples.petclinic.owner.Pet pet26 = new org.springframework.samples.petclinic.owner.Pet();
        String str27 = pet26.toString();
        owner21.addPet(pet26);
        org.springframework.samples.petclinic.owner.Owner owner29 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate31 = pet30.getBirthDate();
        String str32 = pet30.getName();
        owner29.addPet(pet30);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        pet30.addVisit(visit34);
        visit34.setDescription("");
        java.time.LocalDate localDate39 = visit34.getDate();
        pet26.setBirthDate(localDate39);
        visit17.setDate(localDate39);
        visit8.setDate(localDate39);
        Integer int43 = visit8.getPetId();
        visit8.setPetId((Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11.equals(1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43.equals(1));
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType14 = null;
        pet12.setType(petType14);
        boolean boolean16 = pet12.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository17 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter18 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter18.print(petType19, locale20);
        org.springframework.samples.petclinic.owner.PetType petType22 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter18.print(petType22, locale23);
        pet12.setType(petType22);
        pet0.setType(petType22);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        String str28 = visit27.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner29 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate31 = pet30.getBirthDate();
        String str32 = pet30.getName();
        owner29.addPet(pet30);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        pet30.addVisit(visit34);
        Integer int37 = visit34.getPetId();
        Integer int38 = visit34.getPetId();
        boolean boolean39 = visit34.isNew();
        Integer int40 = visit34.getId();
        java.time.LocalDate localDate41 = visit34.getDate();
        visit27.setDate(localDate41);
        pet0.setBirthDate(localDate41);
        String str44 = pet0.toString();
        org.springframework.samples.petclinic.owner.Pet pet45 = new org.springframework.samples.petclinic.owner.Pet();
        String str46 = pet45.toString();
        org.springframework.samples.petclinic.owner.PetType petType47 = null;
        pet45.setType(petType47);
        String str49 = pet45.toString();
        org.springframework.samples.petclinic.owner.Pet pet50 = new org.springframework.samples.petclinic.owner.Pet();
        String str51 = pet50.toString();
        org.springframework.samples.petclinic.owner.PetType petType52 = pet50.getType();
        java.time.LocalDate localDate53 = pet50.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner54 = pet50.getOwner();
        String str55 = pet50.toString();
        pet50.setName("hi!");
        pet50.setName("");
        pet50.setName("");
        java.time.LocalDate localDate62 = pet50.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit63 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int64 = visit63.getPetId();
        java.time.LocalDate localDate65 = null;
        visit63.setDate(localDate65);
        java.time.LocalDate localDate67 = null;
        visit63.setDate(localDate67);
        visit63.setDescription("");
        visit63.setPetId((Integer) (-1));
        visit63.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner75 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet76 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate77 = pet76.getBirthDate();
        String str78 = pet76.getName();
        owner75.addPet(pet76);
        org.springframework.samples.petclinic.visit.Visit visit80 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int81 = visit80.getPetId();
        pet76.addVisit(visit80);
        java.time.LocalDate localDate83 = visit80.getDate();
        visit63.setDate(localDate83);
        pet50.setBirthDate(localDate83);
        pet45.setBirthDate(localDate83);
        pet0.setBirthDate(localDate83);
        String str88 = pet0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet5 = owner0.getPet("hi!");
        String str6 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        String str8 = pet7.toString();
        org.springframework.samples.petclinic.owner.PetType petType9 = pet7.getType();
        java.time.LocalDate localDate10 = pet7.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner11 = pet7.getOwner();
        String str12 = pet7.toString();
        pet7.setName("hi!");
        pet7.setName("");
        pet7.setName("");
        pet7.setName("hi!");
        owner0.addPet(pet7);
        String str22 = pet7.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "hi!" + "'", str22.equals("hi!"));
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        String str9 = visit5.getDescription();
        String str10 = visit5.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        vet0.setLastName("");
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        vet0.setLastName("");
        String str9 = vet0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        String str5 = owner0.getAddress();
        String str6 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        owner0.setLastName("hi!");
        String str11 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        String str11 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        java.time.LocalDate localDate14 = null;
        pet12.setBirthDate(localDate14);
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        org.springframework.samples.petclinic.owner.Pet pet21 = owner0.getPet("hi!", true);
        // The following exception was thrown during execution in test generation
        try {
            Integer int22 = pet21.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet21);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        visit0.setPetId((Integer) 10);
        java.time.LocalDate localDate10 = visit0.getDate();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        String str12 = pet11.toString();
        org.springframework.samples.petclinic.owner.PetType petType13 = pet11.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter15.print(petType16, locale17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter15.print(petType19, locale20);
        pet11.setType(petType19);
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        String str24 = pet23.toString();
        org.springframework.samples.petclinic.owner.PetType petType25 = null;
        pet23.setType(petType25);
        boolean boolean27 = pet23.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository28 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter29 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository28);
        org.springframework.samples.petclinic.owner.PetType petType30 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter29.print(petType30, locale31);
        org.springframework.samples.petclinic.owner.PetType petType33 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter29.print(petType33, locale34);
        pet23.setType(petType33);
        pet11.setType(petType33);
        org.springframework.samples.petclinic.visit.Visit visit38 = new org.springframework.samples.petclinic.visit.Visit();
        String str39 = visit38.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner40 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet41 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate42 = pet41.getBirthDate();
        String str43 = pet41.getName();
        owner40.addPet(pet41);
        org.springframework.samples.petclinic.visit.Visit visit45 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int46 = visit45.getPetId();
        pet41.addVisit(visit45);
        Integer int48 = visit45.getPetId();
        Integer int49 = visit45.getPetId();
        boolean boolean50 = visit45.isNew();
        Integer int51 = visit45.getId();
        java.time.LocalDate localDate52 = visit45.getDate();
        visit38.setDate(localDate52);
        pet11.setBirthDate(localDate52);
        String str55 = pet11.toString();
        org.springframework.samples.petclinic.owner.Pet pet56 = new org.springframework.samples.petclinic.owner.Pet();
        String str57 = pet56.toString();
        org.springframework.samples.petclinic.owner.PetType petType58 = null;
        pet56.setType(petType58);
        String str60 = pet56.toString();
        org.springframework.samples.petclinic.owner.Pet pet61 = new org.springframework.samples.petclinic.owner.Pet();
        String str62 = pet61.toString();
        org.springframework.samples.petclinic.owner.PetType petType63 = pet61.getType();
        java.time.LocalDate localDate64 = pet61.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner65 = pet61.getOwner();
        String str66 = pet61.toString();
        pet61.setName("hi!");
        pet61.setName("");
        pet61.setName("");
        java.time.LocalDate localDate73 = pet61.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit74 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int75 = visit74.getPetId();
        java.time.LocalDate localDate76 = null;
        visit74.setDate(localDate76);
        java.time.LocalDate localDate78 = null;
        visit74.setDate(localDate78);
        visit74.setDescription("");
        visit74.setPetId((Integer) (-1));
        visit74.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner86 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet87 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate88 = pet87.getBirthDate();
        String str89 = pet87.getName();
        owner86.addPet(pet87);
        org.springframework.samples.petclinic.visit.Visit visit91 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int92 = visit91.getPetId();
        pet87.addVisit(visit91);
        java.time.LocalDate localDate94 = visit91.getDate();
        visit74.setDate(localDate94);
        pet61.setBirthDate(localDate94);
        pet56.setBirthDate(localDate94);
        pet11.setBirthDate(localDate94);
        visit0.setDate(localDate94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate94);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        String str12 = pet0.toString();
        org.springframework.samples.petclinic.owner.Owner owner13 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner13);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        org.springframework.samples.petclinic.owner.PetType petType8 = pet1.getType();
        org.springframework.samples.petclinic.owner.Owner owner9 = pet1.getOwner();
        String str10 = owner9.getTelephone();
        owner9.setAddress("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        Integer int13 = visit10.getPetId();
        String str14 = visit10.getDescription();
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        Integer int17 = visit10.getPetId();
        visit10.setId((Integer) 0);
        String str20 = visit10.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        java.time.LocalDate localDate8 = pet5.getBirthDate();
        java.time.LocalDate localDate9 = pet5.getBirthDate();
        java.time.LocalDate localDate10 = pet5.getBirthDate();
        pet5.setName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        org.springframework.samples.petclinic.visit.Visit visit1 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int2 = visit1.getPetId();
        java.time.LocalDate localDate3 = null;
        visit1.setDate(localDate3);
        java.time.LocalDate localDate5 = null;
        visit1.setDate(localDate5);
        visit1.setPetId((Integer) 0);
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = pet9.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository12 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter13 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter13.print(petType14, locale15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter13.print(petType17, locale18);
        pet9.setType(petType17);
        pet9.setName("");
        org.springframework.samples.petclinic.visit.Visit visit23 = new org.springframework.samples.petclinic.visit.Visit();
        visit23.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        java.time.LocalDate localDate28 = null;
        visit26.setDate(localDate28);
        java.time.LocalDate localDate30 = null;
        visit26.setDate(localDate30);
        org.springframework.samples.petclinic.owner.Owner owner32 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet33 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate34 = pet33.getBirthDate();
        String str35 = pet33.getName();
        owner32.addPet(pet33);
        org.springframework.samples.petclinic.visit.Visit visit37 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int38 = visit37.getPetId();
        pet33.addVisit(visit37);
        java.time.LocalDate localDate40 = visit37.getDate();
        visit26.setDate(localDate40);
        visit23.setDate(localDate40);
        pet9.setBirthDate(localDate40);
        visit1.setDate(localDate40);
        pet0.setBirthDate(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate40);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        owner0.setCity("");
        String str13 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setTelephone("hi!");
        owner0.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setLastName("hi!");
        owner0.setLastName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        boolean boolean4 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        pet0.setType(petType10);
        org.springframework.samples.petclinic.owner.Owner owner14 = pet0.getOwner();
        // The following exception was thrown during execution in test generation
        try {
            Class<?> wildcardClass15 = owner14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner14);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("");
        String str9 = owner5.getLastName();
        owner5.setTelephone("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        String str7 = owner0.getTelephone();
        owner0.setAddress("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        owner5.setCity("hi!");
        owner5.setTelephone("hi!");
        Class<?> wildcardClass16 = owner5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner2 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate4 = pet3.getBirthDate();
        String str5 = pet3.getName();
        owner2.addPet(pet3);
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        pet3.addVisit(visit7);
        Integer int10 = visit7.getPetId();
        Integer int11 = visit7.getPetId();
        boolean boolean12 = visit7.isNew();
        Integer int13 = visit7.getId();
        java.time.LocalDate localDate14 = visit7.getDate();
        visit0.setDate(localDate14);
        visit0.setDescription("hi!");
        visit0.setDescription("");
        Class<?> wildcardClass20 = visit0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        String str4 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        String str7 = vet0.getLastName();
        int int8 = vet0.getNrOfSpecialties();
        vet0.setLastName("");
        String str11 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty12 = null;
        vet0.addSpecialty(specialty12);
        int int14 = vet0.getNrOfSpecialties();
        int int15 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty16 = null;
        vet0.addSpecialty(specialty16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        org.springframework.samples.petclinic.owner.Pet pet4 = new org.springframework.samples.petclinic.owner.Pet();
        String str5 = pet4.toString();
        java.time.LocalDate localDate6 = null;
        pet4.setBirthDate(localDate6);
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        Integer int16 = visit13.getPetId();
        Integer int17 = visit13.getPetId();
        boolean boolean18 = visit13.isNew();
        Integer int19 = visit13.getId();
        String str20 = visit13.getDescription();
        pet4.addVisit(visit13);
        visit13.setDescription("hi!");
        pet0.addVisit(visit13);
        org.springframework.samples.petclinic.owner.Owner owner25 = pet0.getOwner();
        String str26 = pet0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        String str9 = pet8.toString();
        boolean boolean10 = pet8.isNew();
        owner0.addPet(pet8);
        org.springframework.samples.petclinic.owner.Owner owner12 = pet8.getOwner();
        String str13 = owner12.getAddress();
        owner12.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        java.time.LocalDate localDate5 = null;
        pet0.setBirthDate(localDate5);
        String str7 = pet0.toString();
        org.springframework.samples.petclinic.owner.Owner owner8 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner8);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner9 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate11 = pet10.getBirthDate();
        String str12 = pet10.getName();
        owner9.addPet(pet10);
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        owner9.addPet(pet14);
        org.springframework.samples.petclinic.owner.Owner owner17 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate19 = pet18.getBirthDate();
        String str20 = pet18.getName();
        owner17.addPet(pet18);
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        pet18.addVisit(visit22);
        visit22.setDescription("");
        java.time.LocalDate localDate27 = visit22.getDate();
        pet14.setBirthDate(localDate27);
        visit5.setDate(localDate27);
        visit5.setPetId((Integer) 0);
        visit5.setPetId((Integer) 0);
        visit5.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.Owner owner3 = pet0.getOwner();
        pet0.setName("");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        java.time.LocalDate localDate14 = pet7.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        java.time.LocalDate localDate17 = null;
        visit15.setDate(localDate17);
        java.time.LocalDate localDate19 = null;
        visit15.setDate(localDate19);
        pet7.addVisit(visit15);
        pet0.addVisit(visit15);
        java.time.LocalDate localDate23 = pet0.getBirthDate();
        java.time.LocalDate localDate24 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate24);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        Integer int5 = pet0.getId();
        String str6 = pet0.getName();
        Class<?> wildcardClass7 = pet0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        Integer int5 = owner0.getId();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!", false);
        String str9 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        org.springframework.samples.petclinic.owner.Owner owner6 = pet0.getOwner();
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        java.time.LocalDate localDate9 = null;
        visit7.setDate(localDate9);
        java.time.LocalDate localDate11 = null;
        visit7.setDate(localDate11);
        visit7.setDescription("");
        visit7.setPetId((Integer) 10);
        pet0.addVisit(visit7);
        String str18 = visit7.getDescription();
        visit7.setPetId((Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        org.springframework.samples.petclinic.owner.Owner owner4 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate6 = pet5.getBirthDate();
        String str7 = pet5.getName();
        owner4.addPet(pet5);
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        pet5.addVisit(visit9);
        Integer int12 = visit9.getPetId();
        Integer int13 = visit9.getPetId();
        boolean boolean14 = visit9.isNew();
        Integer int15 = visit9.getId();
        String str16 = visit9.getDescription();
        pet0.addVisit(visit9);
        org.springframework.samples.petclinic.owner.PetType petType18 = pet0.getType();
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        String str20 = pet19.toString();
        java.time.LocalDate localDate21 = null;
        pet19.setBirthDate(localDate21);
        String str23 = pet19.getName();
        org.springframework.samples.petclinic.owner.Owner owner24 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate26 = pet25.getBirthDate();
        String str27 = pet25.getName();
        owner24.addPet(pet25);
        org.springframework.samples.petclinic.visit.Visit visit29 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int30 = visit29.getPetId();
        pet25.addVisit(visit29);
        Integer int32 = visit29.getPetId();
        String str33 = visit29.getDescription();
        java.time.LocalDate localDate34 = visit29.getDate();
        pet19.addVisit(visit29);
        java.time.LocalDate localDate36 = visit29.getDate();
        pet0.setBirthDate(localDate36);
        String str38 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType39 = pet0.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType39);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        String str10 = visit5.getDescription();
        java.time.LocalDate localDate11 = visit5.getDate();
        java.time.LocalDate localDate12 = visit5.getDate();
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate15 = pet14.getBirthDate();
        String str16 = pet14.getName();
        owner13.addPet(pet14);
        org.springframework.samples.petclinic.visit.Visit visit18 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int19 = visit18.getPetId();
        pet14.addVisit(visit18);
        Integer int21 = visit18.getPetId();
        Integer int22 = visit18.getPetId();
        String str23 = visit18.getDescription();
        java.time.LocalDate localDate24 = visit18.getDate();
        visit5.setDate(localDate24);
        visit5.setId((Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.PetType petType4 = pet0.getType();
        // The following exception was thrown during execution in test generation
        try {
            String str5 = petType4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType4);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet12 = owner0.getPet("hi!");
        String str13 = owner0.getCity();
        org.springframework.samples.petclinic.owner.Pet pet15 = owner0.getPet("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet15);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        vet0.setLastName("");
        vet0.setLastName("hi!");
        int int7 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        boolean boolean4 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        pet0.setType(petType10);
        java.time.LocalDate localDate14 = pet0.getBirthDate();
        Class<?> wildcardClass15 = pet0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setPetId((Integer) (-1));
        visit0.setDescription("hi!");
        visit0.setDescription("hi!");
        Class<?> wildcardClass12 = visit0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate1 = pet0.getBirthDate();
        pet0.setName("hi!");
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        java.time.LocalDate localDate6 = null;
        visit4.setDate(localDate6);
        java.time.LocalDate localDate8 = null;
        visit4.setDate(localDate8);
        visit4.setDescription("");
        visit4.setPetId((Integer) (-1));
        visit4.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner16 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate18 = pet17.getBirthDate();
        String str19 = pet17.getName();
        owner16.addPet(pet17);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet17.addVisit(visit21);
        java.time.LocalDate localDate24 = visit21.getDate();
        visit4.setDate(localDate24);
        pet0.setBirthDate(localDate24);
        Integer int27 = pet0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        owner0.setTelephone("hi!");
        owner0.setLastName("");
        String str12 = owner0.getFirstName();
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Owner owner15 = new org.springframework.samples.petclinic.owner.Owner();
        owner15.setLastName("");
        Integer int18 = owner15.getId();
        owner15.setAddress("");
        owner15.setTelephone("");
        String str23 = owner15.getFirstName();
        owner15.setLastName("hi!");
        String str26 = owner15.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet27 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate28 = pet27.getBirthDate();
        pet27.setName("hi!");
        pet27.setId((Integer) 1);
        owner15.addPet(pet27);
        pet27.setName("hi!");
        boolean boolean36 = pet27.isNew();
        org.springframework.samples.petclinic.visit.Visit visit37 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int38 = visit37.getPetId();
        java.time.LocalDate localDate39 = null;
        visit37.setDate(localDate39);
        org.springframework.samples.petclinic.visit.Visit visit41 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int42 = visit41.getPetId();
        java.time.LocalDate localDate43 = null;
        visit41.setDate(localDate43);
        java.time.LocalDate localDate45 = null;
        visit41.setDate(localDate45);
        visit41.setDescription("");
        visit41.setPetId((Integer) (-1));
        visit41.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner53 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet54 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate55 = pet54.getBirthDate();
        String str56 = pet54.getName();
        owner53.addPet(pet54);
        org.springframework.samples.petclinic.visit.Visit visit58 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int59 = visit58.getPetId();
        pet54.addVisit(visit58);
        java.time.LocalDate localDate61 = visit58.getDate();
        visit41.setDate(localDate61);
        visit37.setDate(localDate61);
        pet27.setBirthDate(localDate61);
        owner0.addPet(pet27);
        owner0.setCity("");
        Class<?> wildcardClass68 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "" + "'", str26.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("hi!", true);
        owner0.setTelephone("");
        String str10 = owner0.getCity();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        String str12 = pet11.toString();
        org.springframework.samples.petclinic.owner.PetType petType13 = null;
        pet11.setType(petType13);
        String str15 = pet11.getName();
        boolean boolean16 = pet11.isNew();
        String str17 = pet11.getName();
        owner0.addPet(pet11);
        String str19 = owner0.getAddress();
        owner0.setCity("");
        owner0.setLastName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "hi!" + "'", str19.equals("hi!"));
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        Integer int1 = pet0.getId();
        java.time.LocalDate localDate2 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        owner0.setAddress("");
        String str9 = owner0.getFirstName();
        org.springframework.samples.petclinic.owner.Pet pet12 = owner0.getPet("hi!", false);
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        java.time.LocalDate localDate17 = null;
        pet15.setBirthDate(localDate17);
        String str19 = pet15.getName();
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate22 = pet21.getBirthDate();
        String str23 = pet21.getName();
        owner20.addPet(pet21);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet21.addVisit(visit25);
        Integer int28 = visit25.getPetId();
        String str29 = visit25.getDescription();
        java.time.LocalDate localDate30 = visit25.getDate();
        pet15.addVisit(visit25);
        owner0.addPet(pet15);
        pet15.setName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        String str9 = pet8.toString();
        org.springframework.samples.petclinic.owner.PetType petType10 = null;
        pet8.setType(petType10);
        String str12 = pet8.getName();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        String str14 = pet13.toString();
        org.springframework.samples.petclinic.owner.PetType petType15 = null;
        pet13.setType(petType15);
        boolean boolean17 = pet13.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        pet13.setType(petType23);
        pet8.setType(petType23);
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter1.print(petType23, locale28);
        java.util.Locale locale31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType32 = petTypeFormatter1.parse("hi!", locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        vet0.setFirstName("hi!");
        Integer int7 = vet0.getId();
        Integer int8 = vet0.getId();
        vet0.setLastName("hi!");
        org.springframework.samples.petclinic.vet.Specialty specialty11 = null;
        vet0.addSpecialty(specialty11);
        org.springframework.samples.petclinic.vet.Specialty specialty13 = null;
        vet0.addSpecialty(specialty13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        String str5 = owner0.getAddress();
        String str6 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        org.springframework.samples.petclinic.owner.Pet pet10 = owner0.getPet("hi!");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = pet10.isNew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet10);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        String str8 = visit0.getDescription();
        String str9 = visit0.getDescription();
        visit0.setId((Integer) 1);
        String str12 = visit0.getDescription();
        boolean boolean13 = visit0.isNew();
        visit0.setPetId((Integer) 0);
        Integer int16 = visit0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16.equals(1));
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.springframework.samples.petclinic.model.NamedEntity namedEntity0 = new org.springframework.samples.petclinic.model.NamedEntity();
        namedEntity0.setName("hi!");
        String str3 = namedEntity0.getName();
        String str4 = namedEntity0.getName();
        String str5 = namedEntity0.getName();
        String str6 = namedEntity0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!" + "'", str3.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        boolean boolean8 = owner0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        visit5.setPetId((Integer) 0);
        String str14 = visit5.getDescription();
        visit5.setPetId((Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        pet0.setName("");
        pet0.setName("");
        java.time.LocalDate localDate12 = pet0.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        java.time.LocalDate localDate15 = null;
        visit13.setDate(localDate15);
        java.time.LocalDate localDate17 = null;
        visit13.setDate(localDate17);
        visit13.setDescription("");
        String str21 = visit13.getDescription();
        Integer int22 = visit13.getId();
        pet0.addVisit(visit13);
        visit13.setPetId((Integer) 0);
        Integer int26 = visit13.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "" + "'", str21.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26.equals(0));
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        Integer int11 = owner0.getId();
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        owner12.setLastName("");
        Integer int15 = owner12.getId();
        owner12.setAddress("");
        owner12.setTelephone("");
        String str20 = owner12.getFirstName();
        owner12.setLastName("hi!");
        String str23 = owner12.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet24 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate25 = pet24.getBirthDate();
        pet24.setName("hi!");
        pet24.setId((Integer) 1);
        owner12.addPet(pet24);
        owner0.addPet(pet24);
        org.springframework.samples.petclinic.owner.Pet pet32 = new org.springframework.samples.petclinic.owner.Pet();
        String str33 = pet32.toString();
        org.springframework.samples.petclinic.owner.PetType petType34 = pet32.getType();
        java.time.LocalDate localDate35 = pet32.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner36 = pet32.getOwner();
        String str37 = pet32.toString();
        pet32.setName("hi!");
        pet32.setName("");
        String str42 = pet32.toString();
        owner0.addPet(pet32);
        java.time.LocalDate localDate44 = pet32.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "" + "'", str42.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate44);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setAddress("hi!");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        pet5.setId((Integer) 10);
        pet5.setId((Integer) 100);
        pet5.setName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        org.springframework.samples.petclinic.owner.PetType petType7 = null;
        pet5.setType(petType7);
        boolean boolean9 = pet5.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository10 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter11 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter11.print(petType12, locale13);
        org.springframework.samples.petclinic.owner.PetType petType15 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter11.print(petType15, locale16);
        pet5.setType(petType15);
        pet0.setType(petType15);
        petType15.setName("");
        String str22 = petType15.toString();
        String str23 = petType15.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "" + "'", str22.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetRepository petRepository2 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter3 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository2);
        org.springframework.samples.petclinic.owner.PetType petType4 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale5 = null;
        String str6 = petTypeFormatter3.print(petType4, locale5);
        org.springframework.samples.petclinic.owner.PetRepository petRepository7 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter8 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter8.print(petType9, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter8.print(petType12, locale13);
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter3.print(petType12, locale15);
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter1.print(petType12, locale17);
        org.springframework.samples.petclinic.owner.Owner owner19 = new org.springframework.samples.petclinic.owner.Owner();
        owner19.setLastName("");
        Integer int22 = owner19.getId();
        owner19.setAddress("");
        owner19.setTelephone("");
        String str27 = owner19.getFirstName();
        owner19.setLastName("hi!");
        String str30 = owner19.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate32 = pet31.getBirthDate();
        pet31.setName("hi!");
        pet31.setId((Integer) 1);
        owner19.addPet(pet31);
        pet31.setName("hi!");
        boolean boolean40 = pet31.isNew();
        org.springframework.samples.petclinic.owner.Owner owner41 = pet31.getOwner();
        org.springframework.samples.petclinic.owner.Pet pet42 = new org.springframework.samples.petclinic.owner.Pet();
        String str43 = pet42.toString();
        org.springframework.samples.petclinic.owner.PetType petType44 = pet42.getType();
        java.time.LocalDate localDate45 = pet42.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner46 = pet42.getOwner();
        String str47 = pet42.toString();
        pet42.setName("hi!");
        pet42.setName("");
        String str52 = pet42.toString();
        org.springframework.samples.petclinic.owner.Pet pet53 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate54 = pet53.getBirthDate();
        pet53.setName("hi!");
        pet53.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository59 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter60 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository59);
        org.springframework.samples.petclinic.owner.PetRepository petRepository61 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter62 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository61);
        org.springframework.samples.petclinic.owner.PetType petType63 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale64 = null;
        String str65 = petTypeFormatter62.print(petType63, locale64);
        org.springframework.samples.petclinic.owner.PetRepository petRepository66 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter67 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository66);
        org.springframework.samples.petclinic.owner.PetType petType68 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale69 = null;
        String str70 = petTypeFormatter67.print(petType68, locale69);
        org.springframework.samples.petclinic.owner.PetType petType71 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale72 = null;
        String str73 = petTypeFormatter67.print(petType71, locale72);
        java.util.Locale locale74 = null;
        String str75 = petTypeFormatter62.print(petType71, locale74);
        java.util.Locale locale76 = null;
        String str77 = petTypeFormatter60.print(petType71, locale76);
        pet53.setType(petType71);
        String str79 = petType71.toString();
        pet42.setType(petType71);
        pet31.setType(petType71);
        java.util.Locale locale82 = null;
        String str83 = petTypeFormatter1.print(petType71, locale82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "" + "'", str52.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("hi!");
        owner0.setCity("hi!");
        org.springframework.samples.petclinic.owner.Pet pet10 = owner0.getPet("");
        String str11 = owner0.getAddress();
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        String str5 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        java.time.LocalDate localDate8 = null;
        pet6.setBirthDate(localDate8);
        String str10 = pet6.getName();
        org.springframework.samples.petclinic.owner.Owner owner11 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        String str14 = pet12.getName();
        owner11.addPet(pet12);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        pet12.addVisit(visit16);
        Integer int19 = visit16.getPetId();
        String str20 = visit16.getDescription();
        java.time.LocalDate localDate21 = visit16.getDate();
        pet6.addVisit(visit16);
        owner0.addPet(pet6);
        String str24 = owner0.getTelephone();
        owner0.setAddress("");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet28 = owner0.getPet("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        boolean boolean3 = vet0.isNew();
        int int4 = vet0.getNrOfSpecialties();
        vet0.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        pet0.setName("");
        String str14 = pet0.toString();
        pet0.setName("");
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        String str18 = pet17.toString();
        java.time.LocalDate localDate19 = null;
        pet17.setBirthDate(localDate19);
        pet17.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType23 = null;
        pet17.setType(petType23);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet17.addVisit(visit25);
        visit25.setDescription("");
        org.springframework.samples.petclinic.owner.Owner owner30 = new org.springframework.samples.petclinic.owner.Owner();
        owner30.setLastName("");
        Integer int33 = owner30.getId();
        owner30.setAddress("");
        owner30.setTelephone("");
        String str38 = owner30.getFirstName();
        owner30.setLastName("hi!");
        String str41 = owner30.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet42 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate43 = pet42.getBirthDate();
        pet42.setName("hi!");
        pet42.setId((Integer) 1);
        owner30.addPet(pet42);
        pet42.setName("hi!");
        boolean boolean51 = pet42.isNew();
        org.springframework.samples.petclinic.visit.Visit visit52 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int53 = visit52.getPetId();
        java.time.LocalDate localDate54 = null;
        visit52.setDate(localDate54);
        org.springframework.samples.petclinic.visit.Visit visit56 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int57 = visit56.getPetId();
        java.time.LocalDate localDate58 = null;
        visit56.setDate(localDate58);
        java.time.LocalDate localDate60 = null;
        visit56.setDate(localDate60);
        visit56.setDescription("");
        visit56.setPetId((Integer) (-1));
        visit56.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner68 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet69 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate70 = pet69.getBirthDate();
        String str71 = pet69.getName();
        owner68.addPet(pet69);
        org.springframework.samples.petclinic.visit.Visit visit73 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int74 = visit73.getPetId();
        pet69.addVisit(visit73);
        java.time.LocalDate localDate76 = visit73.getDate();
        visit56.setDate(localDate76);
        visit52.setDate(localDate76);
        pet42.setBirthDate(localDate76);
        org.springframework.samples.petclinic.visit.Visit visit80 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner81 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet82 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate83 = pet82.getBirthDate();
        String str84 = pet82.getName();
        owner81.addPet(pet82);
        org.springframework.samples.petclinic.visit.Visit visit86 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int87 = visit86.getPetId();
        pet82.addVisit(visit86);
        java.time.LocalDate localDate89 = visit86.getDate();
        visit80.setDate(localDate89);
        pet42.setBirthDate(localDate89);
        visit25.setDate(localDate89);
        visit25.setDescription("hi!");
        String str95 = visit25.getDescription();
        java.time.LocalDate localDate96 = visit25.getDate();
        pet0.setBirthDate(localDate96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "" + "'", str41.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str95 + "' != '" + "hi!" + "'", str95.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate96);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.getName();
        java.time.LocalDate localDate5 = pet0.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        java.time.LocalDate localDate8 = null;
        visit6.setDate(localDate8);
        java.time.LocalDate localDate10 = null;
        visit6.setDate(localDate10);
        visit6.setDescription("");
        visit6.setPetId((Integer) (-1));
        org.springframework.samples.petclinic.owner.Pet pet16 = new org.springframework.samples.petclinic.owner.Pet();
        String str17 = pet16.toString();
        org.springframework.samples.petclinic.owner.PetType petType18 = null;
        pet16.setType(petType18);
        org.springframework.samples.petclinic.visit.Visit visit20 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int21 = visit20.getPetId();
        java.time.LocalDate localDate22 = null;
        visit20.setDate(localDate22);
        org.springframework.samples.petclinic.visit.Visit visit24 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int25 = visit24.getPetId();
        java.time.LocalDate localDate26 = null;
        visit24.setDate(localDate26);
        java.time.LocalDate localDate28 = null;
        visit24.setDate(localDate28);
        visit24.setDescription("");
        visit24.setPetId((Integer) (-1));
        visit24.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner36 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet37 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate38 = pet37.getBirthDate();
        String str39 = pet37.getName();
        owner36.addPet(pet37);
        org.springframework.samples.petclinic.visit.Visit visit41 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int42 = visit41.getPetId();
        pet37.addVisit(visit41);
        java.time.LocalDate localDate44 = visit41.getDate();
        visit24.setDate(localDate44);
        visit20.setDate(localDate44);
        visit20.setDescription("");
        pet16.addVisit(visit20);
        org.springframework.samples.petclinic.owner.Owner owner50 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet51 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate52 = pet51.getBirthDate();
        String str53 = pet51.getName();
        owner50.addPet(pet51);
        org.springframework.samples.petclinic.visit.Visit visit55 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int56 = visit55.getPetId();
        pet51.addVisit(visit55);
        visit55.setDescription("");
        java.time.LocalDate localDate60 = visit55.getDate();
        visit20.setDate(localDate60);
        visit6.setDate(localDate60);
        visit6.setPetId((Integer) 100);
        org.springframework.samples.petclinic.visit.Visit visit65 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int66 = visit65.getPetId();
        java.time.LocalDate localDate67 = null;
        visit65.setDate(localDate67);
        java.time.LocalDate localDate69 = null;
        visit65.setDate(localDate69);
        String str71 = visit65.getDescription();
        String str72 = visit65.getDescription();
        String str73 = visit65.getDescription();
        java.time.LocalDate localDate74 = visit65.getDate();
        org.springframework.samples.petclinic.owner.Owner owner75 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet76 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate77 = pet76.getBirthDate();
        String str78 = pet76.getName();
        owner75.addPet(pet76);
        org.springframework.samples.petclinic.visit.Visit visit80 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int81 = visit80.getPetId();
        pet76.addVisit(visit80);
        Integer int83 = visit80.getPetId();
        Integer int84 = visit80.getPetId();
        String str85 = visit80.getDescription();
        java.time.LocalDate localDate86 = visit80.getDate();
        visit65.setDate(localDate86);
        visit6.setDate(localDate86);
        pet0.setBirthDate(localDate86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate86);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        String str5 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        java.time.LocalDate localDate8 = null;
        pet6.setBirthDate(localDate8);
        String str10 = pet6.getName();
        org.springframework.samples.petclinic.owner.Owner owner11 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        String str14 = pet12.getName();
        owner11.addPet(pet12);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        pet12.addVisit(visit16);
        Integer int19 = visit16.getPetId();
        String str20 = visit16.getDescription();
        java.time.LocalDate localDate21 = visit16.getDate();
        pet6.addVisit(visit16);
        owner0.addPet(pet6);
        Integer int24 = owner0.getId();
        org.springframework.samples.petclinic.owner.Pet pet27 = owner0.getPet("", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24.equals(1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet27);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getAddress();
        String str8 = owner0.getAddress();
        String str9 = owner0.getLastName();
        boolean boolean10 = owner0.isNew();
        boolean boolean11 = owner0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = pet1.getBirthDate();
        String str9 = pet1.toString();
        String str10 = pet1.toString();
        java.time.LocalDate localDate11 = pet1.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        String str9 = owner0.getFirstName();
        org.springframework.samples.petclinic.owner.Pet pet12 = owner0.getPet("hi!", false);
        owner0.setAddress("");
        owner0.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet12);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        owner0.setTelephone("hi!");
        owner0.setLastName("");
        String str12 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet15 = owner13.getPet("");
        org.springframework.samples.petclinic.owner.Pet pet16 = new org.springframework.samples.petclinic.owner.Pet();
        String str17 = pet16.toString();
        java.time.LocalDate localDate18 = null;
        pet16.setBirthDate(localDate18);
        String str20 = pet16.getName();
        org.springframework.samples.petclinic.owner.Owner owner21 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate23 = pet22.getBirthDate();
        String str24 = pet22.getName();
        owner21.addPet(pet22);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        pet22.addVisit(visit26);
        Integer int29 = visit26.getPetId();
        String str30 = visit26.getDescription();
        java.time.LocalDate localDate31 = visit26.getDate();
        pet16.addVisit(visit26);
        owner13.addPet(pet16);
        Integer int34 = pet16.getId();
        owner0.addPet(pet16);
        pet16.setName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int34);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        visit0.setPetId((Integer) (-1));
        visit0.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        java.time.LocalDate localDate20 = visit17.getDate();
        visit0.setDate(localDate20);
        java.time.LocalDate localDate22 = visit0.getDate();
        visit0.setDescription("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setLastName("hi!");
        String str16 = owner0.getTelephone();
        String str17 = owner0.getLastName();
        String str18 = owner0.getLastName();
        boolean boolean19 = owner0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!" + "'", str17.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "hi!" + "'", str18.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        String str4 = vet0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        Integer int5 = pet0.getId();
        String str6 = pet0.toString();
        org.springframework.samples.petclinic.owner.Owner owner7 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate9 = pet8.getBirthDate();
        String str10 = pet8.getName();
        owner7.addPet(pet8);
        org.springframework.samples.petclinic.visit.Visit visit12 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int13 = visit12.getPetId();
        pet8.addVisit(visit12);
        String str15 = visit12.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner16 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate18 = pet17.getBirthDate();
        String str19 = pet17.getName();
        owner16.addPet(pet17);
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        String str22 = pet21.toString();
        owner16.addPet(pet21);
        org.springframework.samples.petclinic.owner.Owner owner24 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate26 = pet25.getBirthDate();
        String str27 = pet25.getName();
        owner24.addPet(pet25);
        org.springframework.samples.petclinic.visit.Visit visit29 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int30 = visit29.getPetId();
        pet25.addVisit(visit29);
        visit29.setDescription("");
        java.time.LocalDate localDate34 = visit29.getDate();
        pet21.setBirthDate(localDate34);
        visit12.setDate(localDate34);
        org.springframework.samples.petclinic.owner.Owner owner37 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet38 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate39 = pet38.getBirthDate();
        String str40 = pet38.getName();
        owner37.addPet(pet38);
        org.springframework.samples.petclinic.visit.Visit visit42 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int43 = visit42.getPetId();
        pet38.addVisit(visit42);
        visit42.setDescription("");
        java.time.LocalDate localDate47 = visit42.getDate();
        visit12.setDate(localDate47);
        pet0.setBirthDate(localDate47);
        org.springframework.samples.petclinic.owner.Owner owner50 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner50);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        String str8 = visit0.getDescription();
        visit0.setDescription("hi!");
        visit0.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.PetRepository petRepository1 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter2 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository1);
        org.springframework.samples.petclinic.owner.PetType petType3 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale4 = null;
        String str5 = petTypeFormatter2.print(petType3, locale4);
        org.springframework.samples.petclinic.owner.PetType petType6 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale7 = null;
        String str8 = petTypeFormatter2.print(petType6, locale7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter2.print(petType9, locale10);
        org.springframework.samples.petclinic.owner.PetRepository petRepository12 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter13 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter13.print(petType14, locale15);
        org.springframework.samples.petclinic.owner.PetRepository petRepository17 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter18 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter18.print(petType19, locale20);
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter13.print(petType19, locale22);
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter2.print(petType19, locale24);
        org.springframework.samples.petclinic.owner.PetRepository petRepository26 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter27 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository26);
        org.springframework.samples.petclinic.owner.PetType petType28 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter27.print(petType28, locale29);
        org.springframework.samples.petclinic.owner.PetRepository petRepository31 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter32 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository31);
        org.springframework.samples.petclinic.owner.PetType petType33 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter32.print(petType33, locale34);
        java.util.Locale locale36 = null;
        String str37 = petTypeFormatter27.print(petType33, locale36);
        org.springframework.samples.petclinic.owner.PetType petType38 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale39 = null;
        String str40 = petTypeFormatter27.print(petType38, locale39);
        java.util.Locale locale41 = null;
        String str42 = petTypeFormatter2.print(petType38, locale41);
        org.springframework.samples.petclinic.owner.Owner owner43 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet44 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate45 = pet44.getBirthDate();
        String str46 = pet44.getName();
        owner43.addPet(pet44);
        org.springframework.samples.petclinic.visit.Visit visit48 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int49 = visit48.getPetId();
        pet44.addVisit(visit48);
        java.time.LocalDate localDate51 = pet44.getBirthDate();
        String str52 = pet44.toString();
        java.time.LocalDate localDate53 = pet44.getBirthDate();
        org.springframework.samples.petclinic.owner.PetRepository petRepository54 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter55 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository54);
        org.springframework.samples.petclinic.owner.PetType petType56 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale57 = null;
        String str58 = petTypeFormatter55.print(petType56, locale57);
        org.springframework.samples.petclinic.owner.PetRepository petRepository59 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter60 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository59);
        org.springframework.samples.petclinic.owner.PetType petType61 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale62 = null;
        String str63 = petTypeFormatter60.print(petType61, locale62);
        org.springframework.samples.petclinic.owner.PetType petType64 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale65 = null;
        String str66 = petTypeFormatter60.print(petType64, locale65);
        java.util.Locale locale67 = null;
        String str68 = petTypeFormatter55.print(petType64, locale67);
        org.springframework.samples.petclinic.owner.Pet pet69 = new org.springframework.samples.petclinic.owner.Pet();
        String str70 = pet69.toString();
        org.springframework.samples.petclinic.owner.PetType petType71 = null;
        pet69.setType(petType71);
        String str73 = pet69.getName();
        org.springframework.samples.petclinic.owner.Pet pet74 = new org.springframework.samples.petclinic.owner.Pet();
        String str75 = pet74.toString();
        org.springframework.samples.petclinic.owner.PetType petType76 = null;
        pet74.setType(petType76);
        boolean boolean78 = pet74.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository79 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter80 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository79);
        org.springframework.samples.petclinic.owner.PetType petType81 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale82 = null;
        String str83 = petTypeFormatter80.print(petType81, locale82);
        org.springframework.samples.petclinic.owner.PetType petType84 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale85 = null;
        String str86 = petTypeFormatter80.print(petType84, locale85);
        pet74.setType(petType84);
        pet69.setType(petType84);
        petType84.setName("");
        java.util.Locale locale91 = null;
        String str92 = petTypeFormatter55.print(petType84, locale91);
        pet44.setType(petType84);
        java.util.Locale locale94 = null;
        String str95 = petTypeFormatter2.print(petType84, locale94);
        org.springframework.validation.Errors errors96 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) petTypeFormatter2, errors96);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.owner.PetTypeFormatter cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.owner.PetTypeFormatter and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str92 + "' != '" + "" + "'", str92.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str95 + "' != '" + "" + "'", str95.equals(""));
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        pet5.setId((Integer) 10);
        org.springframework.samples.petclinic.owner.Owner owner10 = pet5.getOwner();
        java.time.LocalDate localDate11 = null;
        pet5.setBirthDate(localDate11);
        org.springframework.samples.petclinic.owner.Owner owner13 = pet5.getOwner();
        String str14 = owner13.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        String str9 = owner0.getFirstName();
        owner0.setCity("");
        owner0.setAddress("hi!");
        boolean boolean14 = owner0.isNew();
        owner0.setFirstName("hi!");
        String str17 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!" + "'", str17.equals("hi!"));
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.visit.Visit visit1 = new org.springframework.samples.petclinic.visit.Visit();
        visit1.setDescription("hi!");
        visit1.setPetId((Integer) (-1));
        String str6 = visit1.getDescription();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        String str8 = pet7.toString();
        org.springframework.samples.petclinic.owner.PetType petType9 = pet7.getType();
        java.time.LocalDate localDate10 = pet7.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner11 = pet7.getOwner();
        String str12 = pet7.toString();
        java.time.LocalDate localDate13 = pet7.getBirthDate();
        Integer int14 = pet7.getId();
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        visit15.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit18 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int19 = visit18.getPetId();
        java.time.LocalDate localDate20 = null;
        visit18.setDate(localDate20);
        java.time.LocalDate localDate22 = null;
        visit18.setDate(localDate22);
        org.springframework.samples.petclinic.owner.Owner owner24 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate26 = pet25.getBirthDate();
        String str27 = pet25.getName();
        owner24.addPet(pet25);
        org.springframework.samples.petclinic.visit.Visit visit29 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int30 = visit29.getPetId();
        pet25.addVisit(visit29);
        java.time.LocalDate localDate32 = visit29.getDate();
        visit18.setDate(localDate32);
        visit15.setDate(localDate32);
        pet7.setBirthDate(localDate32);
        visit1.setDate(localDate32);
        org.springframework.validation.Errors errors37 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) visit1, errors37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.visit.Visit cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.visit.Visit and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getCity();
        String str4 = owner0.getCity();
        String str5 = owner0.getAddress();
        boolean boolean6 = owner0.isNew();
        String str7 = owner0.getCity();
        String str8 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet18 = owner0.getPet("", true);
        String str19 = owner0.getCity();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate21 = pet20.getBirthDate();
        pet20.setName("hi!");
        owner0.addPet(pet20);
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate21);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        String str3 = vet0.getLastName();
        vet0.setFirstName("");
        String str6 = vet0.getLastName();
        int int7 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        owner0.setTelephone("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("", false);
        org.springframework.samples.petclinic.owner.Owner owner7 = new org.springframework.samples.petclinic.owner.Owner();
        String str8 = owner7.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        String str13 = pet9.toString();
        owner7.addPet(pet9);
        owner7.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        String str18 = pet17.toString();
        boolean boolean19 = pet17.isNew();
        owner7.addPet(pet17);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet17.addVisit(visit21);
        owner0.addPet(pet17);
        String str25 = owner0.getCity();
        owner0.setFirstName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        owner1.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.Pet pet4 = new org.springframework.samples.petclinic.owner.Pet();
        String str5 = pet4.toString();
        java.time.LocalDate localDate6 = null;
        pet4.setBirthDate(localDate6);
        String str8 = pet4.getName();
        owner1.addPet(pet4);
        String str10 = owner1.getAddress();
        org.springframework.validation.Errors errors11 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) owner1, errors11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.owner.Owner cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.owner.Owner and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        owner5.setCity("hi!");
        owner5.setTelephone("hi!");
        String str16 = owner5.getTelephone();
        owner5.setLastName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!" + "'", str16.equals("hi!"));
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        owner5.setCity("hi!");
        String str8 = owner5.getCity();
        owner5.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        java.time.LocalDate localDate12 = visit5.getDate();
        visit5.setPetId((Integer) 1);
        visit5.setPetId((Integer) 0);
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        String str18 = pet17.toString();
        java.time.LocalDate localDate19 = null;
        pet17.setBirthDate(localDate19);
        String str21 = pet17.getName();
        org.springframework.samples.petclinic.owner.Owner owner22 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate24 = pet23.getBirthDate();
        String str25 = pet23.getName();
        owner22.addPet(pet23);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int28 = visit27.getPetId();
        pet23.addVisit(visit27);
        Integer int30 = visit27.getPetId();
        String str31 = visit27.getDescription();
        java.time.LocalDate localDate32 = visit27.getDate();
        pet17.addVisit(visit27);
        java.time.LocalDate localDate34 = visit27.getDate();
        visit5.setDate(localDate34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        visit0.setPetId((Integer) 10);
        visit0.setId((Integer) 1);
        visit0.setPetId((Integer) 0);
        visit0.setDescription("");
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        String str2 = owner1.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        org.springframework.samples.petclinic.owner.PetType petType5 = null;
        pet3.setType(petType5);
        String str7 = pet3.toString();
        owner1.addPet(pet3);
        owner1.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        String str12 = pet11.toString();
        boolean boolean13 = pet11.isNew();
        owner1.addPet(pet11);
        org.springframework.validation.Errors errors15 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) owner1, errors15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.owner.Owner cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.owner.Owner and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        pet5.setId((Integer) 10);
        org.springframework.samples.petclinic.owner.Owner owner10 = pet5.getOwner();
        java.time.LocalDate localDate11 = null;
        pet5.setBirthDate(localDate11);
        java.time.LocalDate localDate13 = pet5.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner14 = pet5.getOwner();
        String str15 = owner14.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        owner1.setLastName("");
        Integer int4 = owner1.getId();
        owner1.setAddress("");
        owner1.setTelephone("");
        String str9 = owner1.getFirstName();
        owner1.setLastName("hi!");
        String str12 = owner1.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        pet13.setName("hi!");
        pet13.setId((Integer) 1);
        owner1.addPet(pet13);
        pet13.setName("hi!");
        boolean boolean22 = pet13.isNew();
        org.springframework.samples.petclinic.owner.Owner owner23 = pet13.getOwner();
        org.springframework.samples.petclinic.owner.Pet pet24 = new org.springframework.samples.petclinic.owner.Pet();
        String str25 = pet24.toString();
        java.time.LocalDate localDate26 = null;
        pet24.setBirthDate(localDate26);
        org.springframework.samples.petclinic.owner.Owner owner28 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet29 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate30 = pet29.getBirthDate();
        String str31 = pet29.getName();
        owner28.addPet(pet29);
        org.springframework.samples.petclinic.visit.Visit visit33 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int34 = visit33.getPetId();
        pet29.addVisit(visit33);
        Integer int36 = visit33.getPetId();
        Integer int37 = visit33.getPetId();
        boolean boolean38 = visit33.isNew();
        Integer int39 = visit33.getId();
        String str40 = visit33.getDescription();
        pet24.addVisit(visit33);
        org.springframework.samples.petclinic.owner.PetType petType42 = pet24.getType();
        org.springframework.samples.petclinic.owner.Owner owner43 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet44 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate45 = pet44.getBirthDate();
        String str46 = pet44.getName();
        owner43.addPet(pet44);
        org.springframework.samples.petclinic.visit.Visit visit48 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int49 = visit48.getPetId();
        pet44.addVisit(visit48);
        Integer int51 = visit48.getPetId();
        Integer int52 = visit48.getPetId();
        boolean boolean53 = visit48.isNew();
        Integer int54 = visit48.getId();
        Integer int55 = visit48.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner56 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet57 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate58 = pet57.getBirthDate();
        String str59 = pet57.getName();
        owner56.addPet(pet57);
        org.springframework.samples.petclinic.visit.Visit visit61 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int62 = visit61.getPetId();
        pet57.addVisit(visit61);
        Integer int64 = visit61.getPetId();
        String str65 = visit61.getDescription();
        Integer int66 = visit61.getPetId();
        java.time.LocalDate localDate67 = visit61.getDate();
        visit48.setDate(localDate67);
        pet24.setBirthDate(localDate67);
        pet13.setBirthDate(localDate67);
        org.springframework.validation.Errors errors71 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) localDate67, errors71);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.time.LocalDate cannot be cast to class org.springframework.samples.petclinic.owner.Pet (java.time.LocalDate is in module java.base of loader 'bootstrap'; org.springframework.samples.petclinic.owner.Pet is in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate67);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        java.time.LocalDate localDate12 = visit5.getDate();
        visit5.setPetId((Integer) 1);
        visit5.setPetId((Integer) (-1));
        visit5.setDescription("hi!");
        Integer int19 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19.equals((-1)));
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        boolean boolean2 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetType petType3 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetType petType4 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetRepository petRepository7 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter8 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter8.print(petType9, locale10);
        org.springframework.samples.petclinic.owner.PetRepository petRepository12 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter13 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter13.print(petType14, locale15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter13.print(petType17, locale18);
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter8.print(petType17, locale20);
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter6.print(petType17, locale22);
        org.springframework.samples.petclinic.owner.Pet pet24 = new org.springframework.samples.petclinic.owner.Pet();
        String str25 = pet24.toString();
        org.springframework.samples.petclinic.owner.PetType petType26 = pet24.getType();
        java.time.LocalDate localDate27 = pet24.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner28 = pet24.getOwner();
        String str29 = pet24.toString();
        pet24.setName("hi!");
        pet24.setName("");
        String str34 = pet24.toString();
        org.springframework.samples.petclinic.owner.Pet pet35 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate36 = pet35.getBirthDate();
        pet35.setName("hi!");
        pet35.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository41 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter42 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository41);
        org.springframework.samples.petclinic.owner.PetRepository petRepository43 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter44 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository43);
        org.springframework.samples.petclinic.owner.PetType petType45 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale46 = null;
        String str47 = petTypeFormatter44.print(petType45, locale46);
        org.springframework.samples.petclinic.owner.PetRepository petRepository48 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter49 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository48);
        org.springframework.samples.petclinic.owner.PetType petType50 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale51 = null;
        String str52 = petTypeFormatter49.print(petType50, locale51);
        org.springframework.samples.petclinic.owner.PetType petType53 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale54 = null;
        String str55 = petTypeFormatter49.print(petType53, locale54);
        java.util.Locale locale56 = null;
        String str57 = petTypeFormatter44.print(petType53, locale56);
        java.util.Locale locale58 = null;
        String str59 = petTypeFormatter42.print(petType53, locale58);
        pet35.setType(petType53);
        String str61 = petType53.toString();
        pet24.setType(petType53);
        java.util.Locale locale63 = null;
        String str64 = petTypeFormatter6.print(petType53, locale63);
        pet0.setType(petType53);
        Class<?> wildcardClass66 = pet0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "" + "'", str34.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        String str8 = owner0.getLastName();
        owner0.setFirstName("");
        owner0.setCity("hi!");
        String str13 = owner0.getFirstName();
        String str14 = owner0.getCity();
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!" + "'", str14.equals("hi!"));
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setCity("");
        owner0.setAddress("");
        String str9 = owner0.getCity();
        String str10 = owner0.getCity();
        Integer int11 = owner0.getId();
        Class<?> wildcardClass12 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        boolean boolean5 = owner0.isNew();
        Class<?> wildcardClass6 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        org.springframework.samples.petclinic.visit.Visit visit14 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int15 = visit14.getPetId();
        pet10.addVisit(visit14);
        String str17 = pet10.getName();
        java.time.LocalDate localDate18 = pet10.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        String str2 = visit0.getDescription();
        java.time.LocalDate localDate3 = visit0.getDate();
        visit0.setId((Integer) 10);
        visit0.setPetId((Integer) 0);
        Integer int8 = visit0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8.equals(10));
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        java.time.LocalDate localDate5 = null;
        pet0.setBirthDate(localDate5);
        String str7 = pet0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = pet1.getBirthDate();
        String str9 = pet1.toString();
        java.time.LocalDate localDate10 = pet1.getBirthDate();
        org.springframework.samples.petclinic.owner.PetType petType11 = pet1.getType();
        pet1.setName("");
        Integer int14 = pet1.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate9 = pet8.getBirthDate();
        pet8.setName("hi!");
        pet8.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter17.print(petType18, locale19);
        org.springframework.samples.petclinic.owner.PetRepository petRepository21 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter22 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter22.print(petType23, locale24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter22.print(petType26, locale27);
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter17.print(petType26, locale29);
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter15.print(petType26, locale31);
        pet8.setType(petType26);
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter1.print(petType26, locale34);
        org.springframework.samples.petclinic.owner.Pet pet36 = new org.springframework.samples.petclinic.owner.Pet();
        String str37 = pet36.toString();
        boolean boolean38 = pet36.isNew();
        org.springframework.samples.petclinic.owner.PetType petType39 = pet36.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository40 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter41 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository40);
        org.springframework.samples.petclinic.owner.PetType petType42 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale43 = null;
        String str44 = petTypeFormatter41.print(petType42, locale43);
        org.springframework.samples.petclinic.owner.PetType petType45 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale46 = null;
        String str47 = petTypeFormatter41.print(petType45, locale46);
        pet36.setType(petType45);
        petType45.setName("");
        java.util.Locale locale51 = null;
        String str52 = petTypeFormatter1.print(petType45, locale51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "" + "'", str52.equals(""));
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        pet0.setName("hi!");
        Class<?> wildcardClass7 = pet0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("");
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        java.time.LocalDate localDate5 = null;
        pet3.setBirthDate(localDate5);
        String str7 = pet3.getName();
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        Integer int16 = visit13.getPetId();
        String str17 = visit13.getDescription();
        java.time.LocalDate localDate18 = visit13.getDate();
        pet3.addVisit(visit13);
        owner0.addPet(pet3);
        owner0.setFirstName("");
        String str23 = owner0.getLastName();
        owner0.setCity("");
        owner0.setTelephone("");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet30 = owner0.getPet("hi!", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType12, locale13);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = pet15.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        pet15.setType(petType23);
        org.springframework.samples.petclinic.owner.Owner owner27 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate29 = pet28.getBirthDate();
        String str30 = pet28.getName();
        owner27.addPet(pet28);
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        pet28.addVisit(visit32);
        java.time.LocalDate localDate35 = visit32.getDate();
        pet15.setBirthDate(localDate35);
        org.springframework.samples.petclinic.owner.PetType petType37 = pet15.getType();
        java.util.Locale locale38 = null;
        String str39 = petTypeFormatter1.print(petType37, locale38);
        org.springframework.samples.petclinic.owner.Pet pet40 = new org.springframework.samples.petclinic.owner.Pet();
        String str41 = pet40.toString();
        org.springframework.samples.petclinic.owner.PetType petType42 = null;
        pet40.setType(petType42);
        String str44 = pet40.getName();
        org.springframework.samples.petclinic.owner.Pet pet45 = new org.springframework.samples.petclinic.owner.Pet();
        String str46 = pet45.toString();
        org.springframework.samples.petclinic.owner.PetType petType47 = null;
        pet45.setType(petType47);
        boolean boolean49 = pet45.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository50 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter51 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository50);
        org.springframework.samples.petclinic.owner.PetType petType52 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale53 = null;
        String str54 = petTypeFormatter51.print(petType52, locale53);
        org.springframework.samples.petclinic.owner.PetType petType55 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale56 = null;
        String str57 = petTypeFormatter51.print(petType55, locale56);
        pet45.setType(petType55);
        pet40.setType(petType55);
        petType55.setName("");
        String str62 = petType55.toString();
        java.util.Locale locale63 = null;
        String str64 = petTypeFormatter1.print(petType55, locale63);
        org.springframework.samples.petclinic.owner.Pet pet65 = new org.springframework.samples.petclinic.owner.Pet();
        String str66 = pet65.toString();
        org.springframework.samples.petclinic.owner.PetType petType67 = null;
        pet65.setType(petType67);
        String str69 = pet65.getName();
        org.springframework.samples.petclinic.owner.Pet pet70 = new org.springframework.samples.petclinic.owner.Pet();
        String str71 = pet70.toString();
        org.springframework.samples.petclinic.owner.PetType petType72 = null;
        pet70.setType(petType72);
        boolean boolean74 = pet70.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository75 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter76 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository75);
        org.springframework.samples.petclinic.owner.PetType petType77 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale78 = null;
        String str79 = petTypeFormatter76.print(petType77, locale78);
        org.springframework.samples.petclinic.owner.PetType petType80 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale81 = null;
        String str82 = petTypeFormatter76.print(petType80, locale81);
        pet70.setType(petType80);
        pet65.setType(petType80);
        java.util.Locale locale85 = null;
        String str86 = petTypeFormatter1.print(petType80, locale85);
        java.util.Locale locale88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType89 = petTypeFormatter1.parse("hi!", locale88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "" + "'", str62.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "" + "'", str64.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        boolean boolean11 = owner0.isNew();
        String str12 = owner0.getLastName();
        String str13 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        org.springframework.samples.petclinic.owner.PetType petType16 = pet14.getType();
        java.time.LocalDate localDate17 = pet14.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner18 = pet14.getOwner();
        String str19 = pet14.toString();
        pet14.setId((Integer) 100);
        owner0.addPet(pet14);
        String str23 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "hi!" + "'", str23.equals("hi!"));
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        java.time.LocalDate localDate5 = pet1.getBirthDate();
        boolean boolean6 = pet1.isNew();
        java.time.LocalDate localDate7 = pet1.getBirthDate();
        org.springframework.samples.petclinic.owner.PetRepository petRepository8 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter9 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter9.print(petType10, locale11);
        String str13 = petType10.getName();
        pet1.setType(petType10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = pet1.getBirthDate();
        String str9 = pet1.toString();
        String str10 = pet1.toString();
        org.springframework.samples.petclinic.visit.Visit visit11 = null;
        // The following exception was thrown during execution in test generation
        try {
            pet1.addVisit(visit11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner9 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate11 = pet10.getBirthDate();
        String str12 = pet10.getName();
        owner9.addPet(pet10);
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        owner9.addPet(pet14);
        org.springframework.samples.petclinic.owner.Owner owner17 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate19 = pet18.getBirthDate();
        String str20 = pet18.getName();
        owner17.addPet(pet18);
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        pet18.addVisit(visit22);
        visit22.setDescription("");
        java.time.LocalDate localDate27 = visit22.getDate();
        pet14.setBirthDate(localDate27);
        visit5.setDate(localDate27);
        boolean boolean30 = visit5.isNew();
        String str31 = visit5.getDescription();
        java.time.LocalDate localDate32 = visit5.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        String str4 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        String str7 = vet0.getLastName();
        int int8 = vet0.getNrOfSpecialties();
        vet0.setLastName("");
        int int11 = vet0.getNrOfSpecialties();
        String str12 = vet0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        owner5.setCity("hi!");
        owner5.setCity("");
        owner5.setLastName("");
        String str18 = owner5.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = pet2.getType();
        java.time.LocalDate localDate5 = pet2.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner6 = pet2.getOwner();
        String str7 = pet2.toString();
        pet2.setName("hi!");
        owner0.addPet(pet2);
        String str11 = pet2.getName();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        java.time.LocalDate localDate14 = null;
        pet12.setBirthDate(localDate14);
        org.springframework.samples.petclinic.owner.Pet pet16 = new org.springframework.samples.petclinic.owner.Pet();
        String str17 = pet16.toString();
        java.time.LocalDate localDate18 = null;
        pet16.setBirthDate(localDate18);
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate22 = pet21.getBirthDate();
        String str23 = pet21.getName();
        owner20.addPet(pet21);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet21.addVisit(visit25);
        Integer int28 = visit25.getPetId();
        Integer int29 = visit25.getPetId();
        boolean boolean30 = visit25.isNew();
        Integer int31 = visit25.getId();
        String str32 = visit25.getDescription();
        pet16.addVisit(visit25);
        visit25.setDescription("hi!");
        pet12.addVisit(visit25);
        pet2.addVisit(visit25);
        String str38 = pet2.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "hi!" + "'", str38.equals("hi!"));
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        boolean boolean13 = pet9.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter15.print(petType16, locale17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter15.print(petType19, locale20);
        pet9.setType(petType19);
        owner0.addPet(pet9);
        owner0.setLastName("hi!");
        owner0.setTelephone("");
        owner0.setFirstName("");
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate9 = pet8.getBirthDate();
        pet8.setName("hi!");
        pet8.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter17.print(petType18, locale19);
        org.springframework.samples.petclinic.owner.PetRepository petRepository21 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter22 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter22.print(petType23, locale24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter22.print(petType26, locale27);
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter17.print(petType26, locale29);
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter15.print(petType26, locale31);
        pet8.setType(petType26);
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter1.print(petType26, locale34);
        org.springframework.samples.petclinic.owner.PetRepository petRepository36 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter37 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository36);
        org.springframework.samples.petclinic.owner.PetType petType38 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale39 = null;
        String str40 = petTypeFormatter37.print(petType38, locale39);
        org.springframework.samples.petclinic.owner.PetRepository petRepository41 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter42 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository41);
        org.springframework.samples.petclinic.owner.PetType petType43 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale44 = null;
        String str45 = petTypeFormatter42.print(petType43, locale44);
        java.util.Locale locale46 = null;
        String str47 = petTypeFormatter37.print(petType43, locale46);
        org.springframework.samples.petclinic.owner.PetType petType48 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale49 = null;
        String str50 = petTypeFormatter37.print(petType48, locale49);
        org.springframework.samples.petclinic.owner.Pet pet51 = new org.springframework.samples.petclinic.owner.Pet();
        String str52 = pet51.toString();
        org.springframework.samples.petclinic.owner.PetType petType53 = pet51.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository54 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter55 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository54);
        org.springframework.samples.petclinic.owner.PetType petType56 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale57 = null;
        String str58 = petTypeFormatter55.print(petType56, locale57);
        org.springframework.samples.petclinic.owner.PetType petType59 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale60 = null;
        String str61 = petTypeFormatter55.print(petType59, locale60);
        pet51.setType(petType59);
        org.springframework.samples.petclinic.owner.Owner owner63 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet64 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate65 = pet64.getBirthDate();
        String str66 = pet64.getName();
        owner63.addPet(pet64);
        org.springframework.samples.petclinic.visit.Visit visit68 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int69 = visit68.getPetId();
        pet64.addVisit(visit68);
        java.time.LocalDate localDate71 = visit68.getDate();
        pet51.setBirthDate(localDate71);
        org.springframework.samples.petclinic.owner.PetType petType73 = pet51.getType();
        java.util.Locale locale74 = null;
        String str75 = petTypeFormatter37.print(petType73, locale74);
        java.util.Locale locale76 = null;
        String str77 = petTypeFormatter1.print(petType73, locale76);
        org.springframework.samples.petclinic.owner.PetRepository petRepository78 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter79 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository78);
        org.springframework.samples.petclinic.owner.PetType petType80 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale81 = null;
        String str82 = petTypeFormatter79.print(petType80, locale81);
        org.springframework.samples.petclinic.owner.PetRepository petRepository83 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter84 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository83);
        org.springframework.samples.petclinic.owner.PetType petType85 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale86 = null;
        String str87 = petTypeFormatter84.print(petType85, locale86);
        java.util.Locale locale88 = null;
        String str89 = petTypeFormatter79.print(petType85, locale88);
        String str90 = petType85.toString();
        java.util.Locale locale91 = null;
        String str92 = petTypeFormatter1.print(petType85, locale91);
        String str93 = petType85.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        String str2 = pet1.toString();
        org.springframework.samples.petclinic.owner.PetType petType3 = null;
        pet1.setType(petType3);
        boolean boolean5 = pet1.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository6 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter7 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter7.print(petType8, locale9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter7.print(petType11, locale12);
        pet1.setType(petType11);
        org.springframework.validation.Errors errors15 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) petType11, errors15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.owner.PetType cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.owner.PetType and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        java.time.LocalDate localDate6 = null;
        visit4.setDate(localDate6);
        java.time.LocalDate localDate8 = null;
        visit4.setDate(localDate8);
        visit4.setDescription("");
        visit4.setPetId((Integer) (-1));
        visit4.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner16 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate18 = pet17.getBirthDate();
        String str19 = pet17.getName();
        owner16.addPet(pet17);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet17.addVisit(visit21);
        java.time.LocalDate localDate24 = visit21.getDate();
        visit4.setDate(localDate24);
        visit0.setDate(localDate24);
        java.time.LocalDate localDate27 = visit0.getDate();
        org.springframework.samples.petclinic.visit.Visit visit28 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int29 = visit28.getPetId();
        java.time.LocalDate localDate30 = null;
        visit28.setDate(localDate30);
        java.time.LocalDate localDate32 = null;
        visit28.setDate(localDate32);
        String str34 = visit28.getDescription();
        String str35 = visit28.getDescription();
        String str36 = visit28.getDescription();
        java.time.LocalDate localDate37 = visit28.getDate();
        org.springframework.samples.petclinic.owner.Owner owner38 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate40 = pet39.getBirthDate();
        String str41 = pet39.getName();
        owner38.addPet(pet39);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        pet39.addVisit(visit43);
        Integer int46 = visit43.getPetId();
        Integer int47 = visit43.getPetId();
        String str48 = visit43.getDescription();
        java.time.LocalDate localDate49 = visit43.getDate();
        visit28.setDate(localDate49);
        visit0.setDate(localDate49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate49);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.PetType petType4 = pet0.getType();
        java.time.LocalDate localDate5 = pet0.getBirthDate();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        boolean boolean7 = pet0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        boolean boolean5 = owner0.isNew();
        String str6 = owner0.getFirstName();
        String str7 = owner0.getLastName();
        String str8 = owner0.getLastName();
        String str9 = owner0.getCity();
        org.springframework.samples.petclinic.owner.Pet pet11 = owner0.getPet("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet11);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getCity();
        owner0.setFirstName("");
        owner0.setId((Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        pet0.addVisit(visit8);
        visit8.setDescription("");
        visit8.setDescription("");
        String str15 = visit8.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getAddress();
        String str8 = owner0.getAddress();
        String str9 = owner0.getLastName();
        owner0.setCity("hi!");
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType14 = pet12.getType();
        java.time.LocalDate localDate15 = pet12.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner16 = pet12.getOwner();
        String str17 = pet12.toString();
        pet12.setName("hi!");
        pet12.setName("");
        pet12.setName("");
        String str24 = pet12.toString();
        pet12.setName("");
        owner0.addPet(pet12);
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        String str29 = pet28.toString();
        org.springframework.samples.petclinic.owner.PetType petType30 = pet28.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository31 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter32 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository31);
        org.springframework.samples.petclinic.owner.PetType petType33 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter32.print(petType33, locale34);
        org.springframework.samples.petclinic.owner.PetType petType36 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter32.print(petType36, locale37);
        pet28.setType(petType36);
        org.springframework.samples.petclinic.owner.Owner owner40 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet41 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate42 = pet41.getBirthDate();
        String str43 = pet41.getName();
        owner40.addPet(pet41);
        org.springframework.samples.petclinic.visit.Visit visit45 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int46 = visit45.getPetId();
        pet41.addVisit(visit45);
        java.time.LocalDate localDate48 = visit45.getDate();
        pet28.setBirthDate(localDate48);
        java.time.LocalDate localDate50 = pet28.getBirthDate();
        java.time.LocalDate localDate51 = pet28.getBirthDate();
        owner0.addPet(pet28);
        org.springframework.samples.petclinic.visit.Visit visit53 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int54 = visit53.getPetId();
        java.time.LocalDate localDate55 = null;
        visit53.setDate(localDate55);
        java.time.LocalDate localDate57 = null;
        visit53.setDate(localDate57);
        visit53.setDescription("");
        visit53.setPetId((Integer) (-1));
        String str63 = visit53.getDescription();
        boolean boolean64 = visit53.isNew();
        boolean boolean65 = visit53.isNew();
        org.springframework.samples.petclinic.owner.Pet pet66 = new org.springframework.samples.petclinic.owner.Pet();
        String str67 = pet66.toString();
        org.springframework.samples.petclinic.owner.PetType petType68 = pet66.getType();
        java.time.LocalDate localDate69 = pet66.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner70 = pet66.getOwner();
        String str71 = pet66.toString();
        pet66.setId((Integer) 100);
        org.springframework.samples.petclinic.visit.Visit visit74 = new org.springframework.samples.petclinic.visit.Visit();
        String str75 = visit74.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner76 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet77 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate78 = pet77.getBirthDate();
        String str79 = pet77.getName();
        owner76.addPet(pet77);
        org.springframework.samples.petclinic.visit.Visit visit81 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int82 = visit81.getPetId();
        pet77.addVisit(visit81);
        Integer int84 = visit81.getPetId();
        Integer int85 = visit81.getPetId();
        boolean boolean86 = visit81.isNew();
        Integer int87 = visit81.getId();
        java.time.LocalDate localDate88 = visit81.getDate();
        visit74.setDate(localDate88);
        pet66.setBirthDate(localDate88);
        visit53.setDate(localDate88);
        pet28.setBirthDate(localDate88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "" + "'", str63.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate88);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        java.time.LocalDate localDate4 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        visit10.setDescription("");
        pet0.addVisit(visit10);
        Integer int16 = visit10.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setCity("");
        owner0.setAddress("");
        String str9 = owner0.getCity();
        owner0.setFirstName("");
        boolean boolean12 = owner0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet12 = owner0.getPet("hi!");
        org.springframework.samples.petclinic.owner.Pet pet15 = owner0.getPet("hi!", false);
        owner0.setLastName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet15);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        org.springframework.samples.petclinic.owner.Owner owner4 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate6 = pet5.getBirthDate();
        String str7 = pet5.getName();
        owner4.addPet(pet5);
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        pet5.addVisit(visit9);
        Integer int12 = visit9.getPetId();
        Integer int13 = visit9.getPetId();
        boolean boolean14 = visit9.isNew();
        Integer int15 = visit9.getId();
        String str16 = visit9.getDescription();
        pet0.addVisit(visit9);
        org.springframework.samples.petclinic.owner.PetType petType18 = pet0.getType();
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        String str20 = pet19.toString();
        java.time.LocalDate localDate21 = null;
        pet19.setBirthDate(localDate21);
        String str23 = pet19.getName();
        org.springframework.samples.petclinic.owner.Owner owner24 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate26 = pet25.getBirthDate();
        String str27 = pet25.getName();
        owner24.addPet(pet25);
        org.springframework.samples.petclinic.visit.Visit visit29 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int30 = visit29.getPetId();
        pet25.addVisit(visit29);
        Integer int32 = visit29.getPetId();
        String str33 = visit29.getDescription();
        java.time.LocalDate localDate34 = visit29.getDate();
        pet19.addVisit(visit29);
        java.time.LocalDate localDate36 = visit29.getDate();
        pet0.setBirthDate(localDate36);
        org.springframework.samples.petclinic.owner.PetType petType38 = pet0.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType38);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        String str2 = pet1.toString();
        org.springframework.samples.petclinic.owner.PetType petType3 = null;
        pet1.setType(petType3);
        boolean boolean5 = pet1.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository6 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter7 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter7.print(petType8, locale9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter7.print(petType11, locale12);
        pet1.setType(petType11);
        java.time.LocalDate localDate15 = pet1.getBirthDate();
        org.springframework.validation.Errors errors16 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) localDate15, errors16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        String str11 = owner0.getCity();
        boolean boolean12 = owner0.isNew();
        boolean boolean13 = owner0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        String str9 = owner0.getTelephone();
        owner0.setTelephone("");
        String str12 = owner0.getCity();
        owner0.setTelephone("");
        String str15 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType14 = null;
        pet12.setType(petType14);
        boolean boolean16 = pet12.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository17 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter18 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter18.print(petType19, locale20);
        org.springframework.samples.petclinic.owner.PetType petType22 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter18.print(petType22, locale23);
        pet12.setType(petType22);
        pet0.setType(petType22);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        String str28 = visit27.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner29 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate31 = pet30.getBirthDate();
        String str32 = pet30.getName();
        owner29.addPet(pet30);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        pet30.addVisit(visit34);
        Integer int37 = visit34.getPetId();
        Integer int38 = visit34.getPetId();
        boolean boolean39 = visit34.isNew();
        Integer int40 = visit34.getId();
        java.time.LocalDate localDate41 = visit34.getDate();
        visit27.setDate(localDate41);
        pet0.setBirthDate(localDate41);
        String str44 = pet0.toString();
        String str45 = pet0.getName();
        java.time.LocalDate localDate46 = pet0.getBirthDate();
        String str47 = pet0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        pet0.addVisit(visit8);
        visit8.setDescription("");
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate15 = pet14.getBirthDate();
        String str16 = pet14.getName();
        owner13.addPet(pet14);
        org.springframework.samples.petclinic.visit.Visit visit18 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int19 = visit18.getPetId();
        pet14.addVisit(visit18);
        Integer int21 = visit18.getPetId();
        Integer int22 = visit18.getPetId();
        boolean boolean23 = visit18.isNew();
        Integer int24 = visit18.getId();
        java.time.LocalDate localDate25 = visit18.getDate();
        visit18.setPetId((Integer) 1);
        visit18.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit30 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int31 = visit30.getPetId();
        java.time.LocalDate localDate32 = null;
        visit30.setDate(localDate32);
        java.time.LocalDate localDate34 = null;
        visit30.setDate(localDate34);
        visit30.setDescription("");
        visit30.setPetId((Integer) (-1));
        visit30.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner42 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet43 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate44 = pet43.getBirthDate();
        String str45 = pet43.getName();
        owner42.addPet(pet43);
        org.springframework.samples.petclinic.visit.Visit visit47 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int48 = visit47.getPetId();
        pet43.addVisit(visit47);
        java.time.LocalDate localDate50 = visit47.getDate();
        visit30.setDate(localDate50);
        java.time.LocalDate localDate52 = visit30.getDate();
        visit18.setDate(localDate52);
        visit8.setDate(localDate52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate52);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        pet5.setId((Integer) 10);
        org.springframework.samples.petclinic.owner.Owner owner10 = pet5.getOwner();
        java.time.LocalDate localDate11 = null;
        pet5.setBirthDate(localDate11);
        org.springframework.samples.petclinic.owner.Owner owner13 = pet5.getOwner();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet16 = owner13.getPet("", true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner13);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        org.springframework.samples.petclinic.owner.Owner owner4 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate6 = pet5.getBirthDate();
        String str7 = pet5.getName();
        owner4.addPet(pet5);
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        pet5.addVisit(visit9);
        Integer int12 = visit9.getPetId();
        Integer int13 = visit9.getPetId();
        boolean boolean14 = visit9.isNew();
        Integer int15 = visit9.getId();
        String str16 = visit9.getDescription();
        pet0.addVisit(visit9);
        java.time.LocalDate localDate18 = visit9.getDate();
        org.springframework.samples.petclinic.owner.Owner owner19 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = owner19.getPet("");
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        String str23 = pet22.toString();
        java.time.LocalDate localDate24 = null;
        pet22.setBirthDate(localDate24);
        String str26 = pet22.getName();
        org.springframework.samples.petclinic.owner.Owner owner27 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate29 = pet28.getBirthDate();
        String str30 = pet28.getName();
        owner27.addPet(pet28);
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        pet28.addVisit(visit32);
        Integer int35 = visit32.getPetId();
        String str36 = visit32.getDescription();
        java.time.LocalDate localDate37 = visit32.getDate();
        pet22.addVisit(visit32);
        owner19.addPet(pet22);
        Integer int40 = pet22.getId();
        org.springframework.samples.petclinic.owner.Pet pet41 = new org.springframework.samples.petclinic.owner.Pet();
        String str42 = pet41.toString();
        java.time.LocalDate localDate43 = null;
        pet41.setBirthDate(localDate43);
        org.springframework.samples.petclinic.owner.Owner owner45 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet46 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate47 = pet46.getBirthDate();
        String str48 = pet46.getName();
        owner45.addPet(pet46);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int51 = visit50.getPetId();
        pet46.addVisit(visit50);
        Integer int53 = visit50.getPetId();
        Integer int54 = visit50.getPetId();
        boolean boolean55 = visit50.isNew();
        Integer int56 = visit50.getId();
        String str57 = visit50.getDescription();
        pet41.addVisit(visit50);
        org.springframework.samples.petclinic.owner.PetType petType59 = pet41.getType();
        org.springframework.samples.petclinic.owner.Pet pet60 = new org.springframework.samples.petclinic.owner.Pet();
        String str61 = pet60.toString();
        java.time.LocalDate localDate62 = null;
        pet60.setBirthDate(localDate62);
        String str64 = pet60.getName();
        org.springframework.samples.petclinic.owner.Owner owner65 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet66 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate67 = pet66.getBirthDate();
        String str68 = pet66.getName();
        owner65.addPet(pet66);
        org.springframework.samples.petclinic.visit.Visit visit70 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int71 = visit70.getPetId();
        pet66.addVisit(visit70);
        Integer int73 = visit70.getPetId();
        String str74 = visit70.getDescription();
        java.time.LocalDate localDate75 = visit70.getDate();
        pet60.addVisit(visit70);
        java.time.LocalDate localDate77 = visit70.getDate();
        pet41.setBirthDate(localDate77);
        pet22.setBirthDate(localDate77);
        visit9.setDate(localDate77);
        visit9.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate77);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        String str3 = pet0.getName();
        String str4 = pet0.toString();
        java.time.LocalDate localDate5 = pet0.getBirthDate();
        String str6 = pet0.toString();
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        visit7.setDescription("hi!");
        visit7.setPetId((Integer) (-1));
        String str12 = visit7.getDescription();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        String str14 = pet13.toString();
        org.springframework.samples.petclinic.owner.PetType petType15 = pet13.getType();
        java.time.LocalDate localDate16 = pet13.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner17 = pet13.getOwner();
        String str18 = pet13.toString();
        java.time.LocalDate localDate19 = pet13.getBirthDate();
        Integer int20 = pet13.getId();
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        visit21.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit24 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int25 = visit24.getPetId();
        java.time.LocalDate localDate26 = null;
        visit24.setDate(localDate26);
        java.time.LocalDate localDate28 = null;
        visit24.setDate(localDate28);
        org.springframework.samples.petclinic.owner.Owner owner30 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate32 = pet31.getBirthDate();
        String str33 = pet31.getName();
        owner30.addPet(pet31);
        org.springframework.samples.petclinic.visit.Visit visit35 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int36 = visit35.getPetId();
        pet31.addVisit(visit35);
        java.time.LocalDate localDate38 = visit35.getDate();
        visit24.setDate(localDate38);
        visit21.setDate(localDate38);
        pet13.setBirthDate(localDate38);
        visit7.setDate(localDate38);
        pet0.addVisit(visit7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "hi!" + "'", str12.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        Class<?> wildcardClass3 = vet0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        Integer int5 = owner0.getId();
        owner0.setFirstName("");
        org.springframework.samples.petclinic.owner.Pet pet9 = owner0.getPet("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet9);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet5 = owner0.getPet("hi!");
        String str6 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        String str8 = pet7.toString();
        org.springframework.samples.petclinic.owner.PetType petType9 = pet7.getType();
        java.time.LocalDate localDate10 = pet7.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner11 = pet7.getOwner();
        String str12 = pet7.toString();
        pet7.setName("hi!");
        pet7.setName("");
        pet7.setName("");
        pet7.setName("hi!");
        owner0.addPet(pet7);
        Integer int22 = owner0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22.equals(1));
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.springframework.samples.petclinic.model.NamedEntity namedEntity0 = new org.springframework.samples.petclinic.model.NamedEntity();
        namedEntity0.setName("hi!");
        String str3 = namedEntity0.getName();
        boolean boolean4 = namedEntity0.isNew();
        namedEntity0.setName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!" + "'", str3.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        org.springframework.samples.petclinic.owner.PetType petType13 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale14 = null;
        String str15 = petTypeFormatter6.print(petType13, locale14);
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter1.print(petType13, locale16);
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        org.springframework.samples.petclinic.owner.Pet pet26 = new org.springframework.samples.petclinic.owner.Pet();
        String str27 = pet26.toString();
        org.springframework.samples.petclinic.owner.PetType petType28 = null;
        pet26.setType(petType28);
        String str30 = pet26.getName();
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        String str32 = pet31.toString();
        org.springframework.samples.petclinic.owner.PetType petType33 = null;
        pet31.setType(petType33);
        boolean boolean35 = pet31.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository36 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter37 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository36);
        org.springframework.samples.petclinic.owner.PetType petType38 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale39 = null;
        String str40 = petTypeFormatter37.print(petType38, locale39);
        org.springframework.samples.petclinic.owner.PetType petType41 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter37.print(petType41, locale42);
        pet31.setType(petType41);
        pet26.setType(petType41);
        java.util.Locale locale46 = null;
        String str47 = petTypeFormatter19.print(petType41, locale46);
        java.util.Locale locale48 = null;
        String str49 = petTypeFormatter1.print(petType41, locale48);
        org.springframework.samples.petclinic.owner.PetType petType50 = null;
        java.util.Locale locale51 = null;
        // The following exception was thrown during execution in test generation
        try {
            String str52 = petTypeFormatter1.print(petType50, locale51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        owner1.setLastName("");
        Integer int4 = owner1.getId();
        owner1.setAddress("");
        owner1.setTelephone("");
        owner1.setAddress("hi!");
        String str11 = owner1.getTelephone();
        org.springframework.validation.Errors errors12 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) str11, errors12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.lang.String cannot be cast to class org.springframework.samples.petclinic.owner.Pet (java.lang.String is in module java.base of loader 'bootstrap'; org.springframework.samples.petclinic.owner.Pet is in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        java.time.LocalDate localDate20 = visit17.getDate();
        pet0.setBirthDate(localDate20);
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        String str23 = visit22.getDescription();
        pet0.addVisit(visit22);
        String str25 = visit22.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = pet1.getBirthDate();
        String str9 = pet1.toString();
        java.time.LocalDate localDate10 = pet1.getBirthDate();
        org.springframework.samples.petclinic.owner.PetType petType11 = pet1.getType();
        String str12 = pet1.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        org.springframework.samples.petclinic.owner.Pet pet4 = new org.springframework.samples.petclinic.owner.Pet();
        String str5 = pet4.toString();
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet4.setType(petType6);
        boolean boolean8 = pet4.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository9 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter10 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter10.print(petType11, locale12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter10.print(petType14, locale15);
        pet4.setType(petType14);
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        String str19 = pet18.toString();
        java.time.LocalDate localDate20 = null;
        pet18.setBirthDate(localDate20);
        org.springframework.samples.petclinic.owner.Owner owner22 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate24 = pet23.getBirthDate();
        String str25 = pet23.getName();
        owner22.addPet(pet23);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int28 = visit27.getPetId();
        pet23.addVisit(visit27);
        Integer int30 = visit27.getPetId();
        Integer int31 = visit27.getPetId();
        boolean boolean32 = visit27.isNew();
        Integer int33 = visit27.getId();
        String str34 = visit27.getDescription();
        pet18.addVisit(visit27);
        pet4.addVisit(visit27);
        owner0.addPet(pet4);
        owner0.setFirstName("hi!");
        String str40 = owner0.getTelephone();
        owner0.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        owner0.setCity("hi!");
        String str13 = owner0.getFirstName();
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!" + "'", str13.equals("hi!"));
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        Integer int6 = visit0.getPetId();
        visit0.setId((Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.Owner owner3 = pet0.getOwner();
        pet0.setName("");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        java.time.LocalDate localDate14 = pet7.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        java.time.LocalDate localDate17 = null;
        visit15.setDate(localDate17);
        java.time.LocalDate localDate19 = null;
        visit15.setDate(localDate19);
        pet7.addVisit(visit15);
        pet0.addVisit(visit15);
        Integer int23 = visit15.getPetId();
        Integer int24 = visit15.getPetId();
        Integer int25 = visit15.getPetId();
        java.time.LocalDate localDate26 = visit15.getDate();
        java.time.LocalDate localDate27 = visit15.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate27);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        boolean boolean2 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate12 = pet11.getBirthDate();
        pet11.setName("hi!");
        pet11.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository17 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter18 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository17);
        org.springframework.samples.petclinic.owner.PetRepository petRepository19 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter20 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter20.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetRepository petRepository24 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter25 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter25.print(petType26, locale27);
        org.springframework.samples.petclinic.owner.PetType petType29 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale30 = null;
        String str31 = petTypeFormatter25.print(petType29, locale30);
        java.util.Locale locale32 = null;
        String str33 = petTypeFormatter20.print(petType29, locale32);
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter18.print(petType29, locale34);
        pet11.setType(petType29);
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter4.print(petType29, locale37);
        org.springframework.samples.petclinic.owner.PetRepository petRepository39 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter40 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository39);
        org.springframework.samples.petclinic.owner.PetType petType41 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter40.print(petType41, locale42);
        org.springframework.samples.petclinic.owner.PetRepository petRepository44 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter45 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository44);
        org.springframework.samples.petclinic.owner.PetType petType46 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale47 = null;
        String str48 = petTypeFormatter45.print(petType46, locale47);
        java.util.Locale locale49 = null;
        String str50 = petTypeFormatter40.print(petType46, locale49);
        org.springframework.samples.petclinic.owner.PetType petType51 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale52 = null;
        String str53 = petTypeFormatter40.print(petType51, locale52);
        org.springframework.samples.petclinic.owner.Pet pet54 = new org.springframework.samples.petclinic.owner.Pet();
        String str55 = pet54.toString();
        org.springframework.samples.petclinic.owner.PetType petType56 = pet54.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository57 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter58 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository57);
        org.springframework.samples.petclinic.owner.PetType petType59 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale60 = null;
        String str61 = petTypeFormatter58.print(petType59, locale60);
        org.springframework.samples.petclinic.owner.PetType petType62 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale63 = null;
        String str64 = petTypeFormatter58.print(petType62, locale63);
        pet54.setType(petType62);
        org.springframework.samples.petclinic.owner.Owner owner66 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet67 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate68 = pet67.getBirthDate();
        String str69 = pet67.getName();
        owner66.addPet(pet67);
        org.springframework.samples.petclinic.visit.Visit visit71 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int72 = visit71.getPetId();
        pet67.addVisit(visit71);
        java.time.LocalDate localDate74 = visit71.getDate();
        pet54.setBirthDate(localDate74);
        org.springframework.samples.petclinic.owner.PetType petType76 = pet54.getType();
        java.util.Locale locale77 = null;
        String str78 = petTypeFormatter40.print(petType76, locale77);
        java.util.Locale locale79 = null;
        String str80 = petTypeFormatter4.print(petType76, locale79);
        org.springframework.samples.petclinic.owner.PetRepository petRepository81 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter82 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository81);
        org.springframework.samples.petclinic.owner.PetType petType83 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale84 = null;
        String str85 = petTypeFormatter82.print(petType83, locale84);
        org.springframework.samples.petclinic.owner.PetRepository petRepository86 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter87 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository86);
        org.springframework.samples.petclinic.owner.PetType petType88 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale89 = null;
        String str90 = petTypeFormatter87.print(petType88, locale89);
        java.util.Locale locale91 = null;
        String str92 = petTypeFormatter82.print(petType88, locale91);
        String str93 = petType88.toString();
        java.util.Locale locale94 = null;
        String str95 = petTypeFormatter4.print(petType88, locale94);
        pet0.setType(petType88);
        String str97 = petType88.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getCity();
        owner0.setFirstName("");
        org.springframework.samples.petclinic.owner.Pet pet9 = owner0.getPet("", false);
        org.springframework.samples.petclinic.owner.Pet pet11 = owner0.getPet("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet11);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        Integer int5 = pet0.getId();
        String str6 = pet0.toString();
        org.springframework.samples.petclinic.owner.Owner owner7 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner7);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        vet0.setFirstName("hi!");
        Integer int7 = vet0.getId();
        Integer int8 = vet0.getId();
        org.springframework.samples.petclinic.vet.Specialty specialty9 = null;
        vet0.addSpecialty(specialty9);
        org.springframework.samples.petclinic.vet.Specialty specialty11 = null;
        vet0.addSpecialty(specialty11);
        org.springframework.samples.petclinic.vet.Specialty specialty13 = null;
        vet0.addSpecialty(specialty13);
        org.springframework.samples.petclinic.vet.Specialty specialty15 = null;
        vet0.addSpecialty(specialty15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("hi!", false);
        // The following exception was thrown during execution in test generation
        try {
            Integer int8 = pet7.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        String str3 = owner0.getTelephone();
        Integer int4 = owner0.getId();
        String str5 = owner0.getAddress();
        String str6 = owner0.getAddress();
        String str7 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        pet2.addVisit(visit6);
        java.time.LocalDate localDate9 = visit6.getDate();
        visit0.setDate(localDate9);
        java.time.LocalDate localDate11 = visit0.getDate();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType14 = null;
        pet12.setType(petType14);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        java.time.LocalDate localDate18 = null;
        visit16.setDate(localDate18);
        org.springframework.samples.petclinic.visit.Visit visit20 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int21 = visit20.getPetId();
        java.time.LocalDate localDate22 = null;
        visit20.setDate(localDate22);
        java.time.LocalDate localDate24 = null;
        visit20.setDate(localDate24);
        visit20.setDescription("");
        visit20.setPetId((Integer) (-1));
        visit20.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner32 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet33 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate34 = pet33.getBirthDate();
        String str35 = pet33.getName();
        owner32.addPet(pet33);
        org.springframework.samples.petclinic.visit.Visit visit37 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int38 = visit37.getPetId();
        pet33.addVisit(visit37);
        java.time.LocalDate localDate40 = visit37.getDate();
        visit20.setDate(localDate40);
        visit16.setDate(localDate40);
        visit16.setDescription("");
        pet12.addVisit(visit16);
        java.time.LocalDate localDate46 = visit16.getDate();
        visit0.setDate(localDate46);
        Class<?> wildcardClass48 = localDate46.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        String str12 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        pet12.setName("hi!");
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        pet12.setName("hi!");
        boolean boolean21 = pet12.isNew();
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        java.time.LocalDate localDate24 = null;
        visit22.setDate(localDate24);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        java.time.LocalDate localDate28 = null;
        visit26.setDate(localDate28);
        java.time.LocalDate localDate30 = null;
        visit26.setDate(localDate30);
        visit26.setDescription("");
        visit26.setPetId((Integer) (-1));
        visit26.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner38 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate40 = pet39.getBirthDate();
        String str41 = pet39.getName();
        owner38.addPet(pet39);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        pet39.addVisit(visit43);
        java.time.LocalDate localDate46 = visit43.getDate();
        visit26.setDate(localDate46);
        visit22.setDate(localDate46);
        pet12.setBirthDate(localDate46);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner51 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet52 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate53 = pet52.getBirthDate();
        String str54 = pet52.getName();
        owner51.addPet(pet52);
        org.springframework.samples.petclinic.visit.Visit visit56 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int57 = visit56.getPetId();
        pet52.addVisit(visit56);
        java.time.LocalDate localDate59 = visit56.getDate();
        visit50.setDate(localDate59);
        pet12.setBirthDate(localDate59);
        pet12.setName("");
        String str64 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType65 = pet12.getType();
        // The following exception was thrown during execution in test generation
        try {
            String str66 = petType65.getName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "" + "'", str64.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType65);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        boolean boolean11 = owner0.isNew();
        String str12 = owner0.getLastName();
        String str13 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        org.springframework.samples.petclinic.owner.PetType petType16 = pet14.getType();
        java.time.LocalDate localDate17 = pet14.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner18 = pet14.getOwner();
        String str19 = pet14.toString();
        pet14.setId((Integer) 100);
        owner0.addPet(pet14);
        Class<?> wildcardClass23 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        owner0.setTelephone("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("", false);
        org.springframework.samples.petclinic.owner.Owner owner7 = new org.springframework.samples.petclinic.owner.Owner();
        String str8 = owner7.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        String str13 = pet9.toString();
        owner7.addPet(pet9);
        owner7.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        String str18 = pet17.toString();
        boolean boolean19 = pet17.isNew();
        owner7.addPet(pet17);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet17.addVisit(visit21);
        owner0.addPet(pet17);
        Class<?> wildcardClass25 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        visit0.setPetId((Integer) 10);
        visit0.setPetId((Integer) 100);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        String str9 = pet8.toString();
        org.springframework.samples.petclinic.owner.PetType petType10 = null;
        pet8.setType(petType10);
        String str12 = pet8.getName();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        String str14 = pet13.toString();
        org.springframework.samples.petclinic.owner.PetType petType15 = null;
        pet13.setType(petType15);
        boolean boolean17 = pet13.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        pet13.setType(petType23);
        pet8.setType(petType23);
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter1.print(petType23, locale28);
        java.util.Locale locale31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType32 = petTypeFormatter1.parse("", locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetRepository petRepository8 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter9 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter9.print(petType10, locale11);
        org.springframework.samples.petclinic.owner.PetRepository petRepository13 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter14 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository13);
        org.springframework.samples.petclinic.owner.PetType petType15 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter14.print(petType15, locale16);
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter9.print(petType15, locale18);
        String str20 = petType15.toString();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter1.print(petType15, locale21);
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType25 = petTypeFormatter1.parse("", locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        String str3 = owner0.getTelephone();
        Integer int4 = owner0.getId();
        String str5 = owner0.getAddress();
        Integer int6 = owner0.getId();
        owner0.setLastName("hi!");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = pet9.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository12 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter13 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter13.print(petType14, locale15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter13.print(petType17, locale18);
        pet9.setType(petType17);
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        String str22 = pet21.toString();
        org.springframework.samples.petclinic.owner.PetType petType23 = null;
        pet21.setType(petType23);
        boolean boolean25 = pet21.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository26 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter27 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository26);
        org.springframework.samples.petclinic.owner.PetType petType28 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter27.print(petType28, locale29);
        org.springframework.samples.petclinic.owner.PetType petType31 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale32 = null;
        String str33 = petTypeFormatter27.print(petType31, locale32);
        pet21.setType(petType31);
        pet9.setType(petType31);
        org.springframework.samples.petclinic.visit.Visit visit36 = new org.springframework.samples.petclinic.visit.Visit();
        String str37 = visit36.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner38 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate40 = pet39.getBirthDate();
        String str41 = pet39.getName();
        owner38.addPet(pet39);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        pet39.addVisit(visit43);
        Integer int46 = visit43.getPetId();
        Integer int47 = visit43.getPetId();
        boolean boolean48 = visit43.isNew();
        Integer int49 = visit43.getId();
        java.time.LocalDate localDate50 = visit43.getDate();
        visit36.setDate(localDate50);
        pet9.setBirthDate(localDate50);
        owner0.addPet(pet9);
        org.springframework.samples.petclinic.owner.PetType petType54 = pet9.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType54);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        java.time.LocalDate localDate5 = null;
        pet3.setBirthDate(localDate5);
        String str7 = pet3.getName();
        owner0.addPet(pet3);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet10 = owner0.getPet("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        String str7 = owner0.getTelephone();
        owner0.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        org.springframework.samples.petclinic.owner.PetType petType12 = pet10.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository13 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter14 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository13);
        org.springframework.samples.petclinic.owner.PetType petType15 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter14.print(petType15, locale16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter14.print(petType18, locale19);
        pet10.setType(petType18);
        java.time.LocalDate localDate22 = pet10.getBirthDate();
        owner0.addPet(pet10);
        org.springframework.samples.petclinic.owner.Owner owner24 = new org.springframework.samples.petclinic.owner.Owner();
        owner24.setId((Integer) 1);
        owner24.setCity("");
        String str29 = owner24.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        String str31 = pet30.toString();
        java.time.LocalDate localDate32 = null;
        pet30.setBirthDate(localDate32);
        String str34 = pet30.getName();
        org.springframework.samples.petclinic.owner.Owner owner35 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet36 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate37 = pet36.getBirthDate();
        String str38 = pet36.getName();
        owner35.addPet(pet36);
        org.springframework.samples.petclinic.visit.Visit visit40 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int41 = visit40.getPetId();
        pet36.addVisit(visit40);
        Integer int43 = visit40.getPetId();
        String str44 = visit40.getDescription();
        java.time.LocalDate localDate45 = visit40.getDate();
        pet30.addVisit(visit40);
        owner24.addPet(pet30);
        org.springframework.samples.petclinic.owner.Pet pet48 = new org.springframework.samples.petclinic.owner.Pet();
        String str49 = pet48.toString();
        org.springframework.samples.petclinic.owner.PetType petType50 = null;
        pet48.setType(petType50);
        String str52 = pet48.toString();
        pet48.setName("hi!");
        pet48.setId((Integer) (-1));
        owner24.addPet(pet48);
        owner0.addPet(pet48);
        owner0.setTelephone("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        org.springframework.samples.petclinic.owner.Owner owner4 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate6 = pet5.getBirthDate();
        String str7 = pet5.getName();
        owner4.addPet(pet5);
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        pet5.addVisit(visit9);
        Integer int12 = visit9.getPetId();
        Integer int13 = visit9.getPetId();
        boolean boolean14 = visit9.isNew();
        Integer int15 = visit9.getId();
        String str16 = visit9.getDescription();
        pet0.addVisit(visit9);
        java.time.LocalDate localDate18 = visit9.getDate();
        org.springframework.samples.petclinic.owner.Owner owner19 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = owner19.getPet("");
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        String str23 = pet22.toString();
        java.time.LocalDate localDate24 = null;
        pet22.setBirthDate(localDate24);
        String str26 = pet22.getName();
        org.springframework.samples.petclinic.owner.Owner owner27 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate29 = pet28.getBirthDate();
        String str30 = pet28.getName();
        owner27.addPet(pet28);
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        pet28.addVisit(visit32);
        Integer int35 = visit32.getPetId();
        String str36 = visit32.getDescription();
        java.time.LocalDate localDate37 = visit32.getDate();
        pet22.addVisit(visit32);
        owner19.addPet(pet22);
        Integer int40 = pet22.getId();
        org.springframework.samples.petclinic.owner.Pet pet41 = new org.springframework.samples.petclinic.owner.Pet();
        String str42 = pet41.toString();
        java.time.LocalDate localDate43 = null;
        pet41.setBirthDate(localDate43);
        org.springframework.samples.petclinic.owner.Owner owner45 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet46 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate47 = pet46.getBirthDate();
        String str48 = pet46.getName();
        owner45.addPet(pet46);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int51 = visit50.getPetId();
        pet46.addVisit(visit50);
        Integer int53 = visit50.getPetId();
        Integer int54 = visit50.getPetId();
        boolean boolean55 = visit50.isNew();
        Integer int56 = visit50.getId();
        String str57 = visit50.getDescription();
        pet41.addVisit(visit50);
        org.springframework.samples.petclinic.owner.PetType petType59 = pet41.getType();
        org.springframework.samples.petclinic.owner.Pet pet60 = new org.springframework.samples.petclinic.owner.Pet();
        String str61 = pet60.toString();
        java.time.LocalDate localDate62 = null;
        pet60.setBirthDate(localDate62);
        String str64 = pet60.getName();
        org.springframework.samples.petclinic.owner.Owner owner65 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet66 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate67 = pet66.getBirthDate();
        String str68 = pet66.getName();
        owner65.addPet(pet66);
        org.springframework.samples.petclinic.visit.Visit visit70 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int71 = visit70.getPetId();
        pet66.addVisit(visit70);
        Integer int73 = visit70.getPetId();
        String str74 = visit70.getDescription();
        java.time.LocalDate localDate75 = visit70.getDate();
        pet60.addVisit(visit70);
        java.time.LocalDate localDate77 = visit70.getDate();
        pet41.setBirthDate(localDate77);
        pet22.setBirthDate(localDate77);
        visit9.setDate(localDate77);
        visit9.setPetId((Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate77);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        boolean boolean2 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetType petType3 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository4 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter5 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository4);
        org.springframework.samples.petclinic.owner.PetType petType6 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale7 = null;
        String str8 = petTypeFormatter5.print(petType6, locale7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter5.print(petType9, locale10);
        pet0.setType(petType9);
        org.springframework.samples.petclinic.owner.PetType petType13 = pet0.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType13);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        org.springframework.samples.petclinic.owner.Pet pet14 = owner5.getPet("", true);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = pet15.getType();
        java.time.LocalDate localDate18 = pet15.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner19 = pet15.getOwner();
        String str20 = pet15.toString();
        pet15.setName("hi!");
        pet15.setName("");
        String str25 = pet15.toString();
        owner5.addPet(pet15);
        org.springframework.samples.petclinic.owner.Owner owner27 = pet15.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "" + "'", str25.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner27);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getCity();
        String str4 = owner0.getCity();
        String str5 = owner0.getAddress();
        boolean boolean6 = owner0.isNew();
        String str7 = owner0.getCity();
        String str8 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        java.time.LocalDate localDate20 = visit17.getDate();
        pet0.setBirthDate(localDate20);
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        String str23 = visit22.getDescription();
        pet0.addVisit(visit22);
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        String str26 = pet25.toString();
        org.springframework.samples.petclinic.owner.PetType petType27 = pet25.getType();
        org.springframework.samples.petclinic.owner.Owner owner28 = pet25.getOwner();
        pet25.setName("");
        org.springframework.samples.petclinic.owner.Owner owner31 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet32 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate33 = pet32.getBirthDate();
        String str34 = pet32.getName();
        owner31.addPet(pet32);
        org.springframework.samples.petclinic.visit.Visit visit36 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int37 = visit36.getPetId();
        pet32.addVisit(visit36);
        java.time.LocalDate localDate39 = pet32.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit40 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int41 = visit40.getPetId();
        java.time.LocalDate localDate42 = null;
        visit40.setDate(localDate42);
        java.time.LocalDate localDate44 = null;
        visit40.setDate(localDate44);
        pet32.addVisit(visit40);
        pet25.addVisit(visit40);
        String str48 = pet25.toString();
        pet25.setName("");
        org.springframework.samples.petclinic.owner.Pet pet51 = new org.springframework.samples.petclinic.owner.Pet();
        String str52 = pet51.toString();
        org.springframework.samples.petclinic.owner.PetType petType53 = null;
        pet51.setType(petType53);
        String str55 = pet51.getName();
        org.springframework.samples.petclinic.owner.Pet pet56 = new org.springframework.samples.petclinic.owner.Pet();
        String str57 = pet56.toString();
        org.springframework.samples.petclinic.owner.PetType petType58 = null;
        pet56.setType(petType58);
        boolean boolean60 = pet56.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository61 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter62 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository61);
        org.springframework.samples.petclinic.owner.PetType petType63 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale64 = null;
        String str65 = petTypeFormatter62.print(petType63, locale64);
        org.springframework.samples.petclinic.owner.PetType petType66 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale67 = null;
        String str68 = petTypeFormatter62.print(petType66, locale67);
        pet56.setType(petType66);
        pet51.setType(petType66);
        pet25.setType(petType66);
        pet0.setType(petType66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "" + "'", str48.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        pet5.setId((Integer) 10);
        org.springframework.samples.petclinic.owner.Owner owner10 = pet5.getOwner();
        java.time.LocalDate localDate11 = null;
        pet5.setBirthDate(localDate11);
        org.springframework.samples.petclinic.owner.Owner owner13 = pet5.getOwner();
        Integer int14 = owner13.getId();
        String str15 = owner13.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType10, locale13);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = null;
        pet15.setType(petType17);
        String str19 = pet15.getName();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        String str21 = pet20.toString();
        org.springframework.samples.petclinic.owner.PetType petType22 = null;
        pet20.setType(petType22);
        boolean boolean24 = pet20.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository25 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter26 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository25);
        org.springframework.samples.petclinic.owner.PetType petType27 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter26.print(petType27, locale28);
        org.springframework.samples.petclinic.owner.PetType petType30 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter26.print(petType30, locale31);
        pet20.setType(petType30);
        pet15.setType(petType30);
        petType30.setName("");
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter1.print(petType30, locale37);
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        String str40 = pet39.toString();
        org.springframework.samples.petclinic.owner.PetType petType41 = pet39.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository42 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter43 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository42);
        org.springframework.samples.petclinic.owner.PetType petType44 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale45 = null;
        String str46 = petTypeFormatter43.print(petType44, locale45);
        org.springframework.samples.petclinic.owner.PetType petType47 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale48 = null;
        String str49 = petTypeFormatter43.print(petType47, locale48);
        pet39.setType(petType47);
        org.springframework.samples.petclinic.owner.Owner owner51 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet52 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate53 = pet52.getBirthDate();
        String str54 = pet52.getName();
        owner51.addPet(pet52);
        org.springframework.samples.petclinic.visit.Visit visit56 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int57 = visit56.getPetId();
        pet52.addVisit(visit56);
        java.time.LocalDate localDate59 = visit56.getDate();
        pet39.setBirthDate(localDate59);
        org.springframework.samples.petclinic.owner.PetType petType61 = pet39.getType();
        petType61.setName("");
        java.util.Locale locale64 = null;
        String str65 = petTypeFormatter1.print(petType61, locale64);
        String str66 = petType61.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "" + "'", str38.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "" + "'", str66.equals(""));
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        java.time.LocalDate localDate12 = visit5.getDate();
        java.time.LocalDate localDate13 = visit5.getDate();
        String str14 = visit5.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        Integer int12 = visit5.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate15 = pet14.getBirthDate();
        String str16 = pet14.getName();
        owner13.addPet(pet14);
        org.springframework.samples.petclinic.visit.Visit visit18 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int19 = visit18.getPetId();
        pet14.addVisit(visit18);
        Integer int21 = visit18.getPetId();
        String str22 = visit18.getDescription();
        Integer int23 = visit18.getPetId();
        java.time.LocalDate localDate24 = visit18.getDate();
        visit5.setDate(localDate24);
        java.time.LocalDate localDate26 = visit5.getDate();
        java.time.LocalDate localDate27 = null;
        visit5.setDate(localDate27);
        String str29 = visit5.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        String str4 = owner0.getCity();
        String str5 = owner0.getCity();
        String str6 = owner0.getTelephone();
        String str7 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("hi!", false);
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        owner0.setLastName("");
        String str10 = owner0.getAddress();
        boolean boolean11 = owner0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        visit0.setDescription("");
        visit0.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        Integer int14 = visit11.getPetId();
        Integer int15 = visit11.getPetId();
        boolean boolean16 = visit11.isNew();
        Integer int17 = visit11.getId();
        java.time.LocalDate localDate18 = visit11.getDate();
        visit0.setDate(localDate18);
        java.time.LocalDate localDate20 = visit0.getDate();
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        visit21.setDescription("");
        visit21.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner27 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate29 = pet28.getBirthDate();
        String str30 = pet28.getName();
        owner27.addPet(pet28);
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        pet28.addVisit(visit32);
        Integer int35 = visit32.getPetId();
        Integer int36 = visit32.getPetId();
        boolean boolean37 = visit32.isNew();
        Integer int38 = visit32.getId();
        java.time.LocalDate localDate39 = visit32.getDate();
        visit21.setDate(localDate39);
        java.time.LocalDate localDate41 = visit21.getDate();
        visit0.setDate(localDate41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate41);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        Integer int5 = pet0.getId();
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        Integer int14 = visit11.getPetId();
        Integer int15 = visit11.getPetId();
        String str16 = visit11.getDescription();
        java.time.LocalDate localDate17 = visit11.getDate();
        pet0.setBirthDate(localDate17);
        org.springframework.samples.petclinic.visit.Visit visit19 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int20 = visit19.getPetId();
        java.time.LocalDate localDate21 = null;
        visit19.setDate(localDate21);
        java.time.LocalDate localDate23 = null;
        visit19.setDate(localDate23);
        visit19.setPetId((Integer) 0);
        org.springframework.samples.petclinic.owner.Pet pet27 = new org.springframework.samples.petclinic.owner.Pet();
        String str28 = pet27.toString();
        org.springframework.samples.petclinic.owner.PetType petType29 = pet27.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository30 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter31 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository30);
        org.springframework.samples.petclinic.owner.PetType petType32 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale33 = null;
        String str34 = petTypeFormatter31.print(petType32, locale33);
        org.springframework.samples.petclinic.owner.PetType petType35 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale36 = null;
        String str37 = petTypeFormatter31.print(petType35, locale36);
        pet27.setType(petType35);
        pet27.setName("");
        org.springframework.samples.petclinic.visit.Visit visit41 = new org.springframework.samples.petclinic.visit.Visit();
        visit41.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit44 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int45 = visit44.getPetId();
        java.time.LocalDate localDate46 = null;
        visit44.setDate(localDate46);
        java.time.LocalDate localDate48 = null;
        visit44.setDate(localDate48);
        org.springframework.samples.petclinic.owner.Owner owner50 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet51 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate52 = pet51.getBirthDate();
        String str53 = pet51.getName();
        owner50.addPet(pet51);
        org.springframework.samples.petclinic.visit.Visit visit55 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int56 = visit55.getPetId();
        pet51.addVisit(visit55);
        java.time.LocalDate localDate58 = visit55.getDate();
        visit44.setDate(localDate58);
        visit41.setDate(localDate58);
        pet27.setBirthDate(localDate58);
        visit19.setDate(localDate58);
        pet0.setBirthDate(localDate58);
        String str64 = pet0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        boolean boolean2 = pet0.isNew();
        String str3 = pet0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType12, locale13);
        org.springframework.samples.petclinic.owner.PetRepository petRepository15 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter16 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter16.print(petType17, locale18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter16.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate24 = pet23.getBirthDate();
        pet23.setName("hi!");
        pet23.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository29 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter30 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository29);
        org.springframework.samples.petclinic.owner.PetRepository petRepository31 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter32 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository31);
        org.springframework.samples.petclinic.owner.PetType petType33 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter32.print(petType33, locale34);
        org.springframework.samples.petclinic.owner.PetRepository petRepository36 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter37 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository36);
        org.springframework.samples.petclinic.owner.PetType petType38 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale39 = null;
        String str40 = petTypeFormatter37.print(petType38, locale39);
        org.springframework.samples.petclinic.owner.PetType petType41 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter37.print(petType41, locale42);
        java.util.Locale locale44 = null;
        String str45 = petTypeFormatter32.print(petType41, locale44);
        java.util.Locale locale46 = null;
        String str47 = petTypeFormatter30.print(petType41, locale46);
        pet23.setType(petType41);
        java.util.Locale locale49 = null;
        String str50 = petTypeFormatter16.print(petType41, locale49);
        org.springframework.samples.petclinic.owner.Owner owner51 = new org.springframework.samples.petclinic.owner.Owner();
        owner51.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.Pet pet54 = new org.springframework.samples.petclinic.owner.Pet();
        String str55 = pet54.toString();
        java.time.LocalDate localDate56 = null;
        pet54.setBirthDate(localDate56);
        String str58 = pet54.getName();
        owner51.addPet(pet54);
        org.springframework.samples.petclinic.owner.Pet pet60 = new org.springframework.samples.petclinic.owner.Pet();
        String str61 = pet60.toString();
        org.springframework.samples.petclinic.owner.PetType petType62 = pet60.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository63 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter64 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository63);
        org.springframework.samples.petclinic.owner.PetType petType65 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale66 = null;
        String str67 = petTypeFormatter64.print(petType65, locale66);
        org.springframework.samples.petclinic.owner.PetType petType68 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale69 = null;
        String str70 = petTypeFormatter64.print(petType68, locale69);
        pet60.setType(petType68);
        pet54.setType(petType68);
        java.util.Locale locale73 = null;
        String str74 = petTypeFormatter16.print(petType68, locale73);
        java.util.Locale locale75 = null;
        String str76 = petTypeFormatter1.print(petType68, locale75);
        java.util.Locale locale78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType79 = petTypeFormatter1.parse("hi!", locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        String str1 = vet0.getFirstName();
        int int2 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        vet0.setFirstName("");
        int int9 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("hi!", true);
        org.springframework.samples.petclinic.owner.Pet pet9 = owner0.getPet("hi!");
        owner0.setFirstName("hi!");
        owner0.setCity("");
        String str14 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!" + "'", str14.equals("hi!"));
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setLastName("hi!");
        String str16 = owner0.getTelephone();
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        String str8 = owner0.getLastName();
        owner0.setFirstName("");
        String str11 = owner0.getFirstName();
        String str12 = owner0.getLastName();
        String str13 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner5 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType6 = pet0.getType();
        String str7 = pet0.getName();
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        String str9 = pet8.toString();
        org.springframework.samples.petclinic.owner.PetType petType10 = null;
        pet8.setType(petType10);
        String str12 = pet8.toString();
        Integer int13 = pet8.getId();
        java.time.LocalDate localDate14 = pet8.getBirthDate();
        String str15 = pet8.getName();
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter17.print(petType18, locale19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter17.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.Pet pet24 = new org.springframework.samples.petclinic.owner.Pet();
        String str25 = pet24.toString();
        org.springframework.samples.petclinic.owner.PetType petType26 = null;
        pet24.setType(petType26);
        String str28 = pet24.getName();
        org.springframework.samples.petclinic.owner.Pet pet29 = new org.springframework.samples.petclinic.owner.Pet();
        String str30 = pet29.toString();
        org.springframework.samples.petclinic.owner.PetType petType31 = null;
        pet29.setType(petType31);
        boolean boolean33 = pet29.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository34 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter35 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository34);
        org.springframework.samples.petclinic.owner.PetType petType36 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter35.print(petType36, locale37);
        org.springframework.samples.petclinic.owner.PetType petType39 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale40 = null;
        String str41 = petTypeFormatter35.print(petType39, locale40);
        pet29.setType(petType39);
        pet24.setType(petType39);
        java.util.Locale locale44 = null;
        String str45 = petTypeFormatter17.print(petType39, locale44);
        pet8.setType(petType39);
        pet0.setType(petType39);
        String str48 = petType39.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        pet12.setName("hi!");
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        pet12.setName("hi!");
        boolean boolean21 = pet12.isNew();
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        java.time.LocalDate localDate24 = null;
        visit22.setDate(localDate24);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        java.time.LocalDate localDate28 = null;
        visit26.setDate(localDate28);
        java.time.LocalDate localDate30 = null;
        visit26.setDate(localDate30);
        visit26.setDescription("");
        visit26.setPetId((Integer) (-1));
        visit26.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner38 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate40 = pet39.getBirthDate();
        String str41 = pet39.getName();
        owner38.addPet(pet39);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        pet39.addVisit(visit43);
        java.time.LocalDate localDate46 = visit43.getDate();
        visit26.setDate(localDate46);
        visit22.setDate(localDate46);
        pet12.setBirthDate(localDate46);
        org.springframework.samples.petclinic.owner.Owner owner50 = pet12.getOwner();
        Integer int51 = owner50.getId();
        String str52 = owner50.getFirstName();
        String str53 = owner50.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet54 = new org.springframework.samples.petclinic.owner.Pet();
        String str55 = pet54.toString();
        org.springframework.samples.petclinic.owner.PetType petType56 = null;
        pet54.setType(petType56);
        boolean boolean58 = pet54.isNew();
        owner50.addPet(pet54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!" + "'", str53.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        pet0.setName("");
        pet0.setName("");
        java.time.LocalDate localDate12 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner13 = pet0.getOwner();
        Integer int14 = pet0.getId();
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        visit15.setDescription("");
        visit15.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner21 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate23 = pet22.getBirthDate();
        String str24 = pet22.getName();
        owner21.addPet(pet22);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        pet22.addVisit(visit26);
        Integer int29 = visit26.getPetId();
        Integer int30 = visit26.getPetId();
        boolean boolean31 = visit26.isNew();
        Integer int32 = visit26.getId();
        java.time.LocalDate localDate33 = visit26.getDate();
        visit15.setDate(localDate33);
        visit15.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.Owner owner37 = new org.springframework.samples.petclinic.owner.Owner();
        owner37.setLastName("");
        Integer int40 = owner37.getId();
        owner37.setAddress("");
        owner37.setTelephone("");
        String str45 = owner37.getFirstName();
        owner37.setLastName("hi!");
        String str48 = owner37.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet49 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate50 = pet49.getBirthDate();
        pet49.setName("hi!");
        pet49.setId((Integer) 1);
        owner37.addPet(pet49);
        pet49.setName("hi!");
        boolean boolean58 = pet49.isNew();
        org.springframework.samples.petclinic.visit.Visit visit59 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int60 = visit59.getPetId();
        java.time.LocalDate localDate61 = null;
        visit59.setDate(localDate61);
        org.springframework.samples.petclinic.visit.Visit visit63 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int64 = visit63.getPetId();
        java.time.LocalDate localDate65 = null;
        visit63.setDate(localDate65);
        java.time.LocalDate localDate67 = null;
        visit63.setDate(localDate67);
        visit63.setDescription("");
        visit63.setPetId((Integer) (-1));
        visit63.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner75 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet76 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate77 = pet76.getBirthDate();
        String str78 = pet76.getName();
        owner75.addPet(pet76);
        org.springframework.samples.petclinic.visit.Visit visit80 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int81 = visit80.getPetId();
        pet76.addVisit(visit80);
        java.time.LocalDate localDate83 = visit80.getDate();
        visit63.setDate(localDate83);
        visit59.setDate(localDate83);
        pet49.setBirthDate(localDate83);
        visit15.setDate(localDate83);
        pet0.setBirthDate(localDate83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "" + "'", str48.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate83);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getAddress();
        String str8 = owner0.getCity();
        String str9 = owner0.getLastName();
        String str10 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        pet2.addVisit(visit6);
        Integer int9 = visit6.getPetId();
        Integer int10 = visit6.getPetId();
        String str11 = visit6.getDescription();
        String str12 = visit6.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate15 = pet14.getBirthDate();
        String str16 = pet14.getName();
        owner13.addPet(pet14);
        org.springframework.samples.petclinic.visit.Visit visit18 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int19 = visit18.getPetId();
        pet14.addVisit(visit18);
        Integer int21 = visit18.getPetId();
        Integer int22 = visit18.getPetId();
        boolean boolean23 = visit18.isNew();
        Integer int24 = visit18.getId();
        java.time.LocalDate localDate25 = visit18.getDate();
        visit6.setDate(localDate25);
        org.springframework.validation.Errors errors27 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) localDate25, errors27);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.time.LocalDate cannot be cast to class org.springframework.samples.petclinic.owner.Pet (java.time.LocalDate is in module java.base of loader 'bootstrap'; org.springframework.samples.petclinic.owner.Pet is in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet5 = owner0.getPet("hi!");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        owner6.setLastName("");
        Integer int9 = owner6.getId();
        owner6.setAddress("");
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        String str13 = owner12.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        org.springframework.samples.petclinic.owner.PetType petType16 = null;
        pet14.setType(petType16);
        String str18 = pet14.toString();
        owner12.addPet(pet14);
        owner12.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        String str23 = pet22.toString();
        boolean boolean24 = pet22.isNew();
        owner12.addPet(pet22);
        owner6.addPet(pet22);
        owner0.addPet(pet22);
        Class<?> wildcardClass28 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        boolean boolean13 = pet9.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter15.print(petType16, locale17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter15.print(petType19, locale20);
        pet9.setType(petType19);
        owner0.addPet(pet9);
        owner0.setLastName("hi!");
        owner0.setLastName("hi!");
        owner0.setCity("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet31 = owner0.getPet("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        java.time.LocalDate localDate14 = visit11.getDate();
        visit0.setDate(localDate14);
        visit0.setDescription("");
        visit0.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        java.time.LocalDate localDate10 = visit5.getDate();
        String str11 = visit5.getDescription();
        Integer int12 = visit5.getPetId();
        java.time.LocalDate localDate13 = visit5.getDate();
        visit5.setPetId((Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        String str5 = owner0.getLastName();
        owner0.setCity("");
        String str8 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet11 = owner0.getPet("hi!", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet11);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        pet2.addVisit(visit6);
        java.time.LocalDate localDate9 = visit6.getDate();
        visit0.setDate(localDate9);
        java.time.LocalDate localDate11 = visit0.getDate();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType14 = null;
        pet12.setType(petType14);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        java.time.LocalDate localDate18 = null;
        visit16.setDate(localDate18);
        org.springframework.samples.petclinic.visit.Visit visit20 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int21 = visit20.getPetId();
        java.time.LocalDate localDate22 = null;
        visit20.setDate(localDate22);
        java.time.LocalDate localDate24 = null;
        visit20.setDate(localDate24);
        visit20.setDescription("");
        visit20.setPetId((Integer) (-1));
        visit20.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner32 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet33 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate34 = pet33.getBirthDate();
        String str35 = pet33.getName();
        owner32.addPet(pet33);
        org.springframework.samples.petclinic.visit.Visit visit37 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int38 = visit37.getPetId();
        pet33.addVisit(visit37);
        java.time.LocalDate localDate40 = visit37.getDate();
        visit20.setDate(localDate40);
        visit16.setDate(localDate40);
        visit16.setDescription("");
        pet12.addVisit(visit16);
        java.time.LocalDate localDate46 = visit16.getDate();
        visit0.setDate(localDate46);
        visit0.setDescription("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        String str5 = owner0.getLastName();
        owner0.setCity("");
        owner0.setTelephone("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        boolean boolean4 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetType petType5 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository6 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter7 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter7.print(petType8, locale9);
        String str11 = petType8.getName();
        Integer int12 = petType8.getId();
        pet0.setType(petType8);
        org.springframework.samples.petclinic.owner.PetType petType14 = null;
        pet0.setType(petType14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        String str2 = pet1.toString();
        org.springframework.samples.petclinic.owner.PetType petType3 = null;
        pet1.setType(petType3);
        boolean boolean5 = pet1.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository6 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter7 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter7.print(petType8, locale9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter7.print(petType11, locale12);
        pet1.setType(petType11);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        java.time.LocalDate localDate17 = null;
        pet15.setBirthDate(localDate17);
        org.springframework.samples.petclinic.owner.Owner owner19 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate21 = pet20.getBirthDate();
        String str22 = pet20.getName();
        owner19.addPet(pet20);
        org.springframework.samples.petclinic.visit.Visit visit24 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int25 = visit24.getPetId();
        pet20.addVisit(visit24);
        Integer int27 = visit24.getPetId();
        Integer int28 = visit24.getPetId();
        boolean boolean29 = visit24.isNew();
        Integer int30 = visit24.getId();
        String str31 = visit24.getDescription();
        pet15.addVisit(visit24);
        pet1.addVisit(visit24);
        org.springframework.validation.Errors errors34 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) visit24, errors34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.visit.Visit cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.visit.Visit and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        Integer int13 = visit10.getPetId();
        String str14 = visit10.getDescription();
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        java.time.LocalDate localDate17 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter19.print(petType26, locale27);
        org.springframework.samples.petclinic.owner.PetRepository petRepository29 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter30 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository29);
        org.springframework.samples.petclinic.owner.PetType petType31 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale32 = null;
        String str33 = petTypeFormatter30.print(petType31, locale32);
        org.springframework.samples.petclinic.owner.PetRepository petRepository34 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter35 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository34);
        org.springframework.samples.petclinic.owner.PetType petType36 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter35.print(petType36, locale37);
        java.util.Locale locale39 = null;
        String str40 = petTypeFormatter30.print(petType36, locale39);
        java.util.Locale locale41 = null;
        String str42 = petTypeFormatter19.print(petType36, locale41);
        pet0.setType(petType36);
        String str44 = petType36.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        java.time.LocalDate localDate8 = pet5.getBirthDate();
        java.time.LocalDate localDate9 = pet5.getBirthDate();
        java.time.LocalDate localDate10 = pet5.getBirthDate();
        Integer int11 = pet5.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        visit13.setDescription("");
        java.time.LocalDate localDate18 = visit13.getDate();
        pet5.setBirthDate(localDate18);
        org.springframework.samples.petclinic.owner.Owner owner20 = pet5.getOwner();
        owner20.setAddress("hi!");
        owner20.setAddress("hi!");
        String str25 = owner20.getAddress();
        String str26 = owner20.getFirstName();
        owner20.setTelephone("hi!");
        owner20.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "hi!" + "'", str25.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate1 = pet0.getBirthDate();
        pet0.setName("hi!");
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository6 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter7 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository6);
        org.springframework.samples.petclinic.owner.PetRepository petRepository8 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter9 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter9.print(petType10, locale11);
        org.springframework.samples.petclinic.owner.PetRepository petRepository13 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter14 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository13);
        org.springframework.samples.petclinic.owner.PetType petType15 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter14.print(petType15, locale16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter14.print(petType18, locale19);
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter9.print(petType18, locale21);
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter7.print(petType18, locale23);
        pet0.setType(petType18);
        org.springframework.samples.petclinic.owner.Owner owner26 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet27 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate28 = pet27.getBirthDate();
        String str29 = pet27.getName();
        owner26.addPet(pet27);
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        String str32 = pet31.toString();
        java.time.LocalDate localDate33 = null;
        pet31.setBirthDate(localDate33);
        String str35 = pet31.getName();
        org.springframework.samples.petclinic.owner.Owner owner36 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet37 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate38 = pet37.getBirthDate();
        String str39 = pet37.getName();
        owner36.addPet(pet37);
        org.springframework.samples.petclinic.visit.Visit visit41 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int42 = visit41.getPetId();
        pet37.addVisit(visit41);
        Integer int44 = visit41.getPetId();
        String str45 = visit41.getDescription();
        java.time.LocalDate localDate46 = visit41.getDate();
        pet31.addVisit(visit41);
        java.time.LocalDate localDate48 = pet31.getBirthDate();
        java.time.LocalDate localDate49 = pet31.getBirthDate();
        owner26.addPet(pet31);
        pet31.setName("");
        org.springframework.samples.petclinic.owner.Owner owner53 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet54 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate55 = pet54.getBirthDate();
        String str56 = pet54.getName();
        owner53.addPet(pet54);
        org.springframework.samples.petclinic.owner.Pet pet58 = new org.springframework.samples.petclinic.owner.Pet();
        String str59 = pet58.toString();
        owner53.addPet(pet58);
        org.springframework.samples.petclinic.owner.Owner owner61 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet62 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate63 = pet62.getBirthDate();
        String str64 = pet62.getName();
        owner61.addPet(pet62);
        org.springframework.samples.petclinic.visit.Visit visit66 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int67 = visit66.getPetId();
        pet62.addVisit(visit66);
        visit66.setDescription("");
        java.time.LocalDate localDate71 = visit66.getDate();
        pet58.setBirthDate(localDate71);
        pet31.setBirthDate(localDate71);
        pet0.setBirthDate(localDate71);
        String str75 = pet0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str75 + "' != '" + "hi!" + "'", str75.equals("hi!"));
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetRepository petRepository2 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter3 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository2);
        org.springframework.samples.petclinic.owner.PetType petType4 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale5 = null;
        String str6 = petTypeFormatter3.print(petType4, locale5);
        org.springframework.samples.petclinic.owner.PetRepository petRepository7 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter8 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter8.print(petType9, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter8.print(petType12, locale13);
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter3.print(petType12, locale15);
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter1.print(petType12, locale17);
        org.springframework.samples.petclinic.owner.PetRepository petRepository19 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter20 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter20.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetType petType24 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale25 = null;
        String str26 = petTypeFormatter20.print(petType24, locale25);
        org.springframework.samples.petclinic.owner.PetType petType27 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter20.print(petType27, locale28);
        org.springframework.samples.petclinic.owner.PetRepository petRepository30 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter31 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository30);
        org.springframework.samples.petclinic.owner.PetType petType32 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale33 = null;
        String str34 = petTypeFormatter31.print(petType32, locale33);
        org.springframework.samples.petclinic.owner.PetRepository petRepository35 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter36 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository35);
        org.springframework.samples.petclinic.owner.PetType petType37 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale38 = null;
        String str39 = petTypeFormatter36.print(petType37, locale38);
        java.util.Locale locale40 = null;
        String str41 = petTypeFormatter31.print(petType37, locale40);
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter20.print(petType37, locale42);
        java.util.Locale locale44 = null;
        String str45 = petTypeFormatter1.print(petType37, locale44);
        String str46 = petType37.toString();
        String str47 = petType37.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        Integer int12 = visit5.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate15 = pet14.getBirthDate();
        String str16 = pet14.getName();
        owner13.addPet(pet14);
        org.springframework.samples.petclinic.visit.Visit visit18 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int19 = visit18.getPetId();
        pet14.addVisit(visit18);
        Integer int21 = visit18.getPetId();
        String str22 = visit18.getDescription();
        Integer int23 = visit18.getPetId();
        java.time.LocalDate localDate24 = visit18.getDate();
        visit5.setDate(localDate24);
        java.time.LocalDate localDate26 = visit5.getDate();
        java.time.LocalDate localDate27 = null;
        visit5.setDate(localDate27);
        Integer int29 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        java.time.LocalDate localDate20 = visit17.getDate();
        pet0.setBirthDate(localDate20);
        java.time.LocalDate localDate22 = pet0.getBirthDate();
        Class<?> wildcardClass23 = pet0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetRepository petRepository8 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter9 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter9.print(petType10, locale11);
        org.springframework.samples.petclinic.owner.PetRepository petRepository13 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter14 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository13);
        org.springframework.samples.petclinic.owner.PetType petType15 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter14.print(petType15, locale16);
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter9.print(petType15, locale18);
        String str20 = petType15.toString();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter1.print(petType15, locale21);
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType25 = petTypeFormatter1.parse("hi!", locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        owner5.setFirstName("");
        String str11 = owner5.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        String str9 = pet8.toString();
        org.springframework.samples.petclinic.owner.PetType petType10 = null;
        pet8.setType(petType10);
        String str12 = pet8.getName();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        String str14 = pet13.toString();
        org.springframework.samples.petclinic.owner.PetType petType15 = null;
        pet13.setType(petType15);
        boolean boolean17 = pet13.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        pet13.setType(petType23);
        pet8.setType(petType23);
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter1.print(petType23, locale28);
        org.springframework.samples.petclinic.owner.PetRepository petRepository30 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter31 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository30);
        org.springframework.samples.petclinic.owner.PetRepository petRepository32 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter33 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository32);
        org.springframework.samples.petclinic.owner.PetType petType34 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale35 = null;
        String str36 = petTypeFormatter33.print(petType34, locale35);
        org.springframework.samples.petclinic.owner.PetRepository petRepository37 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter38 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository37);
        org.springframework.samples.petclinic.owner.PetType petType39 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale40 = null;
        String str41 = petTypeFormatter38.print(petType39, locale40);
        org.springframework.samples.petclinic.owner.PetType petType42 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale43 = null;
        String str44 = petTypeFormatter38.print(petType42, locale43);
        java.util.Locale locale45 = null;
        String str46 = petTypeFormatter33.print(petType42, locale45);
        java.util.Locale locale47 = null;
        String str48 = petTypeFormatter31.print(petType42, locale47);
        org.springframework.samples.petclinic.owner.PetRepository petRepository49 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter50 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository49);
        org.springframework.samples.petclinic.owner.PetType petType51 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale52 = null;
        String str53 = petTypeFormatter50.print(petType51, locale52);
        org.springframework.samples.petclinic.owner.PetType petType54 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale55 = null;
        String str56 = petTypeFormatter50.print(petType54, locale55);
        org.springframework.samples.petclinic.owner.PetType petType57 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale58 = null;
        String str59 = petTypeFormatter50.print(petType57, locale58);
        org.springframework.samples.petclinic.owner.PetRepository petRepository60 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter61 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository60);
        org.springframework.samples.petclinic.owner.PetType petType62 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale63 = null;
        String str64 = petTypeFormatter61.print(petType62, locale63);
        org.springframework.samples.petclinic.owner.PetRepository petRepository65 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter66 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository65);
        org.springframework.samples.petclinic.owner.PetType petType67 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale68 = null;
        String str69 = petTypeFormatter66.print(petType67, locale68);
        java.util.Locale locale70 = null;
        String str71 = petTypeFormatter61.print(petType67, locale70);
        java.util.Locale locale72 = null;
        String str73 = petTypeFormatter50.print(petType67, locale72);
        java.util.Locale locale74 = null;
        String str75 = petTypeFormatter31.print(petType67, locale74);
        org.springframework.samples.petclinic.owner.PetRepository petRepository76 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter77 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository76);
        org.springframework.samples.petclinic.owner.PetType petType78 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale79 = null;
        String str80 = petTypeFormatter77.print(petType78, locale79);
        org.springframework.samples.petclinic.owner.PetRepository petRepository81 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter82 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository81);
        org.springframework.samples.petclinic.owner.PetType petType83 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale84 = null;
        String str85 = petTypeFormatter82.print(petType83, locale84);
        org.springframework.samples.petclinic.owner.PetType petType86 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale87 = null;
        String str88 = petTypeFormatter82.print(petType86, locale87);
        org.springframework.samples.petclinic.owner.PetType petType89 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale90 = null;
        String str91 = petTypeFormatter82.print(petType89, locale90);
        java.util.Locale locale92 = null;
        String str93 = petTypeFormatter77.print(petType89, locale92);
        java.util.Locale locale94 = null;
        String str95 = petTypeFormatter31.print(petType89, locale94);
        java.util.Locale locale96 = null;
        String str97 = petTypeFormatter1.print(petType89, locale96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("");
        owner0.setAddress("");
        owner0.setTelephone("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        boolean boolean5 = owner0.isNew();
        String str6 = owner0.getFirstName();
        owner0.setCity("hi!");
        Integer int9 = owner0.getId();
        String str10 = owner0.getTelephone();
        owner0.setLastName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        boolean boolean13 = pet9.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter15.print(petType16, locale17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter15.print(petType19, locale20);
        pet9.setType(petType19);
        owner0.addPet(pet9);
        owner0.setLastName("hi!");
        owner0.setLastName("hi!");
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner5 = pet0.getOwner();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        pet0.setId((Integer) (-1));
        org.springframework.samples.petclinic.owner.Owner owner9 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate11 = pet10.getBirthDate();
        pet10.setName("hi!");
        pet10.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetRepository petRepository23 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter24 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository23);
        org.springframework.samples.petclinic.owner.PetType petType25 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale26 = null;
        String str27 = petTypeFormatter24.print(petType25, locale26);
        org.springframework.samples.petclinic.owner.PetType petType28 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter24.print(petType28, locale29);
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter19.print(petType28, locale31);
        java.util.Locale locale33 = null;
        String str34 = petTypeFormatter17.print(petType28, locale33);
        pet10.setType(petType28);
        pet0.setType(petType28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        visit5.setDescription("hi!");
        visit5.setPetId((Integer) 100);
        Integer int15 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15.equals(100));
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType12, locale13);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = pet15.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        pet15.setType(petType23);
        org.springframework.samples.petclinic.owner.Owner owner27 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate29 = pet28.getBirthDate();
        String str30 = pet28.getName();
        owner27.addPet(pet28);
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        pet28.addVisit(visit32);
        java.time.LocalDate localDate35 = visit32.getDate();
        pet15.setBirthDate(localDate35);
        org.springframework.samples.petclinic.owner.PetType petType37 = pet15.getType();
        java.util.Locale locale38 = null;
        String str39 = petTypeFormatter1.print(petType37, locale38);
        org.springframework.samples.petclinic.owner.Pet pet40 = new org.springframework.samples.petclinic.owner.Pet();
        String str41 = pet40.toString();
        org.springframework.samples.petclinic.owner.PetType petType42 = null;
        pet40.setType(petType42);
        String str44 = pet40.getName();
        org.springframework.samples.petclinic.owner.Pet pet45 = new org.springframework.samples.petclinic.owner.Pet();
        String str46 = pet45.toString();
        org.springframework.samples.petclinic.owner.PetType petType47 = null;
        pet45.setType(petType47);
        boolean boolean49 = pet45.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository50 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter51 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository50);
        org.springframework.samples.petclinic.owner.PetType petType52 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale53 = null;
        String str54 = petTypeFormatter51.print(petType52, locale53);
        org.springframework.samples.petclinic.owner.PetType petType55 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale56 = null;
        String str57 = petTypeFormatter51.print(petType55, locale56);
        pet45.setType(petType55);
        pet40.setType(petType55);
        petType55.setName("");
        String str62 = petType55.toString();
        java.util.Locale locale63 = null;
        String str64 = petTypeFormatter1.print(petType55, locale63);
        java.util.Locale locale66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType67 = petTypeFormatter1.parse("", locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "" + "'", str62.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "" + "'", str64.equals(""));
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        boolean boolean6 = owner5.isNew();
        String str7 = owner5.getTelephone();
        String str8 = owner5.getAddress();
        owner5.setId((Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet5 = owner0.getPet("hi!");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        owner6.setLastName("");
        Integer int9 = owner6.getId();
        owner6.setAddress("");
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        String str13 = owner12.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        org.springframework.samples.petclinic.owner.PetType petType16 = null;
        pet14.setType(petType16);
        String str18 = pet14.toString();
        owner12.addPet(pet14);
        owner12.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        String str23 = pet22.toString();
        boolean boolean24 = pet22.isNew();
        owner12.addPet(pet22);
        owner6.addPet(pet22);
        owner0.addPet(pet22);
        owner0.setAddress("");
        owner0.setCity("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getAddress();
        String str8 = owner0.getAddress();
        String str9 = owner0.getLastName();
        owner0.setCity("hi!");
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType14 = pet12.getType();
        java.time.LocalDate localDate15 = pet12.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner16 = pet12.getOwner();
        String str17 = pet12.toString();
        pet12.setName("hi!");
        pet12.setName("");
        pet12.setName("");
        String str24 = pet12.toString();
        pet12.setName("");
        owner0.addPet(pet12);
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        String str8 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        pet0.addVisit(visit8);
        visit8.setDescription("");
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        java.time.LocalDate localDate15 = null;
        visit13.setDate(localDate15);
        java.time.LocalDate localDate17 = null;
        visit13.setDate(localDate17);
        visit13.setDescription("");
        visit13.setPetId((Integer) (-1));
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        String str24 = pet23.toString();
        org.springframework.samples.petclinic.owner.PetType petType25 = null;
        pet23.setType(petType25);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int28 = visit27.getPetId();
        java.time.LocalDate localDate29 = null;
        visit27.setDate(localDate29);
        org.springframework.samples.petclinic.visit.Visit visit31 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int32 = visit31.getPetId();
        java.time.LocalDate localDate33 = null;
        visit31.setDate(localDate33);
        java.time.LocalDate localDate35 = null;
        visit31.setDate(localDate35);
        visit31.setDescription("");
        visit31.setPetId((Integer) (-1));
        visit31.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner43 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet44 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate45 = pet44.getBirthDate();
        String str46 = pet44.getName();
        owner43.addPet(pet44);
        org.springframework.samples.petclinic.visit.Visit visit48 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int49 = visit48.getPetId();
        pet44.addVisit(visit48);
        java.time.LocalDate localDate51 = visit48.getDate();
        visit31.setDate(localDate51);
        visit27.setDate(localDate51);
        visit27.setDescription("");
        pet23.addVisit(visit27);
        org.springframework.samples.petclinic.owner.Owner owner57 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet58 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate59 = pet58.getBirthDate();
        String str60 = pet58.getName();
        owner57.addPet(pet58);
        org.springframework.samples.petclinic.visit.Visit visit62 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int63 = visit62.getPetId();
        pet58.addVisit(visit62);
        visit62.setDescription("");
        java.time.LocalDate localDate67 = visit62.getDate();
        visit27.setDate(localDate67);
        visit13.setDate(localDate67);
        visit8.setDate(localDate67);
        visit8.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate67);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setPetId((Integer) (-1));
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        java.time.LocalDate localDate10 = null;
        visit8.setDate(localDate10);
        java.time.LocalDate localDate12 = null;
        visit8.setDate(localDate12);
        org.springframework.samples.petclinic.owner.Owner owner14 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate16 = pet15.getBirthDate();
        String str17 = pet15.getName();
        owner14.addPet(pet15);
        org.springframework.samples.petclinic.visit.Visit visit19 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int20 = visit19.getPetId();
        pet15.addVisit(visit19);
        Integer int22 = visit19.getPetId();
        String str23 = visit19.getDescription();
        java.time.LocalDate localDate24 = visit19.getDate();
        visit8.setDate(localDate24);
        visit0.setDate(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        vet0.setLastName("");
        vet0.setLastName("hi!");
        org.springframework.samples.petclinic.vet.Specialty specialty7 = null;
        vet0.addSpecialty(specialty7);
        int int9 = vet0.getNrOfSpecialties();
        vet0.setFirstName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        String str7 = owner0.getTelephone();
        String str8 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        java.time.LocalDate localDate11 = null;
        pet9.setBirthDate(localDate11);
        String str13 = pet9.getName();
        Integer int14 = pet9.getId();
        org.springframework.samples.petclinic.owner.Owner owner15 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet16 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate17 = pet16.getBirthDate();
        String str18 = pet16.getName();
        owner15.addPet(pet16);
        org.springframework.samples.petclinic.visit.Visit visit20 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int21 = visit20.getPetId();
        pet16.addVisit(visit20);
        Integer int23 = visit20.getPetId();
        Integer int24 = visit20.getPetId();
        String str25 = visit20.getDescription();
        java.time.LocalDate localDate26 = visit20.getDate();
        pet9.setBirthDate(localDate26);
        org.springframework.samples.petclinic.visit.Visit visit28 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int29 = visit28.getPetId();
        java.time.LocalDate localDate30 = null;
        visit28.setDate(localDate30);
        java.time.LocalDate localDate32 = null;
        visit28.setDate(localDate32);
        visit28.setPetId((Integer) 0);
        org.springframework.samples.petclinic.owner.Pet pet36 = new org.springframework.samples.petclinic.owner.Pet();
        String str37 = pet36.toString();
        org.springframework.samples.petclinic.owner.PetType petType38 = pet36.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository39 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter40 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository39);
        org.springframework.samples.petclinic.owner.PetType petType41 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter40.print(petType41, locale42);
        org.springframework.samples.petclinic.owner.PetType petType44 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale45 = null;
        String str46 = petTypeFormatter40.print(petType44, locale45);
        pet36.setType(petType44);
        pet36.setName("");
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        visit50.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit53 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int54 = visit53.getPetId();
        java.time.LocalDate localDate55 = null;
        visit53.setDate(localDate55);
        java.time.LocalDate localDate57 = null;
        visit53.setDate(localDate57);
        org.springframework.samples.petclinic.owner.Owner owner59 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet60 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate61 = pet60.getBirthDate();
        String str62 = pet60.getName();
        owner59.addPet(pet60);
        org.springframework.samples.petclinic.visit.Visit visit64 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int65 = visit64.getPetId();
        pet60.addVisit(visit64);
        java.time.LocalDate localDate67 = visit64.getDate();
        visit53.setDate(localDate67);
        visit50.setDate(localDate67);
        pet36.setBirthDate(localDate67);
        visit28.setDate(localDate67);
        pet9.setBirthDate(localDate67);
        owner0.addPet(pet9);
        org.springframework.samples.petclinic.owner.Owner owner74 = pet9.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner74);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = pet1.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        java.time.LocalDate localDate11 = null;
        visit9.setDate(localDate11);
        java.time.LocalDate localDate13 = null;
        visit9.setDate(localDate13);
        pet1.addVisit(visit9);
        String str16 = pet1.toString();
        org.springframework.samples.petclinic.owner.Owner owner17 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate19 = pet18.getBirthDate();
        String str20 = pet18.getName();
        owner17.addPet(pet18);
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        pet18.addVisit(visit22);
        Integer int25 = visit22.getPetId();
        Integer int26 = visit22.getPetId();
        boolean boolean27 = visit22.isNew();
        Integer int28 = visit22.getId();
        Integer int29 = visit22.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner30 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate32 = pet31.getBirthDate();
        String str33 = pet31.getName();
        owner30.addPet(pet31);
        org.springframework.samples.petclinic.visit.Visit visit35 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int36 = visit35.getPetId();
        pet31.addVisit(visit35);
        Integer int38 = visit35.getPetId();
        String str39 = visit35.getDescription();
        Integer int40 = visit35.getPetId();
        java.time.LocalDate localDate41 = visit35.getDate();
        visit22.setDate(localDate41);
        visit22.setPetId((Integer) 10);
        pet1.addVisit(visit22);
        org.springframework.samples.petclinic.visit.Visit visit46 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int47 = visit46.getPetId();
        java.time.LocalDate localDate48 = null;
        visit46.setDate(localDate48);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int51 = visit50.getPetId();
        java.time.LocalDate localDate52 = null;
        visit50.setDate(localDate52);
        java.time.LocalDate localDate54 = null;
        visit50.setDate(localDate54);
        visit50.setDescription("");
        visit50.setPetId((Integer) (-1));
        visit50.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner62 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet63 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate64 = pet63.getBirthDate();
        String str65 = pet63.getName();
        owner62.addPet(pet63);
        org.springframework.samples.petclinic.visit.Visit visit67 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int68 = visit67.getPetId();
        pet63.addVisit(visit67);
        java.time.LocalDate localDate70 = visit67.getDate();
        visit50.setDate(localDate70);
        visit46.setDate(localDate70);
        visit22.setDate(localDate70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate70);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setAddress("hi!");
        String str16 = owner0.getAddress();
        String str17 = owner0.getTelephone();
        String str18 = owner0.getAddress();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet20 = owner0.getPet("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!" + "'", str16.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "" + "'", str17.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "hi!" + "'", str18.equals("hi!"));
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate9 = pet8.getBirthDate();
        pet8.setName("hi!");
        pet8.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter17.print(petType18, locale19);
        org.springframework.samples.petclinic.owner.PetRepository petRepository21 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter22 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter22.print(petType23, locale24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter22.print(petType26, locale27);
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter17.print(petType26, locale29);
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter15.print(petType26, locale31);
        pet8.setType(petType26);
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter1.print(petType26, locale34);
        org.springframework.samples.petclinic.owner.PetRepository petRepository36 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter37 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository36);
        org.springframework.samples.petclinic.owner.PetType petType38 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale39 = null;
        String str40 = petTypeFormatter37.print(petType38, locale39);
        org.springframework.samples.petclinic.owner.PetRepository petRepository41 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter42 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository41);
        org.springframework.samples.petclinic.owner.PetType petType43 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale44 = null;
        String str45 = petTypeFormatter42.print(petType43, locale44);
        java.util.Locale locale46 = null;
        String str47 = petTypeFormatter37.print(petType43, locale46);
        org.springframework.samples.petclinic.owner.PetType petType48 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale49 = null;
        String str50 = petTypeFormatter37.print(petType48, locale49);
        org.springframework.samples.petclinic.owner.Pet pet51 = new org.springframework.samples.petclinic.owner.Pet();
        String str52 = pet51.toString();
        org.springframework.samples.petclinic.owner.PetType petType53 = pet51.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository54 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter55 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository54);
        org.springframework.samples.petclinic.owner.PetType petType56 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale57 = null;
        String str58 = petTypeFormatter55.print(petType56, locale57);
        org.springframework.samples.petclinic.owner.PetType petType59 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale60 = null;
        String str61 = petTypeFormatter55.print(petType59, locale60);
        pet51.setType(petType59);
        org.springframework.samples.petclinic.owner.Owner owner63 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet64 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate65 = pet64.getBirthDate();
        String str66 = pet64.getName();
        owner63.addPet(pet64);
        org.springframework.samples.petclinic.visit.Visit visit68 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int69 = visit68.getPetId();
        pet64.addVisit(visit68);
        java.time.LocalDate localDate71 = visit68.getDate();
        pet51.setBirthDate(localDate71);
        org.springframework.samples.petclinic.owner.PetType petType73 = pet51.getType();
        java.util.Locale locale74 = null;
        String str75 = petTypeFormatter37.print(petType73, locale74);
        java.util.Locale locale76 = null;
        String str77 = petTypeFormatter1.print(petType73, locale76);
        org.springframework.samples.petclinic.owner.PetRepository petRepository78 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter79 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository78);
        org.springframework.samples.petclinic.owner.PetType petType80 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale81 = null;
        String str82 = petTypeFormatter79.print(petType80, locale81);
        org.springframework.samples.petclinic.owner.PetRepository petRepository83 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter84 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository83);
        org.springframework.samples.petclinic.owner.PetType petType85 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale86 = null;
        String str87 = petTypeFormatter84.print(petType85, locale86);
        java.util.Locale locale88 = null;
        String str89 = petTypeFormatter79.print(petType85, locale88);
        java.util.Locale locale90 = null;
        String str91 = petTypeFormatter1.print(petType85, locale90);
        java.util.Locale locale93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType94 = petTypeFormatter1.parse("", locale93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        pet2.addVisit(visit6);
        java.time.LocalDate localDate9 = visit6.getDate();
        visit0.setDate(localDate9);
        visit0.setDescription("hi!");
        visit0.setPetId((Integer) 10);
        visit0.setPetId((Integer) 10);
        visit0.setPetId((Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("hi!", true);
        owner0.setTelephone("");
        String str10 = owner0.getCity();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        String str12 = pet11.toString();
        org.springframework.samples.petclinic.owner.PetType petType13 = null;
        pet11.setType(petType13);
        String str15 = pet11.getName();
        boolean boolean16 = pet11.isNew();
        String str17 = pet11.getName();
        owner0.addPet(pet11);
        org.springframework.samples.petclinic.owner.PetRepository petRepository19 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter20 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter20.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetRepository petRepository24 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter25 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter25.print(petType26, locale27);
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter20.print(petType26, locale29);
        org.springframework.samples.petclinic.owner.PetType petType31 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale32 = null;
        String str33 = petTypeFormatter20.print(petType31, locale32);
        org.springframework.samples.petclinic.owner.PetRepository petRepository34 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter35 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository34);
        org.springframework.samples.petclinic.owner.PetType petType36 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter35.print(petType36, locale37);
        org.springframework.samples.petclinic.owner.PetRepository petRepository39 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter40 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository39);
        org.springframework.samples.petclinic.owner.PetType petType41 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter40.print(petType41, locale42);
        org.springframework.samples.petclinic.owner.PetType petType44 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale45 = null;
        String str46 = petTypeFormatter40.print(petType44, locale45);
        java.util.Locale locale47 = null;
        String str48 = petTypeFormatter35.print(petType44, locale47);
        String str49 = petType44.toString();
        java.util.Locale locale50 = null;
        String str51 = petTypeFormatter20.print(petType44, locale50);
        pet11.setType(petType44);
        boolean boolean53 = pet11.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("");
        owner0.setAddress("");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("", true);
        owner0.setCity("hi!");
        owner0.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        String str4 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        String str7 = vet0.getLastName();
        int int8 = vet0.getNrOfSpecialties();
        vet0.setLastName("");
        String str11 = vet0.getLastName();
        String str12 = vet0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        vet0.setLastName("hi!");
        boolean boolean3 = vet0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet18 = owner0.getPet("", true);
        String str19 = owner0.getCity();
        String str20 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        owner0.setAddress("");
        owner0.setFirstName("hi!");
        String str11 = owner0.getLastName();
        String str12 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        String str3 = pet0.getName();
        String str4 = pet0.toString();
        java.time.LocalDate localDate5 = pet0.getBirthDate();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getCity();
        String str5 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("", true);
        org.springframework.samples.petclinic.owner.Pet pet11 = owner0.getPet("hi!", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet11);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        String str14 = visit11.getDescription();
        visit11.setPetId((Integer) (-1));
        pet1.addVisit(visit11);
        String str18 = visit11.getDescription();
        Integer int19 = visit11.getPetId();
        Class<?> wildcardClass20 = visit11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getTelephone();
        String str9 = owner0.getFirstName();
        owner0.setAddress("");
        owner0.setAddress("");
        owner0.setLastName("hi!");
        owner0.setLastName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        Integer int5 = vet0.getId();
        int int6 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("hi!");
        String str7 = owner0.getCity();
        owner0.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        String str2 = visit0.getDescription();
        java.time.LocalDate localDate3 = visit0.getDate();
        visit0.setId((Integer) 10);
        visit0.setPetId((Integer) 0);
        visit0.setPetId((Integer) 10);
        visit0.setDescription("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        visit13.setDescription("");
        java.time.LocalDate localDate18 = visit13.getDate();
        pet5.setBirthDate(localDate18);
        org.springframework.samples.petclinic.owner.Owner owner20 = pet5.getOwner();
        owner20.setAddress("hi!");
        String str23 = owner20.getTelephone();
        String str24 = owner20.getAddress();
        Integer int25 = owner20.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "hi!" + "'", str24.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate6 = pet5.getBirthDate();
        String str7 = pet5.getName();
        owner4.addPet(pet5);
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        pet5.addVisit(visit9);
        Integer int12 = visit9.getPetId();
        Integer int13 = visit9.getPetId();
        boolean boolean14 = visit9.isNew();
        Integer int15 = visit9.getId();
        java.time.LocalDate localDate16 = visit9.getDate();
        pet0.addVisit(visit9);
        Integer int18 = visit9.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        boolean boolean13 = pet9.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter15.print(petType16, locale17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter15.print(petType19, locale20);
        pet9.setType(petType19);
        owner0.addPet(pet9);
        owner0.setFirstName("hi!");
        Integer int26 = owner0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        pet12.setName("hi!");
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        pet12.setName("hi!");
        boolean boolean21 = pet12.isNew();
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        java.time.LocalDate localDate24 = null;
        visit22.setDate(localDate24);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        java.time.LocalDate localDate28 = null;
        visit26.setDate(localDate28);
        java.time.LocalDate localDate30 = null;
        visit26.setDate(localDate30);
        visit26.setDescription("");
        visit26.setPetId((Integer) (-1));
        visit26.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner38 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate40 = pet39.getBirthDate();
        String str41 = pet39.getName();
        owner38.addPet(pet39);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        pet39.addVisit(visit43);
        java.time.LocalDate localDate46 = visit43.getDate();
        visit26.setDate(localDate46);
        visit22.setDate(localDate46);
        pet12.setBirthDate(localDate46);
        org.springframework.samples.petclinic.owner.Owner owner50 = pet12.getOwner();
        Integer int51 = owner50.getId();
        String str52 = owner50.getFirstName();
        String str53 = owner50.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "" + "'", str53.equals(""));
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        owner0.setAddress("hi!");
        owner0.setTelephone("hi!");
        String str9 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("hi!", true);
        owner0.setTelephone("");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet13 = owner0.getPet("");
        org.springframework.samples.petclinic.owner.Owner owner14 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate16 = pet15.getBirthDate();
        String str17 = pet15.getName();
        owner14.addPet(pet15);
        org.springframework.samples.petclinic.owner.Owner owner19 = pet15.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate22 = pet21.getBirthDate();
        String str23 = pet21.getName();
        owner20.addPet(pet21);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet21.addVisit(visit25);
        String str28 = visit25.getDescription();
        visit25.setPetId((Integer) (-1));
        pet15.addVisit(visit25);
        pet15.setName("hi!");
        pet15.setName("hi!");
        owner0.addPet(pet15);
        String str37 = owner0.getAddress();
        String str38 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "hi!" + "'", str37.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "" + "'", str38.equals(""));
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("hi!");
        String str8 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        visit0.setPetId((Integer) (-1));
        visit0.setDescription("hi!");
        Integer int12 = visit0.getPetId();
        String str13 = visit0.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12.equals((-1)));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!" + "'", str13.equals("hi!"));
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        Integer int5 = pet0.getId();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner7 = pet0.getOwner();
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner9 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate11 = pet10.getBirthDate();
        String str12 = pet10.getName();
        owner9.addPet(pet10);
        org.springframework.samples.petclinic.visit.Visit visit14 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int15 = visit14.getPetId();
        pet10.addVisit(visit14);
        java.time.LocalDate localDate17 = visit14.getDate();
        visit8.setDate(localDate17);
        java.time.LocalDate localDate19 = visit8.getDate();
        pet0.setBirthDate(localDate19);
        String str21 = pet0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        boolean boolean4 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        pet0.setType(petType10);
        org.springframework.samples.petclinic.owner.Owner owner14 = pet0.getOwner();
        pet0.setId((Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner14);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        String str5 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        java.time.LocalDate localDate8 = null;
        pet6.setBirthDate(localDate8);
        String str10 = pet6.getName();
        org.springframework.samples.petclinic.owner.Owner owner11 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        String str14 = pet12.getName();
        owner11.addPet(pet12);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        pet12.addVisit(visit16);
        Integer int19 = visit16.getPetId();
        String str20 = visit16.getDescription();
        java.time.LocalDate localDate21 = visit16.getDate();
        pet6.addVisit(visit16);
        owner0.addPet(pet6);
        org.springframework.samples.petclinic.owner.Pet pet24 = new org.springframework.samples.petclinic.owner.Pet();
        String str25 = pet24.toString();
        org.springframework.samples.petclinic.owner.PetType petType26 = null;
        pet24.setType(petType26);
        String str28 = pet24.toString();
        pet24.setName("hi!");
        pet24.setId((Integer) (-1));
        owner0.addPet(pet24);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet35 = owner0.getPet("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.vet.Vet vet1 = new org.springframework.samples.petclinic.vet.Vet();
        int int2 = vet1.getNrOfSpecialties();
        int int3 = vet1.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty4 = null;
        vet1.addSpecialty(specialty4);
        Integer int6 = vet1.getId();
        org.springframework.samples.petclinic.vet.Specialty specialty7 = null;
        vet1.addSpecialty(specialty7);
        org.springframework.validation.Errors errors9 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) vet1, errors9);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.vet.Vet cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.vet.Vet and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        owner5.setCity("hi!");
        owner5.setCity("");
        owner5.setLastName("");
        owner5.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        Integer int5 = owner0.getId();
        owner0.setFirstName("");
        org.springframework.samples.petclinic.owner.Pet pet9 = owner0.getPet("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet9);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        pet5.setId((Integer) 10);
        org.springframework.samples.petclinic.owner.Owner owner10 = pet5.getOwner();
        java.time.LocalDate localDate11 = null;
        pet5.setBirthDate(localDate11);
        org.springframework.samples.petclinic.owner.Owner owner13 = pet5.getOwner();
        Integer int14 = owner13.getId();
        owner13.setCity("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        vet0.setFirstName("hi!");
        Integer int7 = vet0.getId();
        Integer int8 = vet0.getId();
        org.springframework.samples.petclinic.vet.Specialty specialty9 = null;
        vet0.addSpecialty(specialty9);
        org.springframework.samples.petclinic.vet.Specialty specialty11 = null;
        vet0.addSpecialty(specialty11);
        org.springframework.samples.petclinic.vet.Specialty specialty13 = null;
        vet0.addSpecialty(specialty13);
        int int15 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        Integer int5 = pet0.getId();
        String str6 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner7 = pet0.getOwner();
        Integer int8 = pet0.getId();
        java.time.LocalDate localDate9 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        Integer int5 = vet0.getId();
        vet0.setFirstName("hi!");
        int int8 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        boolean boolean2 = pet0.isNew();
        String str3 = pet0.getName();
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        visit4.setDescription("");
        visit4.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner10 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate12 = pet11.getBirthDate();
        String str13 = pet11.getName();
        owner10.addPet(pet11);
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        pet11.addVisit(visit15);
        Integer int18 = visit15.getPetId();
        Integer int19 = visit15.getPetId();
        boolean boolean20 = visit15.isNew();
        Integer int21 = visit15.getId();
        java.time.LocalDate localDate22 = visit15.getDate();
        visit4.setDate(localDate22);
        pet0.setBirthDate(localDate22);
        String str25 = pet0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("hi!");
        String str7 = owner0.getCity();
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = pet1.getBirthDate();
        String str9 = pet1.toString();
        String str10 = pet1.toString();
        Integer int11 = pet1.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        vet0.setFirstName("hi!");
        int int7 = vet0.getNrOfSpecialties();
        int int8 = vet0.getNrOfSpecialties();
        vet0.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getTelephone();
        String str9 = owner0.getFirstName();
        owner0.setId((Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        pet2.addVisit(visit6);
        String str9 = visit6.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner10 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate12 = pet11.getBirthDate();
        String str13 = pet11.getName();
        owner10.addPet(pet11);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        owner10.addPet(pet15);
        org.springframework.samples.petclinic.owner.Owner owner18 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate20 = pet19.getBirthDate();
        String str21 = pet19.getName();
        owner18.addPet(pet19);
        org.springframework.samples.petclinic.visit.Visit visit23 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int24 = visit23.getPetId();
        pet19.addVisit(visit23);
        visit23.setDescription("");
        java.time.LocalDate localDate28 = visit23.getDate();
        pet15.setBirthDate(localDate28);
        visit6.setDate(localDate28);
        visit6.setPetId((Integer) 1);
        org.springframework.validation.Errors errors33 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) visit6, errors33);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.visit.Visit cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.visit.Visit and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        org.springframework.samples.petclinic.owner.Owner owner8 = pet5.getOwner();
        String str9 = owner8.getFirstName();
        String str10 = owner8.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType10, locale13);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = null;
        pet15.setType(petType17);
        String str19 = pet15.getName();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        String str21 = pet20.toString();
        org.springframework.samples.petclinic.owner.PetType petType22 = null;
        pet20.setType(petType22);
        boolean boolean24 = pet20.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository25 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter26 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository25);
        org.springframework.samples.petclinic.owner.PetType petType27 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter26.print(petType27, locale28);
        org.springframework.samples.petclinic.owner.PetType petType30 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter26.print(petType30, locale31);
        pet20.setType(petType30);
        pet15.setType(petType30);
        petType30.setName("");
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter1.print(petType30, locale37);
        petType30.setName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "" + "'", str38.equals(""));
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        pet0.setName("");
        pet0.setName("");
        pet0.setName("hi!");
        pet0.setId((Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        pet0.setName("");
        org.springframework.samples.petclinic.visit.Visit visit14 = new org.springframework.samples.petclinic.visit.Visit();
        visit14.setPetId((Integer) 10);
        visit14.setId((Integer) 1);
        pet0.addVisit(visit14);
        String str20 = visit14.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        owner0.setTelephone("hi!");
        owner0.setLastName("");
        String str12 = owner0.getFirstName();
        owner0.setCity("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        String str2 = owner1.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        org.springframework.samples.petclinic.owner.PetType petType5 = null;
        pet3.setType(petType5);
        String str7 = pet3.toString();
        owner1.addPet(pet3);
        owner1.setTelephone("");
        org.springframework.validation.Errors errors11 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) owner1, errors11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.owner.Owner cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.owner.Owner and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType12, locale13);
        boolean boolean15 = petType12.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        Integer int13 = visit10.getPetId();
        String str14 = visit10.getDescription();
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        java.time.LocalDate localDate17 = pet0.getBirthDate();
        Integer int18 = pet0.getId();
        String str19 = pet0.getName();
        org.springframework.samples.petclinic.owner.PetType petType20 = pet0.getType();
        // The following exception was thrown during execution in test generation
        try {
            petType20.setName("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType20);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        boolean boolean4 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        pet0.setType(petType10);
        org.springframework.samples.petclinic.owner.Owner owner14 = pet0.getOwner();
        String str15 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner16 = pet0.getOwner();
        // The following exception was thrown during execution in test generation
        try {
            Class<?> wildcardClass17 = owner16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner16);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        visit13.setDescription("");
        java.time.LocalDate localDate18 = visit13.getDate();
        pet5.setBirthDate(localDate18);
        org.springframework.samples.petclinic.owner.Owner owner20 = pet5.getOwner();
        owner20.setAddress("hi!");
        String str23 = owner20.getTelephone();
        String str24 = owner20.getAddress();
        owner20.setAddress("");
        String str27 = owner20.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "hi!" + "'", str24.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        boolean boolean11 = owner0.isNew();
        String str12 = owner0.getLastName();
        String str13 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        org.springframework.samples.petclinic.owner.PetType petType16 = pet14.getType();
        java.time.LocalDate localDate17 = pet14.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner18 = pet14.getOwner();
        String str19 = pet14.toString();
        pet14.setId((Integer) 100);
        owner0.addPet(pet14);
        boolean boolean23 = pet14.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.Owner owner3 = pet0.getOwner();
        pet0.setName("");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        java.time.LocalDate localDate14 = pet7.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        java.time.LocalDate localDate17 = null;
        visit15.setDate(localDate17);
        java.time.LocalDate localDate19 = null;
        visit15.setDate(localDate19);
        pet7.addVisit(visit15);
        pet0.addVisit(visit15);
        String str23 = pet0.toString();
        String str24 = pet0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        org.springframework.samples.petclinic.owner.PetType petType13 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale14 = null;
        String str15 = petTypeFormatter6.print(petType13, locale14);
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter1.print(petType13, locale16);
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter19.print(petType26, locale27);
        org.springframework.samples.petclinic.owner.PetRepository petRepository29 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter30 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository29);
        org.springframework.samples.petclinic.owner.PetType petType31 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale32 = null;
        String str33 = petTypeFormatter30.print(petType31, locale32);
        org.springframework.samples.petclinic.owner.PetRepository petRepository34 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter35 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository34);
        org.springframework.samples.petclinic.owner.PetType petType36 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter35.print(petType36, locale37);
        java.util.Locale locale39 = null;
        String str40 = petTypeFormatter30.print(petType36, locale39);
        java.util.Locale locale41 = null;
        String str42 = petTypeFormatter19.print(petType36, locale41);
        org.springframework.samples.petclinic.owner.PetRepository petRepository43 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter44 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository43);
        org.springframework.samples.petclinic.owner.PetType petType45 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale46 = null;
        String str47 = petTypeFormatter44.print(petType45, locale46);
        org.springframework.samples.petclinic.owner.PetRepository petRepository48 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter49 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository48);
        org.springframework.samples.petclinic.owner.PetType petType50 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale51 = null;
        String str52 = petTypeFormatter49.print(petType50, locale51);
        java.util.Locale locale53 = null;
        String str54 = petTypeFormatter44.print(petType50, locale53);
        org.springframework.samples.petclinic.owner.PetType petType55 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale56 = null;
        String str57 = petTypeFormatter44.print(petType55, locale56);
        java.util.Locale locale58 = null;
        String str59 = petTypeFormatter19.print(petType55, locale58);
        org.springframework.samples.petclinic.owner.Pet pet60 = new org.springframework.samples.petclinic.owner.Pet();
        String str61 = pet60.toString();
        org.springframework.samples.petclinic.owner.PetType petType62 = null;
        pet60.setType(petType62);
        String str64 = pet60.getName();
        org.springframework.samples.petclinic.owner.Pet pet65 = new org.springframework.samples.petclinic.owner.Pet();
        String str66 = pet65.toString();
        org.springframework.samples.petclinic.owner.PetType petType67 = null;
        pet65.setType(petType67);
        boolean boolean69 = pet65.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository70 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter71 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository70);
        org.springframework.samples.petclinic.owner.PetType petType72 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale73 = null;
        String str74 = petTypeFormatter71.print(petType72, locale73);
        org.springframework.samples.petclinic.owner.PetType petType75 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale76 = null;
        String str77 = petTypeFormatter71.print(petType75, locale76);
        pet65.setType(petType75);
        pet60.setType(petType75);
        petType75.setName("");
        java.util.Locale locale82 = null;
        String str83 = petTypeFormatter19.print(petType75, locale82);
        java.util.Locale locale84 = null;
        String str85 = petTypeFormatter1.print(petType75, locale84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str83 + "' != '" + "" + "'", str83.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "" + "'", str85.equals(""));
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType12, locale13);
        org.springframework.samples.petclinic.owner.PetRepository petRepository15 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter16 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter16.print(petType17, locale18);
        org.springframework.samples.petclinic.owner.PetRepository petRepository20 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter21 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository20);
        org.springframework.samples.petclinic.owner.PetType petType22 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter21.print(petType22, locale23);
        org.springframework.samples.petclinic.owner.PetType petType25 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale26 = null;
        String str27 = petTypeFormatter21.print(petType25, locale26);
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter16.print(petType25, locale28);
        String str30 = petType25.toString();
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter1.print(petType25, locale31);
        java.util.Locale locale34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType35 = petTypeFormatter1.parse("", locale34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        String str3 = owner0.getTelephone();
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getTelephone();
        String str9 = owner0.getFirstName();
        owner0.setAddress("");
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType14 = pet12.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository15 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter16 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter16.print(petType17, locale18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter16.print(petType20, locale21);
        pet12.setType(petType20);
        org.springframework.samples.petclinic.owner.Owner owner24 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate26 = pet25.getBirthDate();
        String str27 = pet25.getName();
        owner24.addPet(pet25);
        org.springframework.samples.petclinic.visit.Visit visit29 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int30 = visit29.getPetId();
        pet25.addVisit(visit29);
        String str32 = visit29.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner33 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet34 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate35 = pet34.getBirthDate();
        String str36 = pet34.getName();
        owner33.addPet(pet34);
        org.springframework.samples.petclinic.owner.Pet pet38 = new org.springframework.samples.petclinic.owner.Pet();
        String str39 = pet38.toString();
        owner33.addPet(pet38);
        org.springframework.samples.petclinic.owner.Owner owner41 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet42 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate43 = pet42.getBirthDate();
        String str44 = pet42.getName();
        owner41.addPet(pet42);
        org.springframework.samples.petclinic.visit.Visit visit46 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int47 = visit46.getPetId();
        pet42.addVisit(visit46);
        visit46.setDescription("");
        java.time.LocalDate localDate51 = visit46.getDate();
        pet38.setBirthDate(localDate51);
        visit29.setDate(localDate51);
        visit29.setPetId((Integer) 0);
        pet12.addVisit(visit29);
        owner0.addPet(pet12);
        org.springframework.samples.petclinic.owner.Pet pet58 = null;
        // The following exception was thrown during execution in test generation
        try {
            owner0.addPet(pet58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setLastName("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet18 = owner0.getPet("", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        String str11 = owner0.getFirstName();
        owner0.setId((Integer) 100);
        String str14 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!" + "'", str14.equals("hi!"));
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        vet0.setFirstName("hi!");
        Integer int7 = vet0.getId();
        Integer int8 = vet0.getId();
        vet0.setLastName("hi!");
        org.springframework.samples.petclinic.vet.Specialty specialty11 = null;
        vet0.addSpecialty(specialty11);
        int int13 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        String str8 = visit0.getDescription();
        Integer int9 = visit0.getId();
        boolean boolean10 = visit0.isNew();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        String str12 = pet11.toString();
        org.springframework.samples.petclinic.owner.PetType petType13 = pet11.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter15.print(petType16, locale17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter15.print(petType19, locale20);
        pet11.setType(petType19);
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        String str24 = pet23.toString();
        org.springframework.samples.petclinic.owner.PetType petType25 = null;
        pet23.setType(petType25);
        boolean boolean27 = pet23.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository28 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter29 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository28);
        org.springframework.samples.petclinic.owner.PetType petType30 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter29.print(petType30, locale31);
        org.springframework.samples.petclinic.owner.PetType petType33 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter29.print(petType33, locale34);
        pet23.setType(petType33);
        pet11.setType(petType33);
        org.springframework.samples.petclinic.visit.Visit visit38 = new org.springframework.samples.petclinic.visit.Visit();
        String str39 = visit38.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner40 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet41 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate42 = pet41.getBirthDate();
        String str43 = pet41.getName();
        owner40.addPet(pet41);
        org.springframework.samples.petclinic.visit.Visit visit45 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int46 = visit45.getPetId();
        pet41.addVisit(visit45);
        Integer int48 = visit45.getPetId();
        Integer int49 = visit45.getPetId();
        boolean boolean50 = visit45.isNew();
        Integer int51 = visit45.getId();
        java.time.LocalDate localDate52 = visit45.getDate();
        visit38.setDate(localDate52);
        pet11.setBirthDate(localDate52);
        String str55 = pet11.toString();
        org.springframework.samples.petclinic.owner.Pet pet56 = new org.springframework.samples.petclinic.owner.Pet();
        String str57 = pet56.toString();
        org.springframework.samples.petclinic.owner.PetType petType58 = null;
        pet56.setType(petType58);
        String str60 = pet56.toString();
        org.springframework.samples.petclinic.owner.Pet pet61 = new org.springframework.samples.petclinic.owner.Pet();
        String str62 = pet61.toString();
        org.springframework.samples.petclinic.owner.PetType petType63 = pet61.getType();
        java.time.LocalDate localDate64 = pet61.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner65 = pet61.getOwner();
        String str66 = pet61.toString();
        pet61.setName("hi!");
        pet61.setName("");
        pet61.setName("");
        java.time.LocalDate localDate73 = pet61.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit74 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int75 = visit74.getPetId();
        java.time.LocalDate localDate76 = null;
        visit74.setDate(localDate76);
        java.time.LocalDate localDate78 = null;
        visit74.setDate(localDate78);
        visit74.setDescription("");
        visit74.setPetId((Integer) (-1));
        visit74.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner86 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet87 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate88 = pet87.getBirthDate();
        String str89 = pet87.getName();
        owner86.addPet(pet87);
        org.springframework.samples.petclinic.visit.Visit visit91 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int92 = visit91.getPetId();
        pet87.addVisit(visit91);
        java.time.LocalDate localDate94 = visit91.getDate();
        visit74.setDate(localDate94);
        pet61.setBirthDate(localDate94);
        pet56.setBirthDate(localDate94);
        pet11.setBirthDate(localDate94);
        visit0.setDate(localDate94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate94);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        java.time.LocalDate localDate8 = visit0.getDate();
        visit0.setId((Integer) 10);
        java.time.LocalDate localDate11 = visit0.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("");
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        java.time.LocalDate localDate5 = null;
        pet3.setBirthDate(localDate5);
        String str7 = pet3.getName();
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        Integer int16 = visit13.getPetId();
        String str17 = visit13.getDescription();
        java.time.LocalDate localDate18 = visit13.getDate();
        pet3.addVisit(visit13);
        owner0.addPet(pet3);
        owner0.setFirstName("");
        String str23 = owner0.getLastName();
        owner0.setCity("");
        String str26 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "" + "'", str26.equals(""));
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setLastName("hi!");
        String str16 = owner0.getTelephone();
        String str17 = owner0.getLastName();
        owner0.setCity("hi!");
        String str20 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!" + "'", str17.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet12 = owner0.getPet("hi!", true);
        String str13 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        boolean boolean5 = owner0.isNew();
        String str6 = owner0.getFirstName();
        String str7 = owner0.getLastName();
        owner0.setLastName("hi!");
        owner0.setFirstName("");
        owner0.setLastName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType12, locale13);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = pet15.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        pet15.setType(petType23);
        org.springframework.samples.petclinic.owner.Owner owner27 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate29 = pet28.getBirthDate();
        String str30 = pet28.getName();
        owner27.addPet(pet28);
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        pet28.addVisit(visit32);
        java.time.LocalDate localDate35 = visit32.getDate();
        pet15.setBirthDate(localDate35);
        org.springframework.samples.petclinic.owner.PetType petType37 = pet15.getType();
        java.util.Locale locale38 = null;
        String str39 = petTypeFormatter1.print(petType37, locale38);
        org.springframework.samples.petclinic.owner.Pet pet40 = new org.springframework.samples.petclinic.owner.Pet();
        String str41 = pet40.toString();
        org.springframework.samples.petclinic.owner.PetType petType42 = pet40.getType();
        java.time.LocalDate localDate43 = pet40.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner44 = pet40.getOwner();
        String str45 = pet40.toString();
        pet40.setId((Integer) 100);
        org.springframework.samples.petclinic.visit.Visit visit48 = new org.springframework.samples.petclinic.visit.Visit();
        String str49 = visit48.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner50 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet51 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate52 = pet51.getBirthDate();
        String str53 = pet51.getName();
        owner50.addPet(pet51);
        org.springframework.samples.petclinic.visit.Visit visit55 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int56 = visit55.getPetId();
        pet51.addVisit(visit55);
        Integer int58 = visit55.getPetId();
        Integer int59 = visit55.getPetId();
        boolean boolean60 = visit55.isNew();
        Integer int61 = visit55.getId();
        java.time.LocalDate localDate62 = visit55.getDate();
        visit48.setDate(localDate62);
        pet40.setBirthDate(localDate62);
        org.springframework.samples.petclinic.owner.Owner owner65 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet66 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate67 = pet66.getBirthDate();
        String str68 = pet66.getName();
        owner65.addPet(pet66);
        java.time.LocalDate localDate70 = pet66.getBirthDate();
        boolean boolean71 = pet66.isNew();
        org.springframework.samples.petclinic.owner.PetType petType72 = new org.springframework.samples.petclinic.owner.PetType();
        pet66.setType(petType72);
        pet40.setType(petType72);
        java.util.Locale locale75 = null;
        String str76 = petTypeFormatter1.print(petType72, locale75);
        org.springframework.samples.petclinic.owner.Pet pet77 = new org.springframework.samples.petclinic.owner.Pet();
        String str78 = pet77.toString();
        org.springframework.samples.petclinic.owner.PetType petType79 = null;
        pet77.setType(petType79);
        boolean boolean81 = pet77.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository82 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter83 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository82);
        org.springframework.samples.petclinic.owner.PetType petType84 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale85 = null;
        String str86 = petTypeFormatter83.print(petType84, locale85);
        org.springframework.samples.petclinic.owner.PetType petType87 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale88 = null;
        String str89 = petTypeFormatter83.print(petType87, locale88);
        pet77.setType(petType87);
        petType87.setName("");
        java.util.Locale locale93 = null;
        String str94 = petTypeFormatter1.print(petType87, locale93);
        java.util.Locale locale96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType97 = petTypeFormatter1.parse("", locale96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str94 + "' != '" + "" + "'", str94.equals(""));
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        String str5 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        java.time.LocalDate localDate8 = null;
        pet6.setBirthDate(localDate8);
        String str10 = pet6.getName();
        org.springframework.samples.petclinic.owner.Owner owner11 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        String str14 = pet12.getName();
        owner11.addPet(pet12);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        pet12.addVisit(visit16);
        Integer int19 = visit16.getPetId();
        String str20 = visit16.getDescription();
        java.time.LocalDate localDate21 = visit16.getDate();
        pet6.addVisit(visit16);
        owner0.addPet(pet6);
        String str24 = owner0.getTelephone();
        Class<?> wildcardClass25 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        String str9 = owner0.getFirstName();
        org.springframework.samples.petclinic.owner.Pet pet12 = owner0.getPet("hi!", false);
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate15 = pet14.getBirthDate();
        String str16 = pet14.getName();
        owner13.addPet(pet14);
        org.springframework.samples.petclinic.owner.Owner owner18 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate20 = pet19.getBirthDate();
        String str21 = pet19.getName();
        owner18.addPet(pet19);
        org.springframework.samples.petclinic.visit.Visit visit23 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int24 = visit23.getPetId();
        pet19.addVisit(visit23);
        Integer int26 = visit23.getPetId();
        Integer int27 = visit23.getPetId();
        boolean boolean28 = visit23.isNew();
        Integer int29 = visit23.getId();
        java.time.LocalDate localDate30 = visit23.getDate();
        visit23.setPetId((Integer) 1);
        visit23.setPetId((Integer) 0);
        java.time.LocalDate localDate35 = visit23.getDate();
        pet14.setBirthDate(localDate35);
        owner0.addPet(pet14);
        java.time.LocalDate localDate38 = pet14.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner39 = pet14.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType40 = pet14.getType();
        String str41 = pet14.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        owner0.setAddress("");
        String str9 = owner0.getFirstName();
        org.springframework.samples.petclinic.owner.Pet pet12 = owner0.getPet("hi!", false);
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        java.time.LocalDate localDate17 = null;
        pet15.setBirthDate(localDate17);
        String str19 = pet15.getName();
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate22 = pet21.getBirthDate();
        String str23 = pet21.getName();
        owner20.addPet(pet21);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet21.addVisit(visit25);
        Integer int28 = visit25.getPetId();
        String str29 = visit25.getDescription();
        java.time.LocalDate localDate30 = visit25.getDate();
        pet15.addVisit(visit25);
        owner0.addPet(pet15);
        org.springframework.samples.petclinic.visit.Visit visit33 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        visit34.setDescription("");
        visit34.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner40 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet41 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate42 = pet41.getBirthDate();
        String str43 = pet41.getName();
        owner40.addPet(pet41);
        org.springframework.samples.petclinic.visit.Visit visit45 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int46 = visit45.getPetId();
        pet41.addVisit(visit45);
        Integer int48 = visit45.getPetId();
        Integer int49 = visit45.getPetId();
        boolean boolean50 = visit45.isNew();
        Integer int51 = visit45.getId();
        java.time.LocalDate localDate52 = visit45.getDate();
        visit34.setDate(localDate52);
        java.time.LocalDate localDate54 = visit34.getDate();
        visit33.setDate(localDate54);
        pet15.addVisit(visit33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate54);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        owner0.setAddress("");
        String str9 = owner0.getFirstName();
        owner0.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet5 = owner0.getPet("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        org.springframework.samples.petclinic.owner.PetType petType8 = null;
        pet6.setType(petType8);
        boolean boolean10 = pet6.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository11 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter12 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository11);
        org.springframework.samples.petclinic.owner.PetType petType13 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale14 = null;
        String str15 = petTypeFormatter12.print(petType13, locale14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter12.print(petType16, locale17);
        pet6.setType(petType16);
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        String str21 = pet20.toString();
        java.time.LocalDate localDate22 = null;
        pet20.setBirthDate(localDate22);
        org.springframework.samples.petclinic.owner.Owner owner24 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate26 = pet25.getBirthDate();
        String str27 = pet25.getName();
        owner24.addPet(pet25);
        org.springframework.samples.petclinic.visit.Visit visit29 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int30 = visit29.getPetId();
        pet25.addVisit(visit29);
        Integer int32 = visit29.getPetId();
        Integer int33 = visit29.getPetId();
        boolean boolean34 = visit29.isNew();
        Integer int35 = visit29.getId();
        String str36 = visit29.getDescription();
        pet20.addVisit(visit29);
        pet6.addVisit(visit29);
        org.springframework.samples.petclinic.visit.Visit visit39 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int40 = visit39.getPetId();
        java.time.LocalDate localDate41 = null;
        visit39.setDate(localDate41);
        java.time.LocalDate localDate43 = null;
        visit39.setDate(localDate43);
        org.springframework.samples.petclinic.owner.Owner owner45 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet46 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate47 = pet46.getBirthDate();
        String str48 = pet46.getName();
        owner45.addPet(pet46);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int51 = visit50.getPetId();
        pet46.addVisit(visit50);
        java.time.LocalDate localDate53 = visit50.getDate();
        visit39.setDate(localDate53);
        visit39.setPetId((Integer) 1);
        pet6.addVisit(visit39);
        pet6.setName("");
        owner0.addPet(pet6);
        owner0.setFirstName("");
        String str63 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        org.springframework.samples.petclinic.owner.Owner owner6 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType7 = pet0.getType();
        pet0.setId((Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType7);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        owner0.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        owner0.setCity("");
        String str6 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        Integer int7 = pet0.getId();
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        visit8.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        java.time.LocalDate localDate13 = null;
        visit11.setDate(localDate13);
        java.time.LocalDate localDate15 = null;
        visit11.setDate(localDate15);
        org.springframework.samples.petclinic.owner.Owner owner17 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate19 = pet18.getBirthDate();
        String str20 = pet18.getName();
        owner17.addPet(pet18);
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        pet18.addVisit(visit22);
        java.time.LocalDate localDate25 = visit22.getDate();
        visit11.setDate(localDate25);
        visit8.setDate(localDate25);
        pet0.setBirthDate(localDate25);
        org.springframework.samples.petclinic.visit.Visit visit29 = null;
        // The following exception was thrown during execution in test generation
        try {
            pet0.addVisit(visit29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        String str11 = owner0.getFirstName();
        owner0.setId((Integer) 100);
        org.springframework.samples.petclinic.owner.Owner owner14 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate16 = pet15.getBirthDate();
        String str17 = pet15.getName();
        owner14.addPet(pet15);
        org.springframework.samples.petclinic.owner.Owner owner19 = pet15.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate22 = pet21.getBirthDate();
        String str23 = pet21.getName();
        owner20.addPet(pet21);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet21.addVisit(visit25);
        String str28 = visit25.getDescription();
        visit25.setPetId((Integer) (-1));
        pet15.addVisit(visit25);
        pet15.setName("hi!");
        owner0.addPet(pet15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        String str8 = owner0.getLastName();
        owner0.setFirstName("");
        owner0.setCity("hi!");
        owner0.setCity("");
        String str15 = owner0.getAddress();
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        String str8 = owner0.getLastName();
        owner0.setFirstName("");
        owner0.setCity("hi!");
        owner0.setCity("");
        String str15 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        Integer int2 = visit0.getPetId();
        boolean boolean3 = visit0.isNew();
        java.time.LocalDate localDate4 = visit0.getDate();
        visit0.setId((Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = pet2.getType();
        java.time.LocalDate localDate5 = pet2.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner6 = pet2.getOwner();
        String str7 = pet2.toString();
        pet2.setName("hi!");
        owner0.addPet(pet2);
        String str11 = pet2.getName();
        org.springframework.samples.petclinic.owner.PetType petType12 = pet2.getType();
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        java.time.LocalDate localDate15 = null;
        visit13.setDate(localDate15);
        java.time.LocalDate localDate17 = null;
        visit13.setDate(localDate17);
        visit13.setPetId((Integer) 0);
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        String str22 = pet21.toString();
        org.springframework.samples.petclinic.owner.PetType petType23 = pet21.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository24 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter25 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter25.print(petType26, locale27);
        org.springframework.samples.petclinic.owner.PetType petType29 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale30 = null;
        String str31 = petTypeFormatter25.print(petType29, locale30);
        pet21.setType(petType29);
        pet21.setName("");
        org.springframework.samples.petclinic.visit.Visit visit35 = new org.springframework.samples.petclinic.visit.Visit();
        visit35.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit38 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int39 = visit38.getPetId();
        java.time.LocalDate localDate40 = null;
        visit38.setDate(localDate40);
        java.time.LocalDate localDate42 = null;
        visit38.setDate(localDate42);
        org.springframework.samples.petclinic.owner.Owner owner44 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet45 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate46 = pet45.getBirthDate();
        String str47 = pet45.getName();
        owner44.addPet(pet45);
        org.springframework.samples.petclinic.visit.Visit visit49 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int50 = visit49.getPetId();
        pet45.addVisit(visit49);
        java.time.LocalDate localDate52 = visit49.getDate();
        visit38.setDate(localDate52);
        visit35.setDate(localDate52);
        pet21.setBirthDate(localDate52);
        visit13.setDate(localDate52);
        pet2.setBirthDate(localDate52);
        org.springframework.samples.petclinic.owner.Owner owner58 = pet2.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner58);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        java.time.LocalDate localDate6 = null;
        visit4.setDate(localDate6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        java.time.LocalDate localDate10 = null;
        visit8.setDate(localDate10);
        java.time.LocalDate localDate12 = null;
        visit8.setDate(localDate12);
        visit8.setDescription("");
        visit8.setPetId((Integer) (-1));
        visit8.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate22 = pet21.getBirthDate();
        String str23 = pet21.getName();
        owner20.addPet(pet21);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet21.addVisit(visit25);
        java.time.LocalDate localDate28 = visit25.getDate();
        visit8.setDate(localDate28);
        visit4.setDate(localDate28);
        visit4.setDescription("");
        pet0.addVisit(visit4);
        org.springframework.samples.petclinic.owner.Owner owner34 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet35 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate36 = pet35.getBirthDate();
        String str37 = pet35.getName();
        owner34.addPet(pet35);
        org.springframework.samples.petclinic.visit.Visit visit39 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int40 = visit39.getPetId();
        pet35.addVisit(visit39);
        visit39.setDescription("");
        java.time.LocalDate localDate44 = visit39.getDate();
        visit4.setDate(localDate44);
        visit4.setDescription("");
        Integer int48 = visit4.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner49 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet50 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate51 = pet50.getBirthDate();
        String str52 = pet50.getName();
        owner49.addPet(pet50);
        org.springframework.samples.petclinic.visit.Visit visit54 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int55 = visit54.getPetId();
        pet50.addVisit(visit54);
        Integer int57 = visit54.getPetId();
        String str58 = visit54.getDescription();
        java.time.LocalDate localDate59 = visit54.getDate();
        String str60 = visit54.getDescription();
        java.time.LocalDate localDate61 = visit54.getDate();
        visit4.setDate(localDate61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate61);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        String str1 = vet0.getFirstName();
        int int2 = vet0.getNrOfSpecialties();
        int int3 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 10);
        vet0.setId((Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate1 = pet0.getBirthDate();
        String str2 = pet0.getName();
        org.springframework.samples.petclinic.owner.PetType petType3 = pet0.getType();
        String str4 = pet0.getName();
        java.time.LocalDate localDate5 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.PetType petType6 = pet0.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType6);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        owner0.setFirstName("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        org.springframework.samples.petclinic.owner.PetType petType8 = null;
        pet6.setType(petType8);
        String str10 = pet6.getName();
        java.time.LocalDate localDate11 = pet6.getBirthDate();
        pet6.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType14 = pet6.getType();
        String str15 = pet6.toString();
        String str16 = pet6.getName();
        owner0.addPet(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        pet12.setName("hi!");
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        pet12.setName("hi!");
        boolean boolean21 = pet12.isNew();
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        java.time.LocalDate localDate24 = null;
        visit22.setDate(localDate24);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        java.time.LocalDate localDate28 = null;
        visit26.setDate(localDate28);
        java.time.LocalDate localDate30 = null;
        visit26.setDate(localDate30);
        visit26.setDescription("");
        visit26.setPetId((Integer) (-1));
        visit26.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner38 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate40 = pet39.getBirthDate();
        String str41 = pet39.getName();
        owner38.addPet(pet39);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        pet39.addVisit(visit43);
        java.time.LocalDate localDate46 = visit43.getDate();
        visit26.setDate(localDate46);
        visit22.setDate(localDate46);
        pet12.setBirthDate(localDate46);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner51 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet52 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate53 = pet52.getBirthDate();
        String str54 = pet52.getName();
        owner51.addPet(pet52);
        org.springframework.samples.petclinic.visit.Visit visit56 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int57 = visit56.getPetId();
        pet52.addVisit(visit56);
        java.time.LocalDate localDate59 = visit56.getDate();
        visit50.setDate(localDate59);
        pet12.setBirthDate(localDate59);
        pet12.setName("");
        String str64 = pet12.toString();
        java.time.LocalDate localDate65 = pet12.getBirthDate();
        String str66 = pet12.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "" + "'", str64.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "" + "'", str66.equals(""));
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        String str4 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        String str7 = vet0.getLastName();
        int int8 = vet0.getNrOfSpecialties();
        vet0.setLastName("");
        org.springframework.samples.petclinic.vet.Specialty specialty11 = null;
        vet0.addSpecialty(specialty11);
        int int13 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        vet0.setFirstName("hi!");
        int int7 = vet0.getNrOfSpecialties();
        int int8 = vet0.getNrOfSpecialties();
        String str9 = vet0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("");
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        java.time.LocalDate localDate5 = null;
        pet3.setBirthDate(localDate5);
        String str7 = pet3.getName();
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        Integer int16 = visit13.getPetId();
        String str17 = visit13.getDescription();
        java.time.LocalDate localDate18 = visit13.getDate();
        pet3.addVisit(visit13);
        owner0.addPet(pet3);
        String str21 = owner0.getCity();
        owner0.setCity("hi!");
        owner0.setAddress("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = pet1.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        java.time.LocalDate localDate11 = null;
        visit9.setDate(localDate11);
        java.time.LocalDate localDate13 = null;
        visit9.setDate(localDate13);
        pet1.addVisit(visit9);
        String str16 = pet1.toString();
        org.springframework.samples.petclinic.owner.Owner owner17 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate19 = pet18.getBirthDate();
        String str20 = pet18.getName();
        owner17.addPet(pet18);
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        pet18.addVisit(visit22);
        Integer int25 = visit22.getPetId();
        Integer int26 = visit22.getPetId();
        boolean boolean27 = visit22.isNew();
        Integer int28 = visit22.getId();
        Integer int29 = visit22.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner30 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate32 = pet31.getBirthDate();
        String str33 = pet31.getName();
        owner30.addPet(pet31);
        org.springframework.samples.petclinic.visit.Visit visit35 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int36 = visit35.getPetId();
        pet31.addVisit(visit35);
        Integer int38 = visit35.getPetId();
        String str39 = visit35.getDescription();
        Integer int40 = visit35.getPetId();
        java.time.LocalDate localDate41 = visit35.getDate();
        visit22.setDate(localDate41);
        visit22.setPetId((Integer) 10);
        pet1.addVisit(visit22);
        org.springframework.samples.petclinic.owner.Owner owner46 = pet1.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner46);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        pet0.setName("");
        pet0.setName("");
        java.time.LocalDate localDate12 = pet0.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        java.time.LocalDate localDate15 = null;
        visit13.setDate(localDate15);
        java.time.LocalDate localDate17 = null;
        visit13.setDate(localDate17);
        visit13.setDescription("");
        String str21 = visit13.getDescription();
        Integer int22 = visit13.getId();
        pet0.addVisit(visit13);
        Integer int24 = visit13.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "" + "'", str21.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        visit0.setPetId((Integer) 1);
        boolean boolean10 = visit0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        java.time.LocalDate localDate10 = visit5.getDate();
        String str11 = visit5.getDescription();
        java.time.LocalDate localDate12 = visit5.getDate();
        java.time.LocalDate localDate13 = visit5.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        java.time.LocalDate localDate10 = visit5.getDate();
        String str11 = visit5.getDescription();
        java.time.LocalDate localDate12 = visit5.getDate();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        String str14 = pet13.toString();
        java.time.LocalDate localDate15 = null;
        pet13.setBirthDate(localDate15);
        pet13.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType19 = null;
        pet13.setType(petType19);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet13.addVisit(visit21);
        visit21.setDescription("");
        org.springframework.samples.petclinic.owner.Owner owner26 = new org.springframework.samples.petclinic.owner.Owner();
        owner26.setLastName("");
        Integer int29 = owner26.getId();
        owner26.setAddress("");
        owner26.setTelephone("");
        String str34 = owner26.getFirstName();
        owner26.setLastName("hi!");
        String str37 = owner26.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet38 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate39 = pet38.getBirthDate();
        pet38.setName("hi!");
        pet38.setId((Integer) 1);
        owner26.addPet(pet38);
        pet38.setName("hi!");
        boolean boolean47 = pet38.isNew();
        org.springframework.samples.petclinic.visit.Visit visit48 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int49 = visit48.getPetId();
        java.time.LocalDate localDate50 = null;
        visit48.setDate(localDate50);
        org.springframework.samples.petclinic.visit.Visit visit52 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int53 = visit52.getPetId();
        java.time.LocalDate localDate54 = null;
        visit52.setDate(localDate54);
        java.time.LocalDate localDate56 = null;
        visit52.setDate(localDate56);
        visit52.setDescription("");
        visit52.setPetId((Integer) (-1));
        visit52.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner64 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet65 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate66 = pet65.getBirthDate();
        String str67 = pet65.getName();
        owner64.addPet(pet65);
        org.springframework.samples.petclinic.visit.Visit visit69 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int70 = visit69.getPetId();
        pet65.addVisit(visit69);
        java.time.LocalDate localDate72 = visit69.getDate();
        visit52.setDate(localDate72);
        visit48.setDate(localDate72);
        pet38.setBirthDate(localDate72);
        org.springframework.samples.petclinic.visit.Visit visit76 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner77 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet78 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate79 = pet78.getBirthDate();
        String str80 = pet78.getName();
        owner77.addPet(pet78);
        org.springframework.samples.petclinic.visit.Visit visit82 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int83 = visit82.getPetId();
        pet78.addVisit(visit82);
        java.time.LocalDate localDate85 = visit82.getDate();
        visit76.setDate(localDate85);
        pet38.setBirthDate(localDate85);
        visit21.setDate(localDate85);
        visit5.setDate(localDate85);
        java.time.LocalDate localDate90 = visit5.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "" + "'", str37.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate90);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        String str3 = vet0.getLastName();
        int int4 = vet0.getNrOfSpecialties();
        int int5 = vet0.getNrOfSpecialties();
        vet0.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        String str11 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        java.time.LocalDate localDate14 = null;
        pet12.setBirthDate(localDate14);
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet21 = owner0.getPet("hi!", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType12, locale13);
        java.util.Locale locale16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType17 = petTypeFormatter1.parse("", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        String str5 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        pet0.setId((Integer) 10);
        String str7 = pet0.toString();
        String str8 = pet0.toString();
        pet0.setId((Integer) 100);
        org.springframework.samples.petclinic.owner.PetType petType11 = pet0.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType11);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        owner0.setAddress("");
        String str9 = owner0.getFirstName();
        owner0.setId((Integer) 100);
        String str12 = owner0.getFirstName();
        String str13 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        java.time.LocalDate localDate10 = visit5.getDate();
        String str11 = visit5.getDescription();
        java.time.LocalDate localDate12 = visit5.getDate();
        boolean boolean13 = visit5.isNew();
        org.springframework.samples.petclinic.owner.Owner owner14 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate16 = pet15.getBirthDate();
        String str17 = pet15.getName();
        owner14.addPet(pet15);
        org.springframework.samples.petclinic.visit.Visit visit19 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int20 = visit19.getPetId();
        pet15.addVisit(visit19);
        Integer int22 = visit19.getPetId();
        Integer int23 = visit19.getPetId();
        boolean boolean24 = visit19.isNew();
        Integer int25 = visit19.getId();
        java.time.LocalDate localDate26 = visit19.getDate();
        visit19.setPetId((Integer) 1);
        visit19.setPetId((Integer) (-1));
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        String str32 = pet31.toString();
        java.time.LocalDate localDate33 = null;
        pet31.setBirthDate(localDate33);
        pet31.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType37 = null;
        pet31.setType(petType37);
        org.springframework.samples.petclinic.owner.Owner owner39 = pet31.getOwner();
        String str40 = pet31.toString();
        org.springframework.samples.petclinic.owner.Owner owner41 = pet31.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType42 = pet31.getType();
        org.springframework.samples.petclinic.owner.PetType petType43 = pet31.getType();
        org.springframework.samples.petclinic.visit.Visit visit44 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int45 = visit44.getPetId();
        java.time.LocalDate localDate46 = null;
        visit44.setDate(localDate46);
        java.time.LocalDate localDate48 = null;
        visit44.setDate(localDate48);
        org.springframework.samples.petclinic.owner.Owner owner50 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet51 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate52 = pet51.getBirthDate();
        String str53 = pet51.getName();
        owner50.addPet(pet51);
        org.springframework.samples.petclinic.visit.Visit visit55 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int56 = visit55.getPetId();
        pet51.addVisit(visit55);
        java.time.LocalDate localDate58 = visit55.getDate();
        visit44.setDate(localDate58);
        pet31.setBirthDate(localDate58);
        visit19.setDate(localDate58);
        visit5.setDate(localDate58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate58);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        String str9 = owner0.getTelephone();
        owner0.setTelephone("");
        String str12 = owner0.getCity();
        owner0.setTelephone("");
        boolean boolean15 = owner0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        String str8 = pet7.toString();
        java.time.LocalDate localDate9 = null;
        pet7.setBirthDate(localDate9);
        String str11 = pet7.getName();
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        Integer int20 = visit17.getPetId();
        String str21 = visit17.getDescription();
        java.time.LocalDate localDate22 = visit17.getDate();
        pet7.addVisit(visit17);
        java.time.LocalDate localDate24 = pet7.getBirthDate();
        Integer int25 = pet7.getId();
        String str26 = pet7.getName();
        org.springframework.samples.petclinic.owner.PetType petType27 = pet7.getType();
        owner0.addPet(pet7);
        String str29 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        String str7 = owner0.getTelephone();
        String str8 = owner0.getFirstName();
        String str9 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.visit.Visit visit1 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int2 = visit1.getPetId();
        java.time.LocalDate localDate3 = null;
        visit1.setDate(localDate3);
        java.time.LocalDate localDate5 = null;
        visit1.setDate(localDate5);
        visit1.setDescription("");
        visit1.setPetId((Integer) (-1));
        String str11 = visit1.getDescription();
        boolean boolean12 = visit1.isNew();
        boolean boolean13 = visit1.isNew();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        org.springframework.samples.petclinic.owner.PetType petType16 = pet14.getType();
        java.time.LocalDate localDate17 = pet14.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner18 = pet14.getOwner();
        String str19 = pet14.toString();
        pet14.setId((Integer) 100);
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        String str23 = visit22.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner24 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate26 = pet25.getBirthDate();
        String str27 = pet25.getName();
        owner24.addPet(pet25);
        org.springframework.samples.petclinic.visit.Visit visit29 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int30 = visit29.getPetId();
        pet25.addVisit(visit29);
        Integer int32 = visit29.getPetId();
        Integer int33 = visit29.getPetId();
        boolean boolean34 = visit29.isNew();
        Integer int35 = visit29.getId();
        java.time.LocalDate localDate36 = visit29.getDate();
        visit22.setDate(localDate36);
        pet14.setBirthDate(localDate36);
        visit1.setDate(localDate36);
        org.springframework.validation.Errors errors40 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) visit1, errors40);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.visit.Visit cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.visit.Visit and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        org.springframework.samples.petclinic.vet.Specialty specialty4 = null;
        vet0.addSpecialty(specialty4);
        String str6 = vet0.getLastName();
        int int7 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.Owner owner3 = pet0.getOwner();
        pet0.setName("");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        java.time.LocalDate localDate14 = pet7.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        java.time.LocalDate localDate17 = null;
        visit15.setDate(localDate17);
        java.time.LocalDate localDate19 = null;
        visit15.setDate(localDate19);
        pet7.addVisit(visit15);
        pet0.addVisit(visit15);
        String str23 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType24 = pet0.getType();
        String str25 = pet0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "" + "'", str25.equals(""));
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        owner0.setTelephone("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("", false);
        org.springframework.samples.petclinic.owner.Owner owner7 = new org.springframework.samples.petclinic.owner.Owner();
        String str8 = owner7.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        String str13 = pet9.toString();
        owner7.addPet(pet9);
        owner7.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        String str18 = pet17.toString();
        boolean boolean19 = pet17.isNew();
        owner7.addPet(pet17);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet17.addVisit(visit21);
        owner0.addPet(pet17);
        String str25 = owner0.getCity();
        owner0.setLastName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType5 = pet0.getType();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        java.time.LocalDate localDate9 = null;
        visit7.setDate(localDate9);
        java.time.LocalDate localDate11 = null;
        visit7.setDate(localDate11);
        Integer int13 = visit7.getPetId();
        pet0.addVisit(visit7);
        visit7.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        String str14 = visit11.getDescription();
        visit11.setPetId((Integer) (-1));
        pet1.addVisit(visit11);
        Integer int18 = visit11.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        String str9 = owner0.getLastName();
        owner0.setCity("");
        owner0.setTelephone("hi!");
        owner0.setId((Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        boolean boolean2 = pet0.isNew();
        String str3 = pet0.getName();
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        visit4.setDescription("");
        visit4.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner10 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate12 = pet11.getBirthDate();
        String str13 = pet11.getName();
        owner10.addPet(pet11);
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        pet11.addVisit(visit15);
        Integer int18 = visit15.getPetId();
        Integer int19 = visit15.getPetId();
        boolean boolean20 = visit15.isNew();
        Integer int21 = visit15.getId();
        java.time.LocalDate localDate22 = visit15.getDate();
        visit4.setDate(localDate22);
        pet0.setBirthDate(localDate22);
        String str25 = pet0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.getName();
        java.time.LocalDate localDate5 = pet0.getBirthDate();
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType8 = pet0.getType();
        org.springframework.samples.petclinic.owner.Owner owner9 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner10 = new org.springframework.samples.petclinic.owner.Owner();
        String str11 = owner10.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType14 = pet12.getType();
        java.time.LocalDate localDate15 = pet12.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner16 = pet12.getOwner();
        String str17 = pet12.toString();
        pet12.setName("hi!");
        owner10.addPet(pet12);
        String str21 = pet12.getName();
        org.springframework.samples.petclinic.owner.PetType petType22 = pet12.getType();
        org.springframework.samples.petclinic.visit.Visit visit23 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int24 = visit23.getPetId();
        java.time.LocalDate localDate25 = null;
        visit23.setDate(localDate25);
        java.time.LocalDate localDate27 = null;
        visit23.setDate(localDate27);
        visit23.setPetId((Integer) 0);
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        String str32 = pet31.toString();
        org.springframework.samples.petclinic.owner.PetType petType33 = pet31.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository34 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter35 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository34);
        org.springframework.samples.petclinic.owner.PetType petType36 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter35.print(petType36, locale37);
        org.springframework.samples.petclinic.owner.PetType petType39 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale40 = null;
        String str41 = petTypeFormatter35.print(petType39, locale40);
        pet31.setType(petType39);
        pet31.setName("");
        org.springframework.samples.petclinic.visit.Visit visit45 = new org.springframework.samples.petclinic.visit.Visit();
        visit45.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit48 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int49 = visit48.getPetId();
        java.time.LocalDate localDate50 = null;
        visit48.setDate(localDate50);
        java.time.LocalDate localDate52 = null;
        visit48.setDate(localDate52);
        org.springframework.samples.petclinic.owner.Owner owner54 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet55 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate56 = pet55.getBirthDate();
        String str57 = pet55.getName();
        owner54.addPet(pet55);
        org.springframework.samples.petclinic.visit.Visit visit59 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int60 = visit59.getPetId();
        pet55.addVisit(visit59);
        java.time.LocalDate localDate62 = visit59.getDate();
        visit48.setDate(localDate62);
        visit45.setDate(localDate62);
        pet31.setBirthDate(localDate62);
        visit23.setDate(localDate62);
        pet12.setBirthDate(localDate62);
        pet0.setBirthDate(localDate62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "hi!" + "'", str21.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate62);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        java.time.LocalDate localDate5 = pet1.getBirthDate();
        java.time.LocalDate localDate6 = null;
        pet1.setBirthDate(localDate6);
        String str8 = pet1.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        String str8 = visit0.getDescription();
        visit0.setDescription("");
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        String str12 = visit11.getDescription();
        String str13 = visit11.getDescription();
        java.time.LocalDate localDate14 = visit11.getDate();
        String str15 = visit11.getDescription();
        java.time.LocalDate localDate16 = visit11.getDate();
        visit0.setDate(localDate16);
        Class<?> wildcardClass18 = localDate16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = visit5.getDate();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = pet9.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository12 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter13 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter13.print(petType14, locale15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter13.print(petType17, locale18);
        pet9.setType(petType17);
        org.springframework.samples.petclinic.owner.Owner owner21 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate23 = pet22.getBirthDate();
        String str24 = pet22.getName();
        owner21.addPet(pet22);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        pet22.addVisit(visit26);
        java.time.LocalDate localDate29 = visit26.getDate();
        pet9.setBirthDate(localDate29);
        visit5.setDate(localDate29);
        Integer int32 = visit5.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner33 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet34 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate35 = pet34.getBirthDate();
        String str36 = pet34.getName();
        owner33.addPet(pet34);
        org.springframework.samples.petclinic.visit.Visit visit38 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int39 = visit38.getPetId();
        pet34.addVisit(visit38);
        Integer int41 = visit38.getPetId();
        Integer int42 = visit38.getPetId();
        boolean boolean43 = visit38.isNew();
        Integer int44 = visit38.getId();
        java.time.LocalDate localDate45 = visit38.getDate();
        visit38.setPetId((Integer) 1);
        visit38.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int51 = visit50.getPetId();
        java.time.LocalDate localDate52 = null;
        visit50.setDate(localDate52);
        java.time.LocalDate localDate54 = null;
        visit50.setDate(localDate54);
        visit50.setDescription("");
        visit50.setPetId((Integer) (-1));
        visit50.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner62 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet63 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate64 = pet63.getBirthDate();
        String str65 = pet63.getName();
        owner62.addPet(pet63);
        org.springframework.samples.petclinic.visit.Visit visit67 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int68 = visit67.getPetId();
        pet63.addVisit(visit67);
        java.time.LocalDate localDate70 = visit67.getDate();
        visit50.setDate(localDate70);
        java.time.LocalDate localDate72 = visit50.getDate();
        visit38.setDate(localDate72);
        visit5.setDate(localDate72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate72);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet5 = owner0.getPet("hi!");
        String str6 = owner0.getTelephone();
        boolean boolean7 = owner0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        String str11 = owner0.getAddress();
        String str12 = owner0.getCity();
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setId((Integer) 100);
        Integer int8 = pet0.getId();
        pet0.setId((Integer) 10);
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        String str12 = pet11.toString();
        org.springframework.samples.petclinic.owner.PetType petType13 = pet11.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter15.print(petType16, locale17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter15.print(petType19, locale20);
        pet11.setType(petType19);
        pet0.setType(petType19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8.equals(100));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        java.time.LocalDate localDate8 = visit0.getDate();
        Integer int9 = visit0.getPetId();
        Integer int10 = visit0.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        java.time.LocalDate localDate12 = null;
        pet10.setBirthDate(localDate12);
        java.time.LocalDate localDate14 = pet10.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner15 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet16 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate17 = pet16.getBirthDate();
        String str18 = pet16.getName();
        owner15.addPet(pet16);
        org.springframework.samples.petclinic.visit.Visit visit20 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int21 = visit20.getPetId();
        pet16.addVisit(visit20);
        visit20.setDescription("");
        pet10.addVisit(visit20);
        visit20.setPetId((Integer) 10);
        java.time.LocalDate localDate28 = visit20.getDate();
        visit5.setDate(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        String str9 = owner0.getTelephone();
        owner0.setTelephone("");
        String str12 = owner0.getCity();
        owner0.setTelephone("");
        String str15 = owner0.getTelephone();
        owner0.setFirstName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        int int3 = vet0.getNrOfSpecialties();
        String str4 = vet0.getLastName();
        vet0.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetRepository petRepository2 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter3 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository2);
        org.springframework.samples.petclinic.owner.PetType petType4 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale5 = null;
        String str6 = petTypeFormatter3.print(petType4, locale5);
        org.springframework.samples.petclinic.owner.PetRepository petRepository7 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter8 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter8.print(petType9, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter8.print(petType12, locale13);
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter3.print(petType12, locale15);
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter1.print(petType12, locale17);
        java.util.Locale locale20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType21 = petTypeFormatter1.parse("hi!", locale20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        pet0.addVisit(visit8);
        visit8.setDescription("");
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        owner13.setLastName("");
        Integer int16 = owner13.getId();
        owner13.setAddress("");
        owner13.setTelephone("");
        String str21 = owner13.getFirstName();
        owner13.setLastName("hi!");
        String str24 = owner13.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate26 = pet25.getBirthDate();
        pet25.setName("hi!");
        pet25.setId((Integer) 1);
        owner13.addPet(pet25);
        pet25.setName("hi!");
        boolean boolean34 = pet25.isNew();
        org.springframework.samples.petclinic.visit.Visit visit35 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int36 = visit35.getPetId();
        java.time.LocalDate localDate37 = null;
        visit35.setDate(localDate37);
        org.springframework.samples.petclinic.visit.Visit visit39 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int40 = visit39.getPetId();
        java.time.LocalDate localDate41 = null;
        visit39.setDate(localDate41);
        java.time.LocalDate localDate43 = null;
        visit39.setDate(localDate43);
        visit39.setDescription("");
        visit39.setPetId((Integer) (-1));
        visit39.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner51 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet52 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate53 = pet52.getBirthDate();
        String str54 = pet52.getName();
        owner51.addPet(pet52);
        org.springframework.samples.petclinic.visit.Visit visit56 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int57 = visit56.getPetId();
        pet52.addVisit(visit56);
        java.time.LocalDate localDate59 = visit56.getDate();
        visit39.setDate(localDate59);
        visit35.setDate(localDate59);
        pet25.setBirthDate(localDate59);
        org.springframework.samples.petclinic.visit.Visit visit63 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner64 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet65 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate66 = pet65.getBirthDate();
        String str67 = pet65.getName();
        owner64.addPet(pet65);
        org.springframework.samples.petclinic.visit.Visit visit69 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int70 = visit69.getPetId();
        pet65.addVisit(visit69);
        java.time.LocalDate localDate72 = visit69.getDate();
        visit63.setDate(localDate72);
        pet25.setBirthDate(localDate72);
        visit8.setDate(localDate72);
        org.springframework.samples.petclinic.visit.Visit visit76 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int77 = visit76.getPetId();
        visit76.setDescription("");
        visit76.setDescription("hi!");
        java.time.LocalDate localDate82 = visit76.getDate();
        visit8.setDate(localDate82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate82);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        int int3 = vet0.getNrOfSpecialties();
        int int4 = vet0.getNrOfSpecialties();
        int int5 = vet0.getNrOfSpecialties();
        Integer int6 = vet0.getId();
        int int7 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        owner5.setCity("hi!");
        owner5.setTelephone("hi!");
        String str16 = owner5.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!" + "'", str16.equals("hi!"));
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        java.time.LocalDate localDate6 = null;
        visit4.setDate(localDate6);
        java.time.LocalDate localDate8 = null;
        visit4.setDate(localDate8);
        visit4.setDescription("");
        visit4.setPetId((Integer) (-1));
        visit4.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner16 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate18 = pet17.getBirthDate();
        String str19 = pet17.getName();
        owner16.addPet(pet17);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet17.addVisit(visit21);
        java.time.LocalDate localDate24 = visit21.getDate();
        visit4.setDate(localDate24);
        visit0.setDate(localDate24);
        visit0.setDescription("");
        String str29 = visit0.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        String str11 = owner0.getAddress();
        String str12 = owner0.getCity();
        boolean boolean13 = owner0.isNew();
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("hi!", true);
        owner0.setTelephone("");
        String str10 = owner0.getCity();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        String str12 = pet11.toString();
        org.springframework.samples.petclinic.owner.PetType petType13 = null;
        pet11.setType(petType13);
        String str15 = pet11.getName();
        boolean boolean16 = pet11.isNew();
        String str17 = pet11.getName();
        owner0.addPet(pet11);
        String str19 = owner0.getAddress();
        owner0.setCity("");
        String str22 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "hi!" + "'", str19.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType12, locale13);
        org.springframework.samples.petclinic.owner.PetRepository petRepository15 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter16 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter16.print(petType17, locale18);
        org.springframework.samples.petclinic.owner.PetRepository petRepository20 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter21 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository20);
        org.springframework.samples.petclinic.owner.PetType petType22 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter21.print(petType22, locale23);
        org.springframework.samples.petclinic.owner.PetType petType25 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale26 = null;
        String str27 = petTypeFormatter21.print(petType25, locale26);
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter16.print(petType25, locale28);
        String str30 = petType25.toString();
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter1.print(petType25, locale31);
        org.springframework.samples.petclinic.owner.Pet pet33 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate34 = pet33.getBirthDate();
        pet33.setName("hi!");
        pet33.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository39 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter40 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository39);
        org.springframework.samples.petclinic.owner.PetRepository petRepository41 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter42 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository41);
        org.springframework.samples.petclinic.owner.PetType petType43 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale44 = null;
        String str45 = petTypeFormatter42.print(petType43, locale44);
        org.springframework.samples.petclinic.owner.PetRepository petRepository46 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter47 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository46);
        org.springframework.samples.petclinic.owner.PetType petType48 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale49 = null;
        String str50 = petTypeFormatter47.print(petType48, locale49);
        org.springframework.samples.petclinic.owner.PetType petType51 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale52 = null;
        String str53 = petTypeFormatter47.print(petType51, locale52);
        java.util.Locale locale54 = null;
        String str55 = petTypeFormatter42.print(petType51, locale54);
        java.util.Locale locale56 = null;
        String str57 = petTypeFormatter40.print(petType51, locale56);
        pet33.setType(petType51);
        java.util.Locale locale59 = null;
        String str60 = petTypeFormatter1.print(petType51, locale59);
        java.util.Locale locale62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType63 = petTypeFormatter1.parse("hi!", locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.Owner owner3 = pet0.getOwner();
        pet0.setName("");
        org.springframework.samples.petclinic.owner.Owner owner6 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner6);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        vet0.setLastName("");
        vet0.setLastName("hi!");
        org.springframework.samples.petclinic.vet.Specialty specialty7 = null;
        vet0.addSpecialty(specialty7);
        int int9 = vet0.getNrOfSpecialties();
        String str10 = vet0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType12, locale13);
        org.springframework.samples.petclinic.owner.PetRepository petRepository15 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter16 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter16.print(petType17, locale18);
        org.springframework.samples.petclinic.owner.PetRepository petRepository20 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter21 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository20);
        org.springframework.samples.petclinic.owner.PetType petType22 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter21.print(petType22, locale23);
        org.springframework.samples.petclinic.owner.PetType petType25 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale26 = null;
        String str27 = petTypeFormatter21.print(petType25, locale26);
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter16.print(petType25, locale28);
        String str30 = petType25.toString();
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter1.print(petType25, locale31);
        petType25.setName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        boolean boolean4 = pet0.isNew();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        visit10.setDescription("");
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        visit10.setPetId((Integer) 1);
        visit10.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        String str8 = owner0.getLastName();
        owner0.setFirstName("");
        String str11 = owner0.getFirstName();
        String str12 = owner0.getLastName();
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        org.springframework.samples.petclinic.owner.Pet pet4 = new org.springframework.samples.petclinic.owner.Pet();
        String str5 = pet4.toString();
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet4.setType(petType6);
        boolean boolean8 = pet4.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository9 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter10 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter10.print(petType11, locale12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter10.print(petType14, locale15);
        pet4.setType(petType14);
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        String str19 = pet18.toString();
        java.time.LocalDate localDate20 = null;
        pet18.setBirthDate(localDate20);
        org.springframework.samples.petclinic.owner.Owner owner22 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate24 = pet23.getBirthDate();
        String str25 = pet23.getName();
        owner22.addPet(pet23);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int28 = visit27.getPetId();
        pet23.addVisit(visit27);
        Integer int30 = visit27.getPetId();
        Integer int31 = visit27.getPetId();
        boolean boolean32 = visit27.isNew();
        Integer int33 = visit27.getId();
        String str34 = visit27.getDescription();
        pet18.addVisit(visit27);
        pet4.addVisit(visit27);
        owner0.addPet(pet4);
        String str38 = owner0.getAddress();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet40 = owner0.getPet("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        visit0.setDescription("hi!");
        visit0.setPetId((Integer) (-1));
        String str5 = visit0.getDescription();
        Integer int6 = visit0.getPetId();
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        java.time.LocalDate localDate9 = null;
        visit7.setDate(localDate9);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        java.time.LocalDate localDate13 = null;
        visit11.setDate(localDate13);
        java.time.LocalDate localDate15 = null;
        visit11.setDate(localDate15);
        visit11.setDescription("");
        visit11.setPetId((Integer) (-1));
        visit11.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner23 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet24 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate25 = pet24.getBirthDate();
        String str26 = pet24.getName();
        owner23.addPet(pet24);
        org.springframework.samples.petclinic.visit.Visit visit28 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int29 = visit28.getPetId();
        pet24.addVisit(visit28);
        java.time.LocalDate localDate31 = visit28.getDate();
        visit11.setDate(localDate31);
        visit7.setDate(localDate31);
        visit0.setDate(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6.equals((-1)));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        boolean boolean5 = owner0.isNew();
        String str6 = owner0.getFirstName();
        String str7 = owner0.getLastName();
        owner0.setLastName("hi!");
        owner0.setTelephone("");
        String str12 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        Integer int12 = visit5.getPetId();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        pet13.setName("hi!");
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        java.time.LocalDate localDate19 = null;
        visit17.setDate(localDate19);
        java.time.LocalDate localDate21 = null;
        visit17.setDate(localDate21);
        visit17.setDescription("");
        visit17.setPetId((Integer) (-1));
        visit17.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner29 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate31 = pet30.getBirthDate();
        String str32 = pet30.getName();
        owner29.addPet(pet30);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        pet30.addVisit(visit34);
        java.time.LocalDate localDate37 = visit34.getDate();
        visit17.setDate(localDate37);
        pet13.setBirthDate(localDate37);
        visit5.setDate(localDate37);
        visit5.setPetId((Integer) 10);
        java.time.LocalDate localDate43 = visit5.getDate();
        org.springframework.samples.petclinic.owner.Pet pet44 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate45 = pet44.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner46 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet47 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate48 = pet47.getBirthDate();
        String str49 = pet47.getName();
        owner46.addPet(pet47);
        org.springframework.samples.petclinic.visit.Visit visit51 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int52 = visit51.getPetId();
        pet47.addVisit(visit51);
        visit51.setDescription("");
        java.time.LocalDate localDate56 = visit51.getDate();
        pet44.setBirthDate(localDate56);
        java.time.LocalDate localDate58 = pet44.getBirthDate();
        visit5.setDate(localDate58);
        visit5.setDescription("");
        Class<?> wildcardClass62 = visit5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        org.springframework.samples.petclinic.owner.Pet pet11 = owner0.getPet("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet11);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType5 = pet0.getType();
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        java.time.LocalDate localDate8 = null;
        visit6.setDate(localDate8);
        java.time.LocalDate localDate10 = null;
        visit6.setDate(localDate10);
        visit6.setPetId((Integer) (-1));
        visit6.setDescription("hi!");
        pet0.addVisit(visit6);
        Integer int17 = visit6.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = visit5.getDate();
        visit5.setPetId((Integer) 1);
        Integer int11 = visit5.getPetId();
        visit5.setPetId((Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11.equals(1));
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        pet12.setName("hi!");
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        org.springframework.samples.petclinic.owner.Owner owner19 = pet12.getOwner();
        pet12.setName("");
        String str22 = pet12.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "" + "'", str22.equals(""));
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = visit5.getDate();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = pet9.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository12 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter13 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter13.print(petType14, locale15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter13.print(petType17, locale18);
        pet9.setType(petType17);
        org.springframework.samples.petclinic.owner.Owner owner21 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate23 = pet22.getBirthDate();
        String str24 = pet22.getName();
        owner21.addPet(pet22);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        pet22.addVisit(visit26);
        java.time.LocalDate localDate29 = visit26.getDate();
        pet9.setBirthDate(localDate29);
        visit5.setDate(localDate29);
        visit5.setPetId((Integer) 0);
        Integer int34 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34.equals(0));
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        String str10 = petType7.getName();
        Integer int11 = petType7.getId();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter1.print(petType7, locale12);
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType16 = petTypeFormatter1.parse("hi!", locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        String str9 = visit5.getDescription();
        Integer int10 = visit5.getPetId();
        String str11 = visit5.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        java.time.LocalDate localDate7 = null;
        pet5.setBirthDate(localDate7);
        String str9 = pet5.getName();
        org.springframework.samples.petclinic.owner.Owner owner10 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate12 = pet11.getBirthDate();
        String str13 = pet11.getName();
        owner10.addPet(pet11);
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        pet11.addVisit(visit15);
        Integer int18 = visit15.getPetId();
        String str19 = visit15.getDescription();
        java.time.LocalDate localDate20 = visit15.getDate();
        pet5.addVisit(visit15);
        java.time.LocalDate localDate22 = pet5.getBirthDate();
        java.time.LocalDate localDate23 = pet5.getBirthDate();
        owner0.addPet(pet5);
        org.springframework.samples.petclinic.owner.Pet pet27 = owner0.getPet("hi!", true);
        org.springframework.samples.petclinic.owner.Pet pet30 = owner0.getPet("hi!", true);
        owner0.setLastName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet30);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        java.time.LocalDate localDate7 = null;
        pet5.setBirthDate(localDate7);
        String str9 = pet5.getName();
        org.springframework.samples.petclinic.owner.Owner owner10 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate12 = pet11.getBirthDate();
        String str13 = pet11.getName();
        owner10.addPet(pet11);
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        pet11.addVisit(visit15);
        Integer int18 = visit15.getPetId();
        String str19 = visit15.getDescription();
        java.time.LocalDate localDate20 = visit15.getDate();
        pet5.addVisit(visit15);
        java.time.LocalDate localDate22 = pet5.getBirthDate();
        java.time.LocalDate localDate23 = pet5.getBirthDate();
        owner0.addPet(pet5);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet27 = owner0.getPet("", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        Integer int2 = visit0.getPetId();
        visit0.setPetId((Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        owner0.setAddress("hi!");
        Class<?> wildcardClass7 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = pet2.getType();
        java.time.LocalDate localDate5 = pet2.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner6 = pet2.getOwner();
        String str7 = pet2.toString();
        pet2.setName("hi!");
        owner0.addPet(pet2);
        org.springframework.samples.petclinic.owner.Pet pet13 = owner0.getPet("hi!", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet13);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        visit5.setDescription("");
        String str11 = visit5.getDescription();
        visit5.setPetId((Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner2 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate4 = pet3.getBirthDate();
        String str5 = pet3.getName();
        owner2.addPet(pet3);
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        pet3.addVisit(visit7);
        Integer int10 = visit7.getPetId();
        Integer int11 = visit7.getPetId();
        boolean boolean12 = visit7.isNew();
        Integer int13 = visit7.getId();
        java.time.LocalDate localDate14 = visit7.getDate();
        visit0.setDate(localDate14);
        visit0.setDescription("hi!");
        visit0.setDescription("");
        visit0.setId((Integer) 0);
        java.time.LocalDate localDate22 = visit0.getDate();
        Class<?> wildcardClass23 = localDate22.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        pet12.setName("hi!");
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        pet12.setName("hi!");
        boolean boolean21 = pet12.isNew();
        org.springframework.samples.petclinic.owner.Owner owner22 = pet12.getOwner();
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        String str24 = pet23.toString();
        org.springframework.samples.petclinic.owner.PetType petType25 = pet23.getType();
        java.time.LocalDate localDate26 = pet23.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner27 = pet23.getOwner();
        String str28 = pet23.toString();
        pet23.setName("hi!");
        pet23.setName("");
        String str33 = pet23.toString();
        org.springframework.samples.petclinic.owner.Pet pet34 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate35 = pet34.getBirthDate();
        pet34.setName("hi!");
        pet34.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository40 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter41 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository40);
        org.springframework.samples.petclinic.owner.PetRepository petRepository42 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter43 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository42);
        org.springframework.samples.petclinic.owner.PetType petType44 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale45 = null;
        String str46 = petTypeFormatter43.print(petType44, locale45);
        org.springframework.samples.petclinic.owner.PetRepository petRepository47 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter48 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository47);
        org.springframework.samples.petclinic.owner.PetType petType49 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale50 = null;
        String str51 = petTypeFormatter48.print(petType49, locale50);
        org.springframework.samples.petclinic.owner.PetType petType52 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale53 = null;
        String str54 = petTypeFormatter48.print(petType52, locale53);
        java.util.Locale locale55 = null;
        String str56 = petTypeFormatter43.print(petType52, locale55);
        java.util.Locale locale57 = null;
        String str58 = petTypeFormatter41.print(petType52, locale57);
        pet34.setType(petType52);
        String str60 = petType52.toString();
        pet23.setType(petType52);
        pet12.setType(petType52);
        String str63 = petType52.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "" + "'", str33.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = pet1.getName();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        String str8 = pet7.toString();
        org.springframework.samples.petclinic.owner.PetType petType9 = pet7.getType();
        java.time.LocalDate localDate10 = pet7.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner11 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        String str14 = pet12.getName();
        owner11.addPet(pet12);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        pet12.addVisit(visit16);
        Integer int19 = visit16.getPetId();
        Integer int20 = visit16.getPetId();
        boolean boolean21 = visit16.isNew();
        Integer int22 = visit16.getId();
        java.time.LocalDate localDate23 = visit16.getDate();
        pet7.addVisit(visit16);
        pet1.addVisit(visit16);
        visit16.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        String str9 = owner0.getTelephone();
        owner0.setCity("");
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = pet1.getBirthDate();
        String str9 = pet1.toString();
        String str10 = pet1.getName();
        Integer int11 = pet1.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getCity();
        String str8 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setTelephone("hi!");
        String str16 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = visit0.getDate();
        boolean boolean5 = visit0.isNew();
        String str6 = visit0.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        pet0.setName("hi!");
        Class<?> wildcardClass10 = pet0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        owner1.setLastName("");
        Integer int4 = owner1.getId();
        owner1.setAddress("");
        owner1.setTelephone("");
        String str9 = owner1.getFirstName();
        owner1.setLastName("hi!");
        String str12 = owner1.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        pet13.setName("hi!");
        pet13.setId((Integer) 1);
        owner1.addPet(pet13);
        pet13.setName("hi!");
        boolean boolean22 = pet13.isNew();
        org.springframework.samples.petclinic.visit.Visit visit23 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int24 = visit23.getPetId();
        java.time.LocalDate localDate25 = null;
        visit23.setDate(localDate25);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int28 = visit27.getPetId();
        java.time.LocalDate localDate29 = null;
        visit27.setDate(localDate29);
        java.time.LocalDate localDate31 = null;
        visit27.setDate(localDate31);
        visit27.setDescription("");
        visit27.setPetId((Integer) (-1));
        visit27.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner39 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet40 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate41 = pet40.getBirthDate();
        String str42 = pet40.getName();
        owner39.addPet(pet40);
        org.springframework.samples.petclinic.visit.Visit visit44 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int45 = visit44.getPetId();
        pet40.addVisit(visit44);
        java.time.LocalDate localDate47 = visit44.getDate();
        visit27.setDate(localDate47);
        visit23.setDate(localDate47);
        pet13.setBirthDate(localDate47);
        org.springframework.validation.Errors errors51 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) localDate47, errors51);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.time.LocalDate cannot be cast to class org.springframework.samples.petclinic.owner.Pet (java.time.LocalDate is in module java.base of loader 'bootstrap'; org.springframework.samples.petclinic.owner.Pet is in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate47);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.PetRepository petRepository1 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter2 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository1);
        org.springframework.samples.petclinic.owner.PetType petType3 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale4 = null;
        String str5 = petTypeFormatter2.print(petType3, locale4);
        org.springframework.samples.petclinic.owner.PetRepository petRepository6 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter7 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter7.print(petType8, locale9);
        String str11 = petType8.getName();
        Integer int12 = petType8.getId();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter2.print(petType8, locale13);
        org.springframework.validation.Errors errors15 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) petType8, errors15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.owner.PetType cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.owner.PetType and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        String str3 = owner0.getTelephone();
        Integer int4 = owner0.getId();
        String str5 = owner0.getAddress();
        String str6 = owner0.getAddress();
        owner0.setFirstName("");
        String str9 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        String str11 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        owner0.setTelephone("hi!");
        owner0.setTelephone("hi!");
        String str6 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        org.springframework.samples.petclinic.owner.PetType petType12 = null;
        pet10.setType(petType12);
        boolean boolean14 = pet10.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository15 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter16 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter16.print(petType17, locale18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter16.print(petType20, locale21);
        pet10.setType(petType20);
        org.springframework.samples.petclinic.owner.Pet pet24 = new org.springframework.samples.petclinic.owner.Pet();
        String str25 = pet24.toString();
        java.time.LocalDate localDate26 = null;
        pet24.setBirthDate(localDate26);
        org.springframework.samples.petclinic.owner.Owner owner28 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet29 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate30 = pet29.getBirthDate();
        String str31 = pet29.getName();
        owner28.addPet(pet29);
        org.springframework.samples.petclinic.visit.Visit visit33 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int34 = visit33.getPetId();
        pet29.addVisit(visit33);
        Integer int36 = visit33.getPetId();
        Integer int37 = visit33.getPetId();
        boolean boolean38 = visit33.isNew();
        Integer int39 = visit33.getId();
        String str40 = visit33.getDescription();
        pet24.addVisit(visit33);
        pet10.addVisit(visit33);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        java.time.LocalDate localDate45 = null;
        visit43.setDate(localDate45);
        java.time.LocalDate localDate47 = null;
        visit43.setDate(localDate47);
        org.springframework.samples.petclinic.owner.Owner owner49 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet50 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate51 = pet50.getBirthDate();
        String str52 = pet50.getName();
        owner49.addPet(pet50);
        org.springframework.samples.petclinic.visit.Visit visit54 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int55 = visit54.getPetId();
        pet50.addVisit(visit54);
        java.time.LocalDate localDate57 = visit54.getDate();
        visit43.setDate(localDate57);
        visit43.setPetId((Integer) 1);
        pet10.addVisit(visit43);
        owner0.addPet(pet10);
        org.springframework.samples.petclinic.owner.Pet pet65 = owner0.getPet("hi!", true);
        String str66 = owner0.getAddress();
        String str67 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        java.time.LocalDate localDate5 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = pet1.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        java.time.LocalDate localDate11 = null;
        visit9.setDate(localDate11);
        java.time.LocalDate localDate13 = null;
        visit9.setDate(localDate13);
        pet1.addVisit(visit9);
        String str16 = pet1.toString();
        org.springframework.samples.petclinic.owner.Owner owner17 = pet1.getOwner();
        owner17.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner17);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setPetId((Integer) 0);
        visit0.setPetId((Integer) 10);
        org.springframework.samples.petclinic.owner.Owner owner10 = new org.springframework.samples.petclinic.owner.Owner();
        owner10.setLastName("");
        Integer int13 = owner10.getId();
        owner10.setAddress("");
        String str16 = owner10.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet18 = owner10.getPet("hi!");
        String str19 = owner10.getFirstName();
        owner10.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate23 = pet22.getBirthDate();
        owner10.addPet(pet22);
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        String str26 = pet25.toString();
        org.springframework.samples.petclinic.owner.PetType petType27 = pet25.getType();
        org.springframework.samples.petclinic.visit.Visit visit28 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int29 = visit28.getPetId();
        java.time.LocalDate localDate30 = null;
        visit28.setDate(localDate30);
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        java.time.LocalDate localDate34 = null;
        visit32.setDate(localDate34);
        java.time.LocalDate localDate36 = null;
        visit32.setDate(localDate36);
        visit32.setDescription("");
        visit32.setPetId((Integer) (-1));
        visit32.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner44 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet45 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate46 = pet45.getBirthDate();
        String str47 = pet45.getName();
        owner44.addPet(pet45);
        org.springframework.samples.petclinic.visit.Visit visit49 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int50 = visit49.getPetId();
        pet45.addVisit(visit49);
        java.time.LocalDate localDate52 = visit49.getDate();
        visit32.setDate(localDate52);
        visit28.setDate(localDate52);
        pet25.setBirthDate(localDate52);
        pet22.setBirthDate(localDate52);
        visit0.setDate(localDate52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate52);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        boolean boolean11 = owner0.isNew();
        String str12 = owner0.getLastName();
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Owner owner15 = new org.springframework.samples.petclinic.owner.Owner();
        owner15.setLastName("");
        Integer int18 = owner15.getId();
        owner15.setAddress("");
        String str21 = owner15.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet23 = owner15.getPet("hi!");
        String str24 = owner15.getFirstName();
        owner15.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet27 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate28 = pet27.getBirthDate();
        owner15.addPet(pet27);
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        String str31 = pet30.toString();
        org.springframework.samples.petclinic.owner.PetType petType32 = pet30.getType();
        org.springframework.samples.petclinic.visit.Visit visit33 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int34 = visit33.getPetId();
        java.time.LocalDate localDate35 = null;
        visit33.setDate(localDate35);
        org.springframework.samples.petclinic.visit.Visit visit37 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int38 = visit37.getPetId();
        java.time.LocalDate localDate39 = null;
        visit37.setDate(localDate39);
        java.time.LocalDate localDate41 = null;
        visit37.setDate(localDate41);
        visit37.setDescription("");
        visit37.setPetId((Integer) (-1));
        visit37.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner49 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet50 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate51 = pet50.getBirthDate();
        String str52 = pet50.getName();
        owner49.addPet(pet50);
        org.springframework.samples.petclinic.visit.Visit visit54 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int55 = visit54.getPetId();
        pet50.addVisit(visit54);
        java.time.LocalDate localDate57 = visit54.getDate();
        visit37.setDate(localDate57);
        visit33.setDate(localDate57);
        pet30.setBirthDate(localDate57);
        pet27.setBirthDate(localDate57);
        owner0.addPet(pet27);
        org.springframework.samples.petclinic.owner.PetType petType63 = pet27.getType();
        java.time.LocalDate localDate64 = pet27.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "" + "'", str21.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate64);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        String str14 = owner0.getAddress();
        owner0.setCity("");
        String str17 = owner0.getCity();
        owner0.setTelephone("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "" + "'", str17.equals(""));
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        java.time.LocalDate localDate5 = pet1.getBirthDate();
        org.springframework.samples.petclinic.owner.PetType petType6 = pet1.getType();
        java.time.LocalDate localDate7 = null;
        pet1.setBirthDate(localDate7);
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        java.time.LocalDate localDate11 = null;
        pet9.setBirthDate(localDate11);
        pet9.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType15 = null;
        pet9.setType(petType15);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet9.addVisit(visit17);
        visit17.setDescription("");
        org.springframework.samples.petclinic.owner.Owner owner22 = new org.springframework.samples.petclinic.owner.Owner();
        owner22.setLastName("");
        Integer int25 = owner22.getId();
        owner22.setAddress("");
        owner22.setTelephone("");
        String str30 = owner22.getFirstName();
        owner22.setLastName("hi!");
        String str33 = owner22.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet34 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate35 = pet34.getBirthDate();
        pet34.setName("hi!");
        pet34.setId((Integer) 1);
        owner22.addPet(pet34);
        pet34.setName("hi!");
        boolean boolean43 = pet34.isNew();
        org.springframework.samples.petclinic.visit.Visit visit44 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int45 = visit44.getPetId();
        java.time.LocalDate localDate46 = null;
        visit44.setDate(localDate46);
        org.springframework.samples.petclinic.visit.Visit visit48 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int49 = visit48.getPetId();
        java.time.LocalDate localDate50 = null;
        visit48.setDate(localDate50);
        java.time.LocalDate localDate52 = null;
        visit48.setDate(localDate52);
        visit48.setDescription("");
        visit48.setPetId((Integer) (-1));
        visit48.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner60 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet61 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate62 = pet61.getBirthDate();
        String str63 = pet61.getName();
        owner60.addPet(pet61);
        org.springframework.samples.petclinic.visit.Visit visit65 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int66 = visit65.getPetId();
        pet61.addVisit(visit65);
        java.time.LocalDate localDate68 = visit65.getDate();
        visit48.setDate(localDate68);
        visit44.setDate(localDate68);
        pet34.setBirthDate(localDate68);
        org.springframework.samples.petclinic.visit.Visit visit72 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner73 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet74 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate75 = pet74.getBirthDate();
        String str76 = pet74.getName();
        owner73.addPet(pet74);
        org.springframework.samples.petclinic.visit.Visit visit78 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int79 = visit78.getPetId();
        pet74.addVisit(visit78);
        java.time.LocalDate localDate81 = visit78.getDate();
        visit72.setDate(localDate81);
        pet34.setBirthDate(localDate81);
        visit17.setDate(localDate81);
        visit17.setDescription("hi!");
        String str87 = visit17.getDescription();
        String str88 = visit17.getDescription();
        pet1.addVisit(visit17);
        Class<?> wildcardClass90 = visit17.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "" + "'", str33.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str87 + "' != '" + "hi!" + "'", str87.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str88 + "' != '" + "hi!" + "'", str88.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        owner5.setFirstName("hi!");
        owner5.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        org.springframework.samples.petclinic.owner.PetType petType16 = null;
        pet14.setType(petType16);
        boolean boolean18 = pet14.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository19 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter20 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter20.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetType petType24 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale25 = null;
        String str26 = petTypeFormatter20.print(petType24, locale25);
        pet14.setType(petType24);
        owner5.addPet(pet14);
        owner0.addPet(pet14);
        org.springframework.samples.petclinic.owner.Owner owner30 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate32 = pet31.getBirthDate();
        String str33 = pet31.getName();
        owner30.addPet(pet31);
        org.springframework.samples.petclinic.visit.Visit visit35 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int36 = visit35.getPetId();
        pet31.addVisit(visit35);
        Integer int38 = visit35.getPetId();
        Integer int39 = visit35.getPetId();
        boolean boolean40 = visit35.isNew();
        Integer int41 = visit35.getId();
        Integer int42 = visit35.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner43 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet44 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate45 = pet44.getBirthDate();
        String str46 = pet44.getName();
        owner43.addPet(pet44);
        org.springframework.samples.petclinic.visit.Visit visit48 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int49 = visit48.getPetId();
        pet44.addVisit(visit48);
        Integer int51 = visit48.getPetId();
        String str52 = visit48.getDescription();
        Integer int53 = visit48.getPetId();
        java.time.LocalDate localDate54 = visit48.getDate();
        visit35.setDate(localDate54);
        pet14.addVisit(visit35);
        org.springframework.samples.petclinic.visit.Visit visit57 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int58 = visit57.getPetId();
        Integer int59 = visit57.getPetId();
        boolean boolean60 = visit57.isNew();
        java.time.LocalDate localDate61 = visit57.getDate();
        visit35.setDate(localDate61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate61);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        String str11 = owner0.getCity();
        String str12 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        String str14 = pet13.toString();
        java.time.LocalDate localDate15 = null;
        pet13.setBirthDate(localDate15);
        String str17 = pet13.getName();
        org.springframework.samples.petclinic.owner.Owner owner18 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate20 = pet19.getBirthDate();
        String str21 = pet19.getName();
        owner18.addPet(pet19);
        org.springframework.samples.petclinic.visit.Visit visit23 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int24 = visit23.getPetId();
        pet19.addVisit(visit23);
        Integer int26 = visit23.getPetId();
        String str27 = visit23.getDescription();
        java.time.LocalDate localDate28 = visit23.getDate();
        pet13.addVisit(visit23);
        java.time.LocalDate localDate30 = pet13.getBirthDate();
        pet13.setName("hi!");
        owner0.addPet(pet13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate30);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner2 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate4 = pet3.getBirthDate();
        String str5 = pet3.getName();
        owner2.addPet(pet3);
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        pet3.addVisit(visit7);
        Integer int10 = visit7.getPetId();
        Integer int11 = visit7.getPetId();
        boolean boolean12 = visit7.isNew();
        Integer int13 = visit7.getId();
        java.time.LocalDate localDate14 = visit7.getDate();
        visit0.setDate(localDate14);
        visit0.setDescription("hi!");
        Integer int18 = visit0.getPetId();
        String str19 = visit0.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "hi!" + "'", str19.equals("hi!"));
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        Integer int5 = pet0.getId();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner7 = pet0.getOwner();
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner9 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate11 = pet10.getBirthDate();
        String str12 = pet10.getName();
        owner9.addPet(pet10);
        org.springframework.samples.petclinic.visit.Visit visit14 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int15 = visit14.getPetId();
        pet10.addVisit(visit14);
        java.time.LocalDate localDate17 = visit14.getDate();
        visit8.setDate(localDate17);
        java.time.LocalDate localDate19 = visit8.getDate();
        pet0.setBirthDate(localDate19);
        org.springframework.samples.petclinic.owner.PetType petType21 = pet0.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType21);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getAddress();
        String str8 = owner0.getCity();
        String str9 = owner0.getLastName();
        owner0.setTelephone("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        pet0.addVisit(visit8);
        visit8.setDescription("");
        visit8.setPetId((Integer) (-1));
        java.time.LocalDate localDate15 = visit8.getDate();
        org.springframework.samples.petclinic.owner.Owner owner16 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate18 = pet17.getBirthDate();
        String str19 = pet17.getName();
        owner16.addPet(pet17);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet17.addVisit(visit21);
        java.time.LocalDate localDate24 = visit21.getDate();
        visit21.setPetId((Integer) 1);
        String str27 = visit21.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner28 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet29 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate30 = pet29.getBirthDate();
        String str31 = pet29.getName();
        owner28.addPet(pet29);
        org.springframework.samples.petclinic.visit.Visit visit33 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int34 = visit33.getPetId();
        pet29.addVisit(visit33);
        Integer int36 = visit33.getPetId();
        Integer int37 = visit33.getPetId();
        boolean boolean38 = visit33.isNew();
        Integer int39 = visit33.getId();
        java.time.LocalDate localDate40 = visit33.getDate();
        visit33.setPetId((Integer) 1);
        visit33.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit45 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int46 = visit45.getPetId();
        java.time.LocalDate localDate47 = null;
        visit45.setDate(localDate47);
        java.time.LocalDate localDate49 = null;
        visit45.setDate(localDate49);
        visit45.setDescription("");
        visit45.setPetId((Integer) (-1));
        visit45.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner57 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet58 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate59 = pet58.getBirthDate();
        String str60 = pet58.getName();
        owner57.addPet(pet58);
        org.springframework.samples.petclinic.visit.Visit visit62 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int63 = visit62.getPetId();
        pet58.addVisit(visit62);
        java.time.LocalDate localDate65 = visit62.getDate();
        visit45.setDate(localDate65);
        java.time.LocalDate localDate67 = visit45.getDate();
        visit33.setDate(localDate67);
        visit21.setDate(localDate67);
        visit8.setDate(localDate67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate67);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        String str9 = owner0.getFirstName();
        org.springframework.samples.petclinic.owner.Pet pet12 = owner0.getPet("hi!", false);
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate15 = pet14.getBirthDate();
        String str16 = pet14.getName();
        owner13.addPet(pet14);
        org.springframework.samples.petclinic.owner.Owner owner18 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate20 = pet19.getBirthDate();
        String str21 = pet19.getName();
        owner18.addPet(pet19);
        org.springframework.samples.petclinic.visit.Visit visit23 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int24 = visit23.getPetId();
        pet19.addVisit(visit23);
        Integer int26 = visit23.getPetId();
        Integer int27 = visit23.getPetId();
        boolean boolean28 = visit23.isNew();
        Integer int29 = visit23.getId();
        java.time.LocalDate localDate30 = visit23.getDate();
        visit23.setPetId((Integer) 1);
        visit23.setPetId((Integer) 0);
        java.time.LocalDate localDate35 = visit23.getDate();
        pet14.setBirthDate(localDate35);
        owner0.addPet(pet14);
        java.time.LocalDate localDate38 = pet14.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner39 = pet14.getOwner();
        pet14.setName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner39);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setCity("");
        String str7 = owner0.getFirstName();
        owner0.setLastName("");
        owner0.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        owner5.setCity("hi!");
        String str8 = owner5.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        String str4 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("");
        String str7 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        java.time.LocalDate localDate5 = pet1.getBirthDate();
        boolean boolean6 = pet1.isNew();
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        pet1.setType(petType7);
        org.springframework.samples.petclinic.owner.PetType petType9 = pet1.getType();
        java.time.LocalDate localDate10 = pet1.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner11 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        String str14 = pet12.getName();
        owner11.addPet(pet12);
        java.time.LocalDate localDate16 = pet12.getBirthDate();
        boolean boolean17 = pet12.isNew();
        org.springframework.samples.petclinic.owner.Owner owner18 = new org.springframework.samples.petclinic.owner.Owner();
        owner18.setLastName("");
        Integer int21 = owner18.getId();
        owner18.setAddress("");
        String str24 = owner18.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet26 = owner18.getPet("hi!");
        String str27 = owner18.getFirstName();
        owner18.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate31 = pet30.getBirthDate();
        owner18.addPet(pet30);
        org.springframework.samples.petclinic.owner.Pet pet33 = new org.springframework.samples.petclinic.owner.Pet();
        String str34 = pet33.toString();
        org.springframework.samples.petclinic.owner.PetType petType35 = pet33.getType();
        org.springframework.samples.petclinic.visit.Visit visit36 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int37 = visit36.getPetId();
        java.time.LocalDate localDate38 = null;
        visit36.setDate(localDate38);
        org.springframework.samples.petclinic.visit.Visit visit40 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int41 = visit40.getPetId();
        java.time.LocalDate localDate42 = null;
        visit40.setDate(localDate42);
        java.time.LocalDate localDate44 = null;
        visit40.setDate(localDate44);
        visit40.setDescription("");
        visit40.setPetId((Integer) (-1));
        visit40.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner52 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet53 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate54 = pet53.getBirthDate();
        String str55 = pet53.getName();
        owner52.addPet(pet53);
        org.springframework.samples.petclinic.visit.Visit visit57 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int58 = visit57.getPetId();
        pet53.addVisit(visit57);
        java.time.LocalDate localDate60 = visit57.getDate();
        visit40.setDate(localDate60);
        visit36.setDate(localDate60);
        pet33.setBirthDate(localDate60);
        pet30.setBirthDate(localDate60);
        pet12.setBirthDate(localDate60);
        pet1.setBirthDate(localDate60);
        Class<?> wildcardClass67 = localDate60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        owner5.setCity("hi!");
        String str14 = owner5.getLastName();
        owner5.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        String str18 = pet17.toString();
        org.springframework.samples.petclinic.owner.PetType petType19 = pet17.getType();
        java.time.LocalDate localDate20 = pet17.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner21 = pet17.getOwner();
        String str22 = pet17.toString();
        pet17.setId((Integer) 100);
        owner5.addPet(pet17);
        org.springframework.samples.petclinic.owner.Pet pet26 = new org.springframework.samples.petclinic.owner.Pet();
        String str27 = pet26.toString();
        java.time.LocalDate localDate28 = null;
        pet26.setBirthDate(localDate28);
        pet26.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType32 = null;
        pet26.setType(petType32);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        pet26.addVisit(visit34);
        visit34.setDescription("");
        String str39 = visit34.getDescription();
        pet17.addVisit(visit34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "" + "'", str39.equals(""));
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getAddress();
        String str9 = owner0.getCity();
        owner0.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        String str11 = owner0.getAddress();
        String str12 = owner0.getCity();
        boolean boolean13 = owner0.isNew();
        owner0.setId((Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        int int3 = vet0.getNrOfSpecialties();
        int int4 = vet0.getNrOfSpecialties();
        String str5 = vet0.getLastName();
        int int6 = vet0.getNrOfSpecialties();
        int int7 = vet0.getNrOfSpecialties();
        int int8 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        org.springframework.samples.petclinic.owner.Owner owner8 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner9 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate11 = pet10.getBirthDate();
        String str12 = pet10.getName();
        owner9.addPet(pet10);
        org.springframework.samples.petclinic.visit.Visit visit14 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int15 = visit14.getPetId();
        pet10.addVisit(visit14);
        String str17 = visit14.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner18 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate20 = pet19.getBirthDate();
        String str21 = pet19.getName();
        owner18.addPet(pet19);
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        String str24 = pet23.toString();
        owner18.addPet(pet23);
        org.springframework.samples.petclinic.owner.Owner owner26 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet27 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate28 = pet27.getBirthDate();
        String str29 = pet27.getName();
        owner26.addPet(pet27);
        org.springframework.samples.petclinic.visit.Visit visit31 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int32 = visit31.getPetId();
        pet27.addVisit(visit31);
        visit31.setDescription("");
        java.time.LocalDate localDate36 = visit31.getDate();
        pet23.setBirthDate(localDate36);
        visit14.setDate(localDate36);
        visit14.setPetId((Integer) 0);
        visit14.setPetId((Integer) 0);
        pet0.addVisit(visit14);
        Integer int44 = visit14.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        String str9 = owner0.getFirstName();
        owner0.setCity("");
        owner0.setId((Integer) 1);
        owner0.setTelephone("");
        owner0.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        visit0.setPetId((Integer) (-1));
        visit0.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        java.time.LocalDate localDate20 = visit17.getDate();
        visit0.setDate(localDate20);
        visit0.setPetId((Integer) 1);
        visit0.setDescription("hi!");
        visit0.setDescription("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        int int5 = vet0.getNrOfSpecialties();
        vet0.setFirstName("hi!");
        int int8 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        String str2 = visit0.getDescription();
        java.time.LocalDate localDate3 = visit0.getDate();
        visit0.setId((Integer) 10);
        visit0.setPetId((Integer) 0);
        visit0.setPetId((Integer) 10);
        visit0.setId((Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        owner0.setAddress("");
        String str9 = owner0.getFirstName();
        owner0.setId((Integer) 100);
        Integer int12 = owner0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12.equals(100));
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.springframework.samples.petclinic.owner.PetType petType0 = new org.springframework.samples.petclinic.owner.PetType();
        String str1 = petType0.getName();
        boolean boolean2 = petType0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.springframework.samples.petclinic.model.NamedEntity namedEntity0 = new org.springframework.samples.petclinic.model.NamedEntity();
        namedEntity0.setName("hi!");
        String str3 = namedEntity0.getName();
        String str4 = namedEntity0.getName();
        String str5 = namedEntity0.getName();
        namedEntity0.setName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!" + "'", str3.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.vet.Vet vet1 = new org.springframework.samples.petclinic.vet.Vet();
        String str2 = vet1.getFirstName();
        String str3 = vet1.getFirstName();
        org.springframework.samples.petclinic.vet.Specialty specialty4 = null;
        vet1.addSpecialty(specialty4);
        org.springframework.validation.Errors errors6 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) specialty4, errors6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        owner0.setAddress("hi!");
        String str7 = owner0.getTelephone();
        String str8 = owner0.getAddress();
        String str9 = owner0.getAddress();
        owner0.setFirstName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        pet2.addVisit(visit6);
        Integer int9 = visit6.getPetId();
        Integer int10 = visit6.getPetId();
        boolean boolean11 = visit6.isNew();
        Integer int12 = visit6.getId();
        Integer int13 = visit6.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner14 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate16 = pet15.getBirthDate();
        String str17 = pet15.getName();
        owner14.addPet(pet15);
        org.springframework.samples.petclinic.visit.Visit visit19 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int20 = visit19.getPetId();
        pet15.addVisit(visit19);
        Integer int22 = visit19.getPetId();
        String str23 = visit19.getDescription();
        Integer int24 = visit19.getPetId();
        java.time.LocalDate localDate25 = visit19.getDate();
        visit6.setDate(localDate25);
        visit6.setPetId((Integer) 10);
        org.springframework.validation.Errors errors29 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) visit6, errors29);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.visit.Visit cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.visit.Visit and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setLastName("hi!");
        Integer int7 = owner0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        String str9 = owner0.getFirstName();
        owner0.setCity("");
        owner0.setAddress("hi!");
        boolean boolean14 = owner0.isNew();
        owner0.setFirstName("hi!");
        String str17 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        visit5.setDescription("");
        Integer int12 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = pet1.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        java.time.LocalDate localDate11 = null;
        visit9.setDate(localDate11);
        java.time.LocalDate localDate13 = null;
        visit9.setDate(localDate13);
        pet1.addVisit(visit9);
        String str16 = pet1.toString();
        org.springframework.samples.petclinic.owner.Owner owner17 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate19 = pet18.getBirthDate();
        String str20 = pet18.getName();
        owner17.addPet(pet18);
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        pet18.addVisit(visit22);
        Integer int25 = visit22.getPetId();
        Integer int26 = visit22.getPetId();
        boolean boolean27 = visit22.isNew();
        Integer int28 = visit22.getId();
        Integer int29 = visit22.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner30 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate32 = pet31.getBirthDate();
        String str33 = pet31.getName();
        owner30.addPet(pet31);
        org.springframework.samples.petclinic.visit.Visit visit35 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int36 = visit35.getPetId();
        pet31.addVisit(visit35);
        Integer int38 = visit35.getPetId();
        String str39 = visit35.getDescription();
        Integer int40 = visit35.getPetId();
        java.time.LocalDate localDate41 = visit35.getDate();
        visit22.setDate(localDate41);
        visit22.setPetId((Integer) 10);
        pet1.addVisit(visit22);
        java.time.LocalDate localDate46 = visit22.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        Integer int6 = visit0.getId();
        String str7 = visit0.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        owner5.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet13 = owner5.getPet("", true);
        String str14 = owner5.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        pet12.setName("hi!");
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        pet12.setName("hi!");
        boolean boolean21 = pet12.isNew();
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        java.time.LocalDate localDate24 = null;
        visit22.setDate(localDate24);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        java.time.LocalDate localDate28 = null;
        visit26.setDate(localDate28);
        java.time.LocalDate localDate30 = null;
        visit26.setDate(localDate30);
        visit26.setDescription("");
        visit26.setPetId((Integer) (-1));
        visit26.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner38 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate40 = pet39.getBirthDate();
        String str41 = pet39.getName();
        owner38.addPet(pet39);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        pet39.addVisit(visit43);
        java.time.LocalDate localDate46 = visit43.getDate();
        visit26.setDate(localDate46);
        visit22.setDate(localDate46);
        pet12.setBirthDate(localDate46);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner51 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet52 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate53 = pet52.getBirthDate();
        String str54 = pet52.getName();
        owner51.addPet(pet52);
        org.springframework.samples.petclinic.visit.Visit visit56 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int57 = visit56.getPetId();
        pet52.addVisit(visit56);
        java.time.LocalDate localDate59 = visit56.getDate();
        visit50.setDate(localDate59);
        pet12.setBirthDate(localDate59);
        pet12.setName("");
        String str64 = pet12.toString();
        java.time.LocalDate localDate65 = pet12.getBirthDate();
        Class<?> wildcardClass66 = pet12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "" + "'", str64.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("hi!", true);
        owner0.setTelephone("");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet13 = owner0.getPet("");
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        org.springframework.samples.petclinic.owner.PetType petType16 = pet14.getType();
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        java.time.LocalDate localDate19 = null;
        visit17.setDate(localDate19);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        java.time.LocalDate localDate23 = null;
        visit21.setDate(localDate23);
        java.time.LocalDate localDate25 = null;
        visit21.setDate(localDate25);
        visit21.setDescription("");
        visit21.setPetId((Integer) (-1));
        visit21.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner33 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet34 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate35 = pet34.getBirthDate();
        String str36 = pet34.getName();
        owner33.addPet(pet34);
        org.springframework.samples.petclinic.visit.Visit visit38 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int39 = visit38.getPetId();
        pet34.addVisit(visit38);
        java.time.LocalDate localDate41 = visit38.getDate();
        visit21.setDate(localDate41);
        visit17.setDate(localDate41);
        pet14.setBirthDate(localDate41);
        org.springframework.samples.petclinic.owner.Pet pet45 = new org.springframework.samples.petclinic.owner.Pet();
        String str46 = pet45.toString();
        org.springframework.samples.petclinic.owner.PetType petType47 = null;
        pet45.setType(petType47);
        org.springframework.samples.petclinic.visit.Visit visit49 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int50 = visit49.getPetId();
        java.time.LocalDate localDate51 = null;
        visit49.setDate(localDate51);
        org.springframework.samples.petclinic.visit.Visit visit53 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int54 = visit53.getPetId();
        java.time.LocalDate localDate55 = null;
        visit53.setDate(localDate55);
        java.time.LocalDate localDate57 = null;
        visit53.setDate(localDate57);
        visit53.setDescription("");
        visit53.setPetId((Integer) (-1));
        visit53.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner65 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet66 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate67 = pet66.getBirthDate();
        String str68 = pet66.getName();
        owner65.addPet(pet66);
        org.springframework.samples.petclinic.visit.Visit visit70 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int71 = visit70.getPetId();
        pet66.addVisit(visit70);
        java.time.LocalDate localDate73 = visit70.getDate();
        visit53.setDate(localDate73);
        visit49.setDate(localDate73);
        visit49.setDescription("");
        pet45.addVisit(visit49);
        org.springframework.samples.petclinic.owner.Owner owner79 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet80 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate81 = pet80.getBirthDate();
        String str82 = pet80.getName();
        owner79.addPet(pet80);
        org.springframework.samples.petclinic.visit.Visit visit84 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int85 = visit84.getPetId();
        pet80.addVisit(visit84);
        visit84.setDescription("");
        java.time.LocalDate localDate89 = visit84.getDate();
        visit49.setDate(localDate89);
        pet14.setBirthDate(localDate89);
        org.springframework.samples.petclinic.owner.Owner owner92 = pet14.getOwner();
        owner0.addPet(pet14);
        owner0.setLastName("hi!");
        owner0.setCity("hi!");
        String str98 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str98 + "' != '" + "hi!" + "'", str98.equals("hi!"));
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetRepository petRepository8 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter9 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter9.print(petType10, locale11);
        org.springframework.samples.petclinic.owner.PetRepository petRepository13 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter14 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository13);
        org.springframework.samples.petclinic.owner.PetType petType15 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter14.print(petType15, locale16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter14.print(petType18, locale19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter14.print(petType21, locale22);
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter9.print(petType21, locale24);
        org.springframework.samples.petclinic.owner.Pet pet26 = new org.springframework.samples.petclinic.owner.Pet();
        String str27 = pet26.toString();
        boolean boolean28 = pet26.isNew();
        org.springframework.samples.petclinic.owner.PetType petType29 = pet26.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository30 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter31 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository30);
        org.springframework.samples.petclinic.owner.PetType petType32 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale33 = null;
        String str34 = petTypeFormatter31.print(petType32, locale33);
        org.springframework.samples.petclinic.owner.PetType petType35 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale36 = null;
        String str37 = petTypeFormatter31.print(petType35, locale36);
        pet26.setType(petType35);
        petType35.setName("");
        java.util.Locale locale41 = null;
        String str42 = petTypeFormatter9.print(petType35, locale41);
        java.util.Locale locale43 = null;
        String str44 = petTypeFormatter1.print(petType35, locale43);
        org.springframework.samples.petclinic.owner.PetRepository petRepository45 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter46 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository45);
        org.springframework.samples.petclinic.owner.PetType petType47 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale48 = null;
        String str49 = petTypeFormatter46.print(petType47, locale48);
        org.springframework.samples.petclinic.owner.PetType petType50 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale51 = null;
        String str52 = petTypeFormatter46.print(petType50, locale51);
        org.springframework.samples.petclinic.owner.PetType petType53 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale54 = null;
        String str55 = petTypeFormatter46.print(petType53, locale54);
        boolean boolean56 = petType53.isNew();
        java.util.Locale locale57 = null;
        String str58 = petTypeFormatter1.print(petType53, locale57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "" + "'", str42.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("");
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        java.time.LocalDate localDate5 = null;
        pet3.setBirthDate(localDate5);
        String str7 = pet3.getName();
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        Integer int16 = visit13.getPetId();
        String str17 = visit13.getDescription();
        java.time.LocalDate localDate18 = visit13.getDate();
        pet3.addVisit(visit13);
        owner0.addPet(pet3);
        String str21 = owner0.getCity();
        owner0.setFirstName("");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet25 = owner0.getPet("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        owner5.setCity("");
        String str11 = owner5.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate1 = pet0.getBirthDate();
        pet0.setName("hi!");
        Integer int4 = pet0.getId();
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        String str14 = pet13.toString();
        org.springframework.samples.petclinic.owner.PetType petType15 = null;
        pet13.setType(petType15);
        String str17 = pet13.getName();
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        String str19 = pet18.toString();
        org.springframework.samples.petclinic.owner.PetType petType20 = null;
        pet18.setType(petType20);
        boolean boolean22 = pet18.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository23 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter24 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository23);
        org.springframework.samples.petclinic.owner.PetType petType25 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale26 = null;
        String str27 = petTypeFormatter24.print(petType25, locale26);
        org.springframework.samples.petclinic.owner.PetType petType28 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter24.print(petType28, locale29);
        pet18.setType(petType28);
        pet13.setType(petType28);
        java.util.Locale locale33 = null;
        String str34 = petTypeFormatter6.print(petType28, locale33);
        pet0.setType(petType28);
        java.time.LocalDate localDate36 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate36);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        boolean boolean3 = vet0.isNew();
        int int4 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        org.springframework.samples.petclinic.owner.PetType petType12 = null;
        pet10.setType(petType12);
        boolean boolean14 = pet10.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository15 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter16 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter16.print(petType17, locale18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter16.print(petType20, locale21);
        pet10.setType(petType20);
        org.springframework.samples.petclinic.owner.Pet pet24 = new org.springframework.samples.petclinic.owner.Pet();
        String str25 = pet24.toString();
        java.time.LocalDate localDate26 = null;
        pet24.setBirthDate(localDate26);
        org.springframework.samples.petclinic.owner.Owner owner28 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet29 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate30 = pet29.getBirthDate();
        String str31 = pet29.getName();
        owner28.addPet(pet29);
        org.springframework.samples.petclinic.visit.Visit visit33 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int34 = visit33.getPetId();
        pet29.addVisit(visit33);
        Integer int36 = visit33.getPetId();
        Integer int37 = visit33.getPetId();
        boolean boolean38 = visit33.isNew();
        Integer int39 = visit33.getId();
        String str40 = visit33.getDescription();
        pet24.addVisit(visit33);
        pet10.addVisit(visit33);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        java.time.LocalDate localDate45 = null;
        visit43.setDate(localDate45);
        java.time.LocalDate localDate47 = null;
        visit43.setDate(localDate47);
        org.springframework.samples.petclinic.owner.Owner owner49 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet50 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate51 = pet50.getBirthDate();
        String str52 = pet50.getName();
        owner49.addPet(pet50);
        org.springframework.samples.petclinic.visit.Visit visit54 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int55 = visit54.getPetId();
        pet50.addVisit(visit54);
        java.time.LocalDate localDate57 = visit54.getDate();
        visit43.setDate(localDate57);
        visit43.setPetId((Integer) 1);
        pet10.addVisit(visit43);
        owner0.addPet(pet10);
        String str63 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getAddress();
        owner0.setLastName("hi!");
        String str10 = owner0.getAddress();
        owner0.setTelephone("hi!");
        boolean boolean13 = owner0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        owner5.setCity("hi!");
        String str14 = owner5.getLastName();
        String str15 = owner5.getTelephone();
        owner5.setFirstName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        String str7 = owner0.getAddress();
        owner0.setFirstName("");
        owner0.setId((Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        String str2 = owner1.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        org.springframework.samples.petclinic.owner.PetType petType5 = null;
        pet3.setType(petType5);
        String str7 = pet3.toString();
        owner1.addPet(pet3);
        String str9 = owner1.getLastName();
        owner1.setFirstName("");
        String str12 = owner1.getLastName();
        org.springframework.validation.Errors errors13 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) str12, errors13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        owner0.setLastName("");
        owner0.setFirstName("");
        owner0.setCity("");
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setCity("");
        owner0.setAddress("");
        owner0.setLastName("hi!");
        String str11 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        java.time.LocalDate localDate10 = visit5.getDate();
        String str11 = visit5.getDescription();
        java.time.LocalDate localDate12 = visit5.getDate();
        Integer int13 = visit5.getPetId();
        java.time.LocalDate localDate14 = visit5.getDate();
        org.springframework.samples.petclinic.owner.Owner owner15 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet16 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate17 = pet16.getBirthDate();
        String str18 = pet16.getName();
        owner15.addPet(pet16);
        org.springframework.samples.petclinic.visit.Visit visit20 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int21 = visit20.getPetId();
        pet16.addVisit(visit20);
        Integer int23 = visit20.getPetId();
        Integer int24 = visit20.getPetId();
        boolean boolean25 = visit20.isNew();
        Integer int26 = visit20.getId();
        Integer int27 = visit20.getPetId();
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate29 = pet28.getBirthDate();
        pet28.setName("hi!");
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        java.time.LocalDate localDate34 = null;
        visit32.setDate(localDate34);
        java.time.LocalDate localDate36 = null;
        visit32.setDate(localDate36);
        visit32.setDescription("");
        visit32.setPetId((Integer) (-1));
        visit32.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner44 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet45 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate46 = pet45.getBirthDate();
        String str47 = pet45.getName();
        owner44.addPet(pet45);
        org.springframework.samples.petclinic.visit.Visit visit49 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int50 = visit49.getPetId();
        pet45.addVisit(visit49);
        java.time.LocalDate localDate52 = visit49.getDate();
        visit32.setDate(localDate52);
        pet28.setBirthDate(localDate52);
        visit20.setDate(localDate52);
        visit5.setDate(localDate52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate52);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setCity("");
        owner0.setAddress("");
        String str9 = owner0.getCity();
        owner0.setFirstName("");
        String str12 = owner0.getCity();
        String str13 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType5 = pet0.getType();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        java.time.LocalDate localDate9 = null;
        visit7.setDate(localDate9);
        java.time.LocalDate localDate11 = null;
        visit7.setDate(localDate11);
        Integer int13 = visit7.getPetId();
        pet0.addVisit(visit7);
        org.springframework.samples.petclinic.owner.Owner owner15 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet16 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate17 = pet16.getBirthDate();
        String str18 = pet16.getName();
        owner15.addPet(pet16);
        org.springframework.samples.petclinic.visit.Visit visit20 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int21 = visit20.getPetId();
        pet16.addVisit(visit20);
        Integer int23 = visit20.getPetId();
        String str24 = visit20.getDescription();
        Integer int25 = visit20.getPetId();
        pet0.addVisit(visit20);
        java.time.LocalDate localDate27 = visit20.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        vet0.setLastName("");
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        org.springframework.samples.petclinic.vet.Specialty specialty7 = null;
        vet0.addSpecialty(specialty7);
        org.springframework.samples.petclinic.vet.Specialty specialty9 = null;
        vet0.addSpecialty(specialty9);
        vet0.setLastName("hi!");
        int int13 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        String str8 = visit0.getDescription();
        String str9 = visit0.getDescription();
        Integer int10 = visit0.getPetId();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        String str12 = pet11.toString();
        java.time.LocalDate localDate13 = null;
        pet11.setBirthDate(localDate13);
        pet11.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType17 = null;
        pet11.setType(petType17);
        org.springframework.samples.petclinic.visit.Visit visit19 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int20 = visit19.getPetId();
        pet11.addVisit(visit19);
        visit19.setDescription("");
        org.springframework.samples.petclinic.owner.Owner owner24 = new org.springframework.samples.petclinic.owner.Owner();
        owner24.setLastName("");
        Integer int27 = owner24.getId();
        owner24.setAddress("");
        owner24.setTelephone("");
        String str32 = owner24.getFirstName();
        owner24.setLastName("hi!");
        String str35 = owner24.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet36 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate37 = pet36.getBirthDate();
        pet36.setName("hi!");
        pet36.setId((Integer) 1);
        owner24.addPet(pet36);
        pet36.setName("hi!");
        boolean boolean45 = pet36.isNew();
        org.springframework.samples.petclinic.visit.Visit visit46 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int47 = visit46.getPetId();
        java.time.LocalDate localDate48 = null;
        visit46.setDate(localDate48);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int51 = visit50.getPetId();
        java.time.LocalDate localDate52 = null;
        visit50.setDate(localDate52);
        java.time.LocalDate localDate54 = null;
        visit50.setDate(localDate54);
        visit50.setDescription("");
        visit50.setPetId((Integer) (-1));
        visit50.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner62 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet63 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate64 = pet63.getBirthDate();
        String str65 = pet63.getName();
        owner62.addPet(pet63);
        org.springframework.samples.petclinic.visit.Visit visit67 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int68 = visit67.getPetId();
        pet63.addVisit(visit67);
        java.time.LocalDate localDate70 = visit67.getDate();
        visit50.setDate(localDate70);
        visit46.setDate(localDate70);
        pet36.setBirthDate(localDate70);
        org.springframework.samples.petclinic.visit.Visit visit74 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner75 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet76 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate77 = pet76.getBirthDate();
        String str78 = pet76.getName();
        owner75.addPet(pet76);
        org.springframework.samples.petclinic.visit.Visit visit80 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int81 = visit80.getPetId();
        pet76.addVisit(visit80);
        java.time.LocalDate localDate83 = visit80.getDate();
        visit74.setDate(localDate83);
        pet36.setBirthDate(localDate83);
        visit19.setDate(localDate83);
        visit0.setDate(localDate83);
        Integer int88 = visit0.getPetId();
        visit0.setDescription("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "" + "'", str35.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int88);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        pet5.setId((Integer) 10);
        org.springframework.samples.petclinic.owner.Owner owner10 = pet5.getOwner();
        java.time.LocalDate localDate11 = null;
        pet5.setBirthDate(localDate11);
        java.time.LocalDate localDate13 = pet5.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner14 = pet5.getOwner();
        owner14.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        String str18 = pet17.toString();
        org.springframework.samples.petclinic.owner.PetType petType19 = pet17.getType();
        java.time.LocalDate localDate20 = pet17.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner21 = pet17.getOwner();
        String str22 = pet17.toString();
        org.springframework.samples.petclinic.owner.Owner owner23 = pet17.getOwner();
        owner14.addPet(pet17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner23);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        vet0.setId((Integer) 1);
        int int5 = vet0.getNrOfSpecialties();
        int int6 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        String str5 = owner0.getAddress();
        owner0.setCity("hi!");
        owner0.setTelephone("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner9 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate11 = pet10.getBirthDate();
        String str12 = pet10.getName();
        owner9.addPet(pet10);
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        owner9.addPet(pet14);
        org.springframework.samples.petclinic.owner.Owner owner17 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate19 = pet18.getBirthDate();
        String str20 = pet18.getName();
        owner17.addPet(pet18);
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        pet18.addVisit(visit22);
        visit22.setDescription("");
        java.time.LocalDate localDate27 = visit22.getDate();
        pet14.setBirthDate(localDate27);
        visit5.setDate(localDate27);
        boolean boolean30 = visit5.isNew();
        visit5.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        owner0.setCity("");
        owner0.setAddress("hi!");
        Integer int15 = owner0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        String str3 = vet0.getLastName();
        vet0.setFirstName("");
        int int6 = vet0.getNrOfSpecialties();
        vet0.setFirstName("hi!");
        vet0.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        org.springframework.samples.petclinic.owner.Pet pet14 = owner5.getPet("", true);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = pet15.getType();
        java.time.LocalDate localDate18 = pet15.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner19 = pet15.getOwner();
        String str20 = pet15.toString();
        pet15.setName("hi!");
        pet15.setName("");
        String str25 = pet15.toString();
        owner5.addPet(pet15);
        String str27 = owner5.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "" + "'", str25.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        pet0.setName("");
        pet0.setName("");
        java.time.LocalDate localDate12 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        String str14 = pet13.toString();
        java.time.LocalDate localDate15 = null;
        pet13.setBirthDate(localDate15);
        java.time.LocalDate localDate17 = pet13.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner18 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate20 = pet19.getBirthDate();
        String str21 = pet19.getName();
        owner18.addPet(pet19);
        org.springframework.samples.petclinic.visit.Visit visit23 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int24 = visit23.getPetId();
        pet19.addVisit(visit23);
        visit23.setDescription("");
        pet13.addVisit(visit23);
        visit23.setPetId((Integer) 10);
        java.time.LocalDate localDate31 = visit23.getDate();
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        String str33 = visit32.getDescription();
        String str34 = visit32.getDescription();
        java.time.LocalDate localDate35 = visit32.getDate();
        String str36 = visit32.getDescription();
        java.time.LocalDate localDate37 = visit32.getDate();
        visit23.setDate(localDate37);
        pet0.addVisit(visit23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate37);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        String str2 = visit0.getDescription();
        java.time.LocalDate localDate3 = visit0.getDate();
        visit0.setId((Integer) 10);
        visit0.setPetId((Integer) 0);
        String str8 = visit0.getDescription();
        boolean boolean9 = visit0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = null;
        visit5.setDate(localDate8);
        visit5.setDescription("hi!");
        java.time.LocalDate localDate12 = visit5.getDate();
        Integer int13 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        visit5.setPetId((Integer) (-1));
        visit5.setPetId((Integer) 100);
        java.time.LocalDate localDate13 = visit5.getDate();
        visit5.setDescription("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetRepository petRepository8 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter9 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter9.print(petType10, locale11);
        org.springframework.samples.petclinic.owner.PetRepository petRepository13 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter14 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository13);
        org.springframework.samples.petclinic.owner.PetType petType15 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter14.print(petType15, locale16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter14.print(petType18, locale19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter14.print(petType21, locale22);
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter9.print(petType21, locale24);
        org.springframework.samples.petclinic.owner.Pet pet26 = new org.springframework.samples.petclinic.owner.Pet();
        String str27 = pet26.toString();
        boolean boolean28 = pet26.isNew();
        org.springframework.samples.petclinic.owner.PetType petType29 = pet26.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository30 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter31 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository30);
        org.springframework.samples.petclinic.owner.PetType petType32 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale33 = null;
        String str34 = petTypeFormatter31.print(petType32, locale33);
        org.springframework.samples.petclinic.owner.PetType petType35 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale36 = null;
        String str37 = petTypeFormatter31.print(petType35, locale36);
        pet26.setType(petType35);
        petType35.setName("");
        java.util.Locale locale41 = null;
        String str42 = petTypeFormatter9.print(petType35, locale41);
        java.util.Locale locale43 = null;
        String str44 = petTypeFormatter1.print(petType35, locale43);
        java.util.Locale locale46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType47 = petTypeFormatter1.parse("", locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "" + "'", str42.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "" + "'", str44.equals(""));
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        String str3 = owner0.getTelephone();
        Integer int4 = owner0.getId();
        String str5 = owner0.getAddress();
        Integer int6 = owner0.getId();
        owner0.setLastName("hi!");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = pet9.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository12 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter13 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter13.print(petType14, locale15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter13.print(petType17, locale18);
        pet9.setType(petType17);
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        String str22 = pet21.toString();
        org.springframework.samples.petclinic.owner.PetType petType23 = null;
        pet21.setType(petType23);
        boolean boolean25 = pet21.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository26 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter27 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository26);
        org.springframework.samples.petclinic.owner.PetType petType28 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter27.print(petType28, locale29);
        org.springframework.samples.petclinic.owner.PetType petType31 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale32 = null;
        String str33 = petTypeFormatter27.print(petType31, locale32);
        pet21.setType(petType31);
        pet9.setType(petType31);
        org.springframework.samples.petclinic.visit.Visit visit36 = new org.springframework.samples.petclinic.visit.Visit();
        String str37 = visit36.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner38 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate40 = pet39.getBirthDate();
        String str41 = pet39.getName();
        owner38.addPet(pet39);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        pet39.addVisit(visit43);
        Integer int46 = visit43.getPetId();
        Integer int47 = visit43.getPetId();
        boolean boolean48 = visit43.isNew();
        Integer int49 = visit43.getId();
        java.time.LocalDate localDate50 = visit43.getDate();
        visit36.setDate(localDate50);
        pet9.setBirthDate(localDate50);
        owner0.addPet(pet9);
        owner0.setCity("hi!");
        org.springframework.samples.petclinic.owner.Owner owner56 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet57 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate58 = pet57.getBirthDate();
        String str59 = pet57.getName();
        owner56.addPet(pet57);
        org.springframework.samples.petclinic.visit.Visit visit61 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int62 = visit61.getPetId();
        pet57.addVisit(visit61);
        java.time.LocalDate localDate64 = pet57.getBirthDate();
        String str65 = pet57.toString();
        java.time.LocalDate localDate66 = pet57.getBirthDate();
        org.springframework.samples.petclinic.owner.PetType petType67 = pet57.getType();
        pet57.setName("");
        owner0.addPet(pet57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType67);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        visit0.setDescription("");
        visit0.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        Integer int14 = visit11.getPetId();
        Integer int15 = visit11.getPetId();
        boolean boolean16 = visit11.isNew();
        Integer int17 = visit11.getId();
        java.time.LocalDate localDate18 = visit11.getDate();
        visit0.setDate(localDate18);
        java.time.LocalDate localDate20 = visit0.getDate();
        visit0.setPetId((Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        String str5 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        java.time.LocalDate localDate8 = null;
        pet6.setBirthDate(localDate8);
        String str10 = pet6.getName();
        org.springframework.samples.petclinic.owner.Owner owner11 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        String str14 = pet12.getName();
        owner11.addPet(pet12);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        pet12.addVisit(visit16);
        Integer int19 = visit16.getPetId();
        String str20 = visit16.getDescription();
        java.time.LocalDate localDate21 = visit16.getDate();
        pet6.addVisit(visit16);
        owner0.addPet(pet6);
        String str24 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet27 = owner0.getPet("hi!", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet27);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType5 = pet0.getType();
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        java.time.LocalDate localDate8 = null;
        visit6.setDate(localDate8);
        java.time.LocalDate localDate10 = null;
        visit6.setDate(localDate10);
        visit6.setPetId((Integer) (-1));
        visit6.setDescription("hi!");
        pet0.addVisit(visit6);
        java.time.LocalDate localDate17 = visit6.getDate();
        java.time.LocalDate localDate18 = visit6.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getAddress();
        String str8 = owner0.getAddress();
        String str9 = owner0.getLastName();
        owner0.setCity("hi!");
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType14 = pet12.getType();
        java.time.LocalDate localDate15 = pet12.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner16 = pet12.getOwner();
        String str17 = pet12.toString();
        pet12.setName("hi!");
        pet12.setName("");
        pet12.setName("");
        String str24 = pet12.toString();
        pet12.setName("");
        owner0.addPet(pet12);
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        String str29 = pet28.toString();
        org.springframework.samples.petclinic.owner.PetType petType30 = pet28.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository31 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter32 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository31);
        org.springframework.samples.petclinic.owner.PetType petType33 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter32.print(petType33, locale34);
        org.springframework.samples.petclinic.owner.PetType petType36 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter32.print(petType36, locale37);
        pet28.setType(petType36);
        org.springframework.samples.petclinic.owner.Owner owner40 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet41 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate42 = pet41.getBirthDate();
        String str43 = pet41.getName();
        owner40.addPet(pet41);
        org.springframework.samples.petclinic.visit.Visit visit45 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int46 = visit45.getPetId();
        pet41.addVisit(visit45);
        java.time.LocalDate localDate48 = visit45.getDate();
        pet28.setBirthDate(localDate48);
        java.time.LocalDate localDate50 = pet28.getBirthDate();
        java.time.LocalDate localDate51 = pet28.getBirthDate();
        owner0.addPet(pet28);
        owner0.setTelephone("hi!");
        String str55 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        String str3 = vet0.getLastName();
        vet0.setId((Integer) 0);
        String str6 = vet0.getFirstName();
        int int7 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        String str1 = vet0.getFirstName();
        int int2 = vet0.getNrOfSpecialties();
        boolean boolean3 = vet0.isNew();
        int int4 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        int int3 = vet0.getNrOfSpecialties();
        int int4 = vet0.getNrOfSpecialties();
        String str5 = vet0.getLastName();
        int int6 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) (-1));
        org.springframework.samples.petclinic.vet.Specialty specialty9 = null;
        vet0.addSpecialty(specialty9);
        String str11 = vet0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        String str3 = vet0.getLastName();
        vet0.setFirstName("");
        org.springframework.samples.petclinic.vet.Specialty specialty6 = null;
        vet0.addSpecialty(specialty6);
        String str8 = vet0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        Integer int12 = visit5.getPetId();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        pet13.setName("hi!");
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        java.time.LocalDate localDate19 = null;
        visit17.setDate(localDate19);
        java.time.LocalDate localDate21 = null;
        visit17.setDate(localDate21);
        visit17.setDescription("");
        visit17.setPetId((Integer) (-1));
        visit17.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner29 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate31 = pet30.getBirthDate();
        String str32 = pet30.getName();
        owner29.addPet(pet30);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        pet30.addVisit(visit34);
        java.time.LocalDate localDate37 = visit34.getDate();
        visit17.setDate(localDate37);
        pet13.setBirthDate(localDate37);
        visit5.setDate(localDate37);
        visit5.setPetId((Integer) 10);
        org.springframework.samples.petclinic.owner.Pet pet43 = new org.springframework.samples.petclinic.owner.Pet();
        String str44 = pet43.toString();
        org.springframework.samples.petclinic.owner.PetType petType45 = pet43.getType();
        org.springframework.samples.petclinic.visit.Visit visit46 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int47 = visit46.getPetId();
        java.time.LocalDate localDate48 = null;
        visit46.setDate(localDate48);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int51 = visit50.getPetId();
        java.time.LocalDate localDate52 = null;
        visit50.setDate(localDate52);
        java.time.LocalDate localDate54 = null;
        visit50.setDate(localDate54);
        visit50.setDescription("");
        visit50.setPetId((Integer) (-1));
        visit50.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner62 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet63 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate64 = pet63.getBirthDate();
        String str65 = pet63.getName();
        owner62.addPet(pet63);
        org.springframework.samples.petclinic.visit.Visit visit67 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int68 = visit67.getPetId();
        pet63.addVisit(visit67);
        java.time.LocalDate localDate70 = visit67.getDate();
        visit50.setDate(localDate70);
        visit46.setDate(localDate70);
        pet43.setBirthDate(localDate70);
        visit5.setDate(localDate70);
        Integer int75 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75.equals(10));
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        String str5 = owner0.getAddress();
        String str6 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        owner0.setLastName("hi!");
        owner0.setCity("");
        String str13 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        Integer int13 = visit10.getPetId();
        String str14 = visit10.getDescription();
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        Integer int17 = visit10.getPetId();
        visit10.setId((Integer) 0);
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        owner20.setLastName("");
        Integer int23 = owner20.getId();
        owner20.setAddress("");
        String str26 = owner20.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet28 = owner20.getPet("hi!");
        String str29 = owner20.getFirstName();
        owner20.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet32 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate33 = pet32.getBirthDate();
        owner20.addPet(pet32);
        org.springframework.samples.petclinic.owner.Pet pet35 = new org.springframework.samples.petclinic.owner.Pet();
        String str36 = pet35.toString();
        org.springframework.samples.petclinic.owner.PetType petType37 = pet35.getType();
        org.springframework.samples.petclinic.visit.Visit visit38 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int39 = visit38.getPetId();
        java.time.LocalDate localDate40 = null;
        visit38.setDate(localDate40);
        org.springframework.samples.petclinic.visit.Visit visit42 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int43 = visit42.getPetId();
        java.time.LocalDate localDate44 = null;
        visit42.setDate(localDate44);
        java.time.LocalDate localDate46 = null;
        visit42.setDate(localDate46);
        visit42.setDescription("");
        visit42.setPetId((Integer) (-1));
        visit42.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner54 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet55 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate56 = pet55.getBirthDate();
        String str57 = pet55.getName();
        owner54.addPet(pet55);
        org.springframework.samples.petclinic.visit.Visit visit59 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int60 = visit59.getPetId();
        pet55.addVisit(visit59);
        java.time.LocalDate localDate62 = visit59.getDate();
        visit42.setDate(localDate62);
        visit38.setDate(localDate62);
        pet35.setBirthDate(localDate62);
        pet32.setBirthDate(localDate62);
        visit10.setDate(localDate62);
        String str68 = visit10.getDescription();
        visit10.setId((Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "" + "'", str26.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType12, locale13);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = pet15.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        pet15.setType(petType23);
        org.springframework.samples.petclinic.owner.Owner owner27 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate29 = pet28.getBirthDate();
        String str30 = pet28.getName();
        owner27.addPet(pet28);
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        pet28.addVisit(visit32);
        java.time.LocalDate localDate35 = visit32.getDate();
        pet15.setBirthDate(localDate35);
        org.springframework.samples.petclinic.owner.PetType petType37 = pet15.getType();
        java.util.Locale locale38 = null;
        String str39 = petTypeFormatter1.print(petType37, locale38);
        org.springframework.samples.petclinic.owner.Pet pet40 = new org.springframework.samples.petclinic.owner.Pet();
        String str41 = pet40.toString();
        org.springframework.samples.petclinic.owner.PetType petType42 = null;
        pet40.setType(petType42);
        String str44 = pet40.getName();
        org.springframework.samples.petclinic.owner.Pet pet45 = new org.springframework.samples.petclinic.owner.Pet();
        String str46 = pet45.toString();
        org.springframework.samples.petclinic.owner.PetType petType47 = null;
        pet45.setType(petType47);
        boolean boolean49 = pet45.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository50 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter51 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository50);
        org.springframework.samples.petclinic.owner.PetType petType52 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale53 = null;
        String str54 = petTypeFormatter51.print(petType52, locale53);
        org.springframework.samples.petclinic.owner.PetType petType55 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale56 = null;
        String str57 = petTypeFormatter51.print(petType55, locale56);
        pet45.setType(petType55);
        pet40.setType(petType55);
        petType55.setName("");
        String str62 = petType55.toString();
        java.util.Locale locale63 = null;
        String str64 = petTypeFormatter1.print(petType55, locale63);
        java.util.Locale locale66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType67 = petTypeFormatter1.parse("hi!", locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "" + "'", str62.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "" + "'", str64.equals(""));
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        boolean boolean4 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        pet0.setType(petType10);
        java.time.LocalDate localDate14 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner15 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter17.print(petType18, locale19);
        org.springframework.samples.petclinic.owner.PetRepository petRepository21 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter22 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter22.print(petType23, locale24);
        java.util.Locale locale26 = null;
        String str27 = petTypeFormatter17.print(petType23, locale26);
        org.springframework.samples.petclinic.owner.PetType petType28 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter17.print(petType28, locale29);
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        String str32 = pet31.toString();
        org.springframework.samples.petclinic.owner.PetType petType33 = pet31.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository34 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter35 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository34);
        org.springframework.samples.petclinic.owner.PetType petType36 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter35.print(petType36, locale37);
        org.springframework.samples.petclinic.owner.PetType petType39 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale40 = null;
        String str41 = petTypeFormatter35.print(petType39, locale40);
        pet31.setType(petType39);
        org.springframework.samples.petclinic.owner.Owner owner43 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet44 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate45 = pet44.getBirthDate();
        String str46 = pet44.getName();
        owner43.addPet(pet44);
        org.springframework.samples.petclinic.visit.Visit visit48 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int49 = visit48.getPetId();
        pet44.addVisit(visit48);
        java.time.LocalDate localDate51 = visit48.getDate();
        pet31.setBirthDate(localDate51);
        org.springframework.samples.petclinic.owner.PetType petType53 = pet31.getType();
        java.util.Locale locale54 = null;
        String str55 = petTypeFormatter17.print(petType53, locale54);
        org.springframework.samples.petclinic.owner.Pet pet56 = new org.springframework.samples.petclinic.owner.Pet();
        String str57 = pet56.toString();
        org.springframework.samples.petclinic.owner.PetType petType58 = null;
        pet56.setType(petType58);
        String str60 = pet56.getName();
        org.springframework.samples.petclinic.owner.Pet pet61 = new org.springframework.samples.petclinic.owner.Pet();
        String str62 = pet61.toString();
        org.springframework.samples.petclinic.owner.PetType petType63 = null;
        pet61.setType(petType63);
        boolean boolean65 = pet61.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository66 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter67 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository66);
        org.springframework.samples.petclinic.owner.PetType petType68 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale69 = null;
        String str70 = petTypeFormatter67.print(petType68, locale69);
        org.springframework.samples.petclinic.owner.PetType petType71 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale72 = null;
        String str73 = petTypeFormatter67.print(petType71, locale72);
        pet61.setType(petType71);
        pet56.setType(petType71);
        petType71.setName("");
        String str78 = petType71.toString();
        java.util.Locale locale79 = null;
        String str80 = petTypeFormatter17.print(petType71, locale79);
        pet0.setType(petType71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "" + "'", str78.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "" + "'", str80.equals(""));
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        String str3 = vet0.getLastName();
        vet0.setFirstName("");
        int int6 = vet0.getNrOfSpecialties();
        vet0.setFirstName("hi!");
        int int9 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty10 = null;
        vet0.addSpecialty(specialty10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        String str2 = pet1.toString();
        java.time.LocalDate localDate3 = null;
        pet1.setBirthDate(localDate3);
        pet1.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType7 = null;
        pet1.setType(petType7);
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        pet1.addVisit(visit9);
        visit9.setDescription("");
        org.springframework.samples.petclinic.owner.Owner owner14 = new org.springframework.samples.petclinic.owner.Owner();
        owner14.setLastName("");
        Integer int17 = owner14.getId();
        owner14.setAddress("");
        owner14.setTelephone("");
        String str22 = owner14.getFirstName();
        owner14.setLastName("hi!");
        String str25 = owner14.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet26 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate27 = pet26.getBirthDate();
        pet26.setName("hi!");
        pet26.setId((Integer) 1);
        owner14.addPet(pet26);
        pet26.setName("hi!");
        boolean boolean35 = pet26.isNew();
        org.springframework.samples.petclinic.visit.Visit visit36 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int37 = visit36.getPetId();
        java.time.LocalDate localDate38 = null;
        visit36.setDate(localDate38);
        org.springframework.samples.petclinic.visit.Visit visit40 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int41 = visit40.getPetId();
        java.time.LocalDate localDate42 = null;
        visit40.setDate(localDate42);
        java.time.LocalDate localDate44 = null;
        visit40.setDate(localDate44);
        visit40.setDescription("");
        visit40.setPetId((Integer) (-1));
        visit40.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner52 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet53 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate54 = pet53.getBirthDate();
        String str55 = pet53.getName();
        owner52.addPet(pet53);
        org.springframework.samples.petclinic.visit.Visit visit57 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int58 = visit57.getPetId();
        pet53.addVisit(visit57);
        java.time.LocalDate localDate60 = visit57.getDate();
        visit40.setDate(localDate60);
        visit36.setDate(localDate60);
        pet26.setBirthDate(localDate60);
        org.springframework.samples.petclinic.visit.Visit visit64 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner65 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet66 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate67 = pet66.getBirthDate();
        String str68 = pet66.getName();
        owner65.addPet(pet66);
        org.springframework.samples.petclinic.visit.Visit visit70 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int71 = visit70.getPetId();
        pet66.addVisit(visit70);
        java.time.LocalDate localDate73 = visit70.getDate();
        visit64.setDate(localDate73);
        pet26.setBirthDate(localDate73);
        visit9.setDate(localDate73);
        visit9.setDescription("hi!");
        String str79 = visit9.getDescription();
        org.springframework.validation.Errors errors80 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) str79, errors80);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.lang.String cannot be cast to class org.springframework.samples.petclinic.owner.Pet (java.lang.String is in module java.base of loader 'bootstrap'; org.springframework.samples.petclinic.owner.Pet is in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "" + "'", str25.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str79 + "' != '" + "hi!" + "'", str79.equals("hi!"));
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setCity("");
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        String str2 = visit0.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner3 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet4 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate5 = pet4.getBirthDate();
        String str6 = pet4.getName();
        owner3.addPet(pet4);
        java.time.LocalDate localDate8 = pet4.getBirthDate();
        boolean boolean9 = pet4.isNew();
        org.springframework.samples.petclinic.owner.Owner owner10 = new org.springframework.samples.petclinic.owner.Owner();
        owner10.setLastName("");
        Integer int13 = owner10.getId();
        owner10.setAddress("");
        String str16 = owner10.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet18 = owner10.getPet("hi!");
        String str19 = owner10.getFirstName();
        owner10.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate23 = pet22.getBirthDate();
        owner10.addPet(pet22);
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        String str26 = pet25.toString();
        org.springframework.samples.petclinic.owner.PetType petType27 = pet25.getType();
        org.springframework.samples.petclinic.visit.Visit visit28 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int29 = visit28.getPetId();
        java.time.LocalDate localDate30 = null;
        visit28.setDate(localDate30);
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        java.time.LocalDate localDate34 = null;
        visit32.setDate(localDate34);
        java.time.LocalDate localDate36 = null;
        visit32.setDate(localDate36);
        visit32.setDescription("");
        visit32.setPetId((Integer) (-1));
        visit32.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner44 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet45 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate46 = pet45.getBirthDate();
        String str47 = pet45.getName();
        owner44.addPet(pet45);
        org.springframework.samples.petclinic.visit.Visit visit49 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int50 = visit49.getPetId();
        pet45.addVisit(visit49);
        java.time.LocalDate localDate52 = visit49.getDate();
        visit32.setDate(localDate52);
        visit28.setDate(localDate52);
        pet25.setBirthDate(localDate52);
        pet22.setBirthDate(localDate52);
        pet4.setBirthDate(localDate52);
        visit0.setDate(localDate52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate52);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        String str10 = visit5.getDescription();
        java.time.LocalDate localDate11 = visit5.getDate();
        java.time.LocalDate localDate12 = visit5.getDate();
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate15 = pet14.getBirthDate();
        String str16 = pet14.getName();
        owner13.addPet(pet14);
        org.springframework.samples.petclinic.visit.Visit visit18 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int19 = visit18.getPetId();
        pet14.addVisit(visit18);
        Integer int21 = visit18.getPetId();
        Integer int22 = visit18.getPetId();
        String str23 = visit18.getDescription();
        java.time.LocalDate localDate24 = visit18.getDate();
        visit5.setDate(localDate24);
        Integer int26 = visit5.getPetId();
        Integer int27 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        vet0.setLastName("hi!");
        int int3 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty4 = null;
        vet0.addSpecialty(specialty4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType10, locale13);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = null;
        pet15.setType(petType17);
        String str19 = pet15.getName();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        String str21 = pet20.toString();
        org.springframework.samples.petclinic.owner.PetType petType22 = null;
        pet20.setType(petType22);
        boolean boolean24 = pet20.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository25 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter26 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository25);
        org.springframework.samples.petclinic.owner.PetType petType27 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter26.print(petType27, locale28);
        org.springframework.samples.petclinic.owner.PetType petType30 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter26.print(petType30, locale31);
        pet20.setType(petType30);
        pet15.setType(petType30);
        petType30.setName("");
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter1.print(petType30, locale37);
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        String str40 = pet39.toString();
        org.springframework.samples.petclinic.owner.PetType petType41 = pet39.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository42 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter43 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository42);
        org.springframework.samples.petclinic.owner.PetType petType44 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale45 = null;
        String str46 = petTypeFormatter43.print(petType44, locale45);
        org.springframework.samples.petclinic.owner.PetType petType47 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale48 = null;
        String str49 = petTypeFormatter43.print(petType47, locale48);
        pet39.setType(petType47);
        org.springframework.samples.petclinic.owner.Owner owner51 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet52 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate53 = pet52.getBirthDate();
        String str54 = pet52.getName();
        owner51.addPet(pet52);
        org.springframework.samples.petclinic.visit.Visit visit56 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int57 = visit56.getPetId();
        pet52.addVisit(visit56);
        java.time.LocalDate localDate59 = visit56.getDate();
        pet39.setBirthDate(localDate59);
        org.springframework.samples.petclinic.owner.PetType petType61 = pet39.getType();
        petType61.setName("");
        java.util.Locale locale64 = null;
        String str65 = petTypeFormatter1.print(petType61, locale64);
        org.springframework.samples.petclinic.owner.PetType petType66 = new org.springframework.samples.petclinic.owner.PetType();
        boolean boolean67 = petType66.isNew();
        java.util.Locale locale68 = null;
        String str69 = petTypeFormatter1.print(petType66, locale68);
        java.util.Locale locale71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType72 = petTypeFormatter1.parse("", locale71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "" + "'", str38.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("hi!", true);
        owner0.setTelephone("");
        String str10 = owner0.getCity();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        String str12 = pet11.toString();
        org.springframework.samples.petclinic.owner.PetType petType13 = null;
        pet11.setType(petType13);
        String str15 = pet11.getName();
        boolean boolean16 = pet11.isNew();
        String str17 = pet11.getName();
        owner0.addPet(pet11);
        org.springframework.samples.petclinic.owner.PetRepository petRepository19 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter20 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter20.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetRepository petRepository24 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter25 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter25.print(petType26, locale27);
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter20.print(petType26, locale29);
        org.springframework.samples.petclinic.owner.PetType petType31 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale32 = null;
        String str33 = petTypeFormatter20.print(petType31, locale32);
        org.springframework.samples.petclinic.owner.PetRepository petRepository34 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter35 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository34);
        org.springframework.samples.petclinic.owner.PetType petType36 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter35.print(petType36, locale37);
        org.springframework.samples.petclinic.owner.PetRepository petRepository39 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter40 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository39);
        org.springframework.samples.petclinic.owner.PetType petType41 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter40.print(petType41, locale42);
        org.springframework.samples.petclinic.owner.PetType petType44 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale45 = null;
        String str46 = petTypeFormatter40.print(petType44, locale45);
        java.util.Locale locale47 = null;
        String str48 = petTypeFormatter35.print(petType44, locale47);
        String str49 = petType44.toString();
        java.util.Locale locale50 = null;
        String str51 = petTypeFormatter20.print(petType44, locale50);
        pet11.setType(petType44);
        org.springframework.samples.petclinic.owner.PetType petType53 = pet11.getType();
        org.springframework.samples.petclinic.owner.Pet pet54 = new org.springframework.samples.petclinic.owner.Pet();
        String str55 = pet54.toString();
        org.springframework.samples.petclinic.owner.PetType petType56 = pet54.getType();
        java.time.LocalDate localDate57 = pet54.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner58 = pet54.getOwner();
        String str59 = pet54.toString();
        pet54.setName("hi!");
        pet54.setName("");
        pet54.setName("");
        java.time.LocalDate localDate66 = pet54.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit67 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int68 = visit67.getPetId();
        java.time.LocalDate localDate69 = null;
        visit67.setDate(localDate69);
        java.time.LocalDate localDate71 = null;
        visit67.setDate(localDate71);
        visit67.setDescription("");
        String str75 = visit67.getDescription();
        Integer int76 = visit67.getId();
        pet54.addVisit(visit67);
        visit67.setPetId((Integer) 0);
        pet11.addVisit(visit67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str75 + "' != '" + "" + "'", str75.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int76);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate1 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner2 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate4 = pet3.getBirthDate();
        String str5 = pet3.getName();
        owner2.addPet(pet3);
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        pet3.addVisit(visit7);
        visit7.setDescription("");
        java.time.LocalDate localDate12 = visit7.getDate();
        pet0.setBirthDate(localDate12);
        java.time.LocalDate localDate14 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner15 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner15);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        owner0.setTelephone("hi!");
        String str9 = owner0.getFirstName();
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        org.springframework.samples.petclinic.owner.PetType petType12 = pet10.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository13 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter14 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository13);
        org.springframework.samples.petclinic.owner.PetType petType15 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter14.print(petType15, locale16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter14.print(petType18, locale19);
        pet10.setType(petType18);
        org.springframework.samples.petclinic.owner.Owner owner22 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate24 = pet23.getBirthDate();
        String str25 = pet23.getName();
        owner22.addPet(pet23);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int28 = visit27.getPetId();
        pet23.addVisit(visit27);
        java.time.LocalDate localDate30 = visit27.getDate();
        pet10.setBirthDate(localDate30);
        java.time.LocalDate localDate32 = pet10.getBirthDate();
        org.springframework.samples.petclinic.owner.PetType petType33 = pet10.getType();
        owner0.addPet(pet10);
        owner0.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType33);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        Integer int7 = pet0.getId();
        java.time.LocalDate localDate8 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.PetRepository petRepository9 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter10 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter10.print(petType11, locale12);
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter15.print(petType16, locale17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter15.print(petType19, locale20);
        org.springframework.samples.petclinic.owner.PetType petType22 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter15.print(petType22, locale23);
        java.util.Locale locale25 = null;
        String str26 = petTypeFormatter10.print(petType22, locale25);
        org.springframework.samples.petclinic.owner.PetRepository petRepository27 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter28 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository27);
        org.springframework.samples.petclinic.owner.PetType petType29 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale30 = null;
        String str31 = petTypeFormatter28.print(petType29, locale30);
        org.springframework.samples.petclinic.owner.PetType petType32 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale33 = null;
        String str34 = petTypeFormatter28.print(petType32, locale33);
        org.springframework.samples.petclinic.owner.PetRepository petRepository35 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter36 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository35);
        org.springframework.samples.petclinic.owner.PetType petType37 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale38 = null;
        String str39 = petTypeFormatter36.print(petType37, locale38);
        org.springframework.samples.petclinic.owner.PetRepository petRepository40 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter41 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository40);
        org.springframework.samples.petclinic.owner.PetType petType42 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale43 = null;
        String str44 = petTypeFormatter41.print(petType42, locale43);
        java.util.Locale locale45 = null;
        String str46 = petTypeFormatter36.print(petType42, locale45);
        String str47 = petType42.toString();
        java.util.Locale locale48 = null;
        String str49 = petTypeFormatter28.print(petType42, locale48);
        java.util.Locale locale50 = null;
        String str51 = petTypeFormatter10.print(petType42, locale50);
        pet0.setType(petType42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.springframework.samples.petclinic.model.Person person0 = new org.springframework.samples.petclinic.model.Person();
        person0.setLastName("");
        person0.setId((Integer) 1);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        String str4 = owner0.getCity();
        String str5 = owner0.getCity();
        String str6 = owner0.getLastName();
        owner0.setAddress("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }
}

