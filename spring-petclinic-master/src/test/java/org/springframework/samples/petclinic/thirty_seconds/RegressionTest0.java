package org.springframework.samples.petclinic.thirty_seconds;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Class<?> wildcardClass1 = visit0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        // The following exception was thrown during execution in test generation
        try {
            String str3 = petType2.getName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.validation.Errors errors2 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) owner1, errors2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.owner.Owner cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.owner.Owner and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        Class<?> wildcardClass5 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        String str3 = pet0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.PetRepository petRepository1 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter2 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository1);
        org.springframework.validation.Errors errors3 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) petRepository1, errors3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType7 = petTypeFormatter1.parse("", locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        Integer int5 = pet0.getId();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        org.springframework.samples.petclinic.owner.PetType petType8 = pet6.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository9 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter10 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter10.print(petType11, locale12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter10.print(petType14, locale15);
        pet6.setType(petType14);
        pet0.setType(petType14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        Class<?> wildcardClass10 = visit5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        String str2 = owner1.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        org.springframework.samples.petclinic.owner.PetType petType5 = null;
        pet3.setType(petType5);
        String str7 = pet3.toString();
        owner1.addPet(pet3);
        org.springframework.validation.Errors errors9 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) owner1, errors9);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.owner.Owner cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.owner.Owner and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType7 = petTypeFormatter1.parse("hi!", locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        java.time.LocalDate localDate4 = pet0.getBirthDate();
        String str5 = pet0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        pet2.addVisit(visit6);
        Integer int9 = visit6.getPetId();
        String str10 = visit6.getDescription();
        java.time.LocalDate localDate11 = visit6.getDate();
        org.springframework.validation.Errors errors12 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) localDate11, errors12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.time.LocalDate cannot be cast to class org.springframework.samples.petclinic.owner.Pet (java.time.LocalDate is in module java.base of loader 'bootstrap'; org.springframework.samples.petclinic.owner.Pet is in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.visit.Visit visit1 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int2 = visit1.getPetId();
        java.time.LocalDate localDate3 = null;
        visit1.setDate(localDate3);
        java.time.LocalDate localDate5 = null;
        visit1.setDate(localDate5);
        visit1.setPetId((Integer) (-1));
        org.springframework.validation.Errors errors9 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) visit1, errors9);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.visit.Visit cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.visit.Visit and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.validation.Errors errors2 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) true, errors2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.lang.Boolean cannot be cast to class org.springframework.samples.petclinic.owner.Pet (java.lang.Boolean is in module java.base of loader 'bootstrap'; org.springframework.samples.petclinic.owner.Pet is in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        String str6 = visit0.getDescription();
        String str7 = visit0.getDescription();
        Class<?> wildcardClass8 = visit0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        // The following exception was thrown during execution in test generation
        try {
            Class<?> wildcardClass3 = petType2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.vet.Vet vet1 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty2 = null;
        vet1.addSpecialty(specialty2);
        org.springframework.validation.Errors errors4 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) specialty2, errors4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        owner0.setTelephone("hi!");
        owner0.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType10, locale13);
        java.util.Locale locale16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType17 = petTypeFormatter1.parse("", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        boolean boolean2 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetType petType3 = pet0.getType();
        java.time.LocalDate localDate4 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        Class<?> wildcardClass5 = pet0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty2 = null;
        vet0.addSpecialty(specialty2);
        int int4 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        String str4 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.springframework.samples.petclinic.model.NamedEntity namedEntity0 = new org.springframework.samples.petclinic.model.NamedEntity();
        namedEntity0.setName("hi!");
        Class<?> wildcardClass3 = namedEntity0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        Class<?> wildcardClass11 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType10, locale13);
        java.util.Locale locale16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType17 = petTypeFormatter1.parse("hi!", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        java.time.LocalDate localDate5 = null;
        pet0.setBirthDate(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        java.time.LocalDate localDate5 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        owner0.setTelephone("hi!");
        owner0.setId((Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        String str1 = vet0.getFirstName();
        int int2 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        String str5 = vet0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        pet2.addVisit(visit6);
        Integer int9 = visit6.getPetId();
        String str10 = visit6.getDescription();
        java.time.LocalDate localDate11 = visit6.getDate();
        org.springframework.validation.Errors errors12 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) visit6, errors12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.visit.Visit cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.visit.Visit and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.springframework.samples.petclinic.model.Person person0 = new org.springframework.samples.petclinic.model.Person();
        person0.setLastName("");
        String str3 = person0.getLastName();
        person0.setLastName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        String str1 = vet0.getFirstName();
        String str2 = vet0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate1 = pet0.getBirthDate();
        String str2 = pet0.getName();
        pet0.setName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        owner0.setLastName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        java.util.Locale locale3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType4 = petTypeFormatter1.parse("", locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet9 = owner0.getPet("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        pet5.setId((Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter1.print(petType8, locale9);
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType13 = petTypeFormatter1.parse("", locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        Integer int1 = pet0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        String str2 = owner1.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        org.springframework.samples.petclinic.owner.PetType petType5 = null;
        pet3.setType(petType5);
        String str7 = pet3.toString();
        owner1.addPet(pet3);
        owner1.setTelephone("");
        String str11 = owner1.getFirstName();
        org.springframework.validation.Errors errors12 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) str11, errors12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        visit13.setDescription("");
        java.time.LocalDate localDate18 = visit13.getDate();
        pet5.setBirthDate(localDate18);
        org.springframework.samples.petclinic.owner.Owner owner20 = pet5.getOwner();
        Integer int21 = pet5.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setFirstName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        String str8 = visit0.getDescription();
        visit0.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setAddress("hi!");
        String str16 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        boolean boolean3 = vet0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        String str6 = visit0.getDescription();
        String str7 = visit0.getDescription();
        String str8 = visit0.getDescription();
        Class<?> wildcardClass9 = visit0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = null;
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            String str14 = petTypeFormatter1.print(petType12, locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        visit0.setDescription("hi!");
        String str3 = visit0.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!" + "'", str3.equals("hi!"));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        visit0.setPetId((Integer) (-1));
        visit0.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        java.time.LocalDate localDate20 = visit17.getDate();
        visit0.setDate(localDate20);
        java.time.LocalDate localDate22 = visit0.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        owner0.setTelephone("hi!");
        String str13 = owner0.getTelephone();
        String str14 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!" + "'", str13.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate9 = pet8.getBirthDate();
        pet8.setName("hi!");
        pet8.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter17.print(petType18, locale19);
        org.springframework.samples.petclinic.owner.PetRepository petRepository21 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter22 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter22.print(petType23, locale24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter22.print(petType26, locale27);
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter17.print(petType26, locale29);
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter15.print(petType26, locale31);
        pet8.setType(petType26);
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter1.print(petType26, locale34);
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType38 = petTypeFormatter1.parse("hi!", locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        Integer int10 = visit5.getPetId();
        visit5.setPetId((Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.validation.Errors errors2 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) (-1), errors2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.lang.Integer cannot be cast to class org.springframework.samples.petclinic.owner.Pet (java.lang.Integer is in module java.base of loader 'bootstrap'; org.springframework.samples.petclinic.owner.Pet is in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter1.print(petType8, locale9);
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType13 = petTypeFormatter1.parse("hi!", locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.springframework.samples.petclinic.owner.PetType petType0 = new org.springframework.samples.petclinic.owner.PetType();
        String str1 = petType0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setTelephone("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        String str14 = visit11.getDescription();
        visit11.setPetId((Integer) (-1));
        pet1.addVisit(visit11);
        java.time.LocalDate localDate18 = pet1.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        String str9 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        owner0.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        java.time.LocalDate localDate6 = null;
        visit4.setDate(localDate6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        java.time.LocalDate localDate10 = null;
        visit8.setDate(localDate10);
        java.time.LocalDate localDate12 = null;
        visit8.setDate(localDate12);
        visit8.setDescription("");
        visit8.setPetId((Integer) (-1));
        visit8.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate22 = pet21.getBirthDate();
        String str23 = pet21.getName();
        owner20.addPet(pet21);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet21.addVisit(visit25);
        java.time.LocalDate localDate28 = visit25.getDate();
        visit8.setDate(localDate28);
        visit4.setDate(localDate28);
        visit4.setDescription("");
        pet0.addVisit(visit4);
        visit4.setDescription("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        java.time.LocalDate localDate7 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet5 = owner0.getPet("hi!");
        String str6 = owner0.getTelephone();
        String str7 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetRepository petRepository2 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter3 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository2);
        org.springframework.samples.petclinic.owner.PetType petType4 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale5 = null;
        String str6 = petTypeFormatter3.print(petType4, locale5);
        org.springframework.samples.petclinic.owner.PetRepository petRepository7 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter8 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter8.print(petType9, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter8.print(petType12, locale13);
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter3.print(petType12, locale15);
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter1.print(petType12, locale17);
        org.springframework.samples.petclinic.owner.PetRepository petRepository19 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter20 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter20.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetType petType24 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale25 = null;
        String str26 = petTypeFormatter20.print(petType24, locale25);
        org.springframework.samples.petclinic.owner.PetType petType27 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter20.print(petType27, locale28);
        org.springframework.samples.petclinic.owner.PetRepository petRepository30 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter31 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository30);
        org.springframework.samples.petclinic.owner.PetType petType32 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale33 = null;
        String str34 = petTypeFormatter31.print(petType32, locale33);
        org.springframework.samples.petclinic.owner.PetRepository petRepository35 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter36 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository35);
        org.springframework.samples.petclinic.owner.PetType petType37 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale38 = null;
        String str39 = petTypeFormatter36.print(petType37, locale38);
        java.util.Locale locale40 = null;
        String str41 = petTypeFormatter31.print(petType37, locale40);
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter20.print(petType37, locale42);
        java.util.Locale locale44 = null;
        String str45 = petTypeFormatter1.print(petType37, locale44);
        java.util.Locale locale47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType48 = petTypeFormatter1.parse("", locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        visit0.setPetId((Integer) (-1));
        visit0.setDescription("hi!");
        Integer int12 = visit0.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12.equals((-1)));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        String str3 = vet0.getLastName();
        int int4 = vet0.getNrOfSpecialties();
        int int5 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        String str4 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        String str7 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty8 = null;
        vet0.addSpecialty(specialty8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        String str2 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        org.springframework.samples.petclinic.owner.Owner owner4 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate6 = pet5.getBirthDate();
        String str7 = pet5.getName();
        owner4.addPet(pet5);
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        pet5.addVisit(visit9);
        Integer int12 = visit9.getPetId();
        Integer int13 = visit9.getPetId();
        boolean boolean14 = visit9.isNew();
        Integer int15 = visit9.getId();
        String str16 = visit9.getDescription();
        pet0.addVisit(visit9);
        Class<?> wildcardClass18 = visit9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        int int3 = vet0.getNrOfSpecialties();
        String str4 = vet0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        String str9 = owner0.getTelephone();
        owner0.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        Object obj1 = null;
        org.springframework.validation.Errors errors2 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate(obj1, errors2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        String str3 = owner0.getTelephone();
        Integer int4 = owner0.getId();
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("");
        Class<?> wildcardClass7 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        owner0.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.springframework.samples.petclinic.vet.Vets vets0 = new org.springframework.samples.petclinic.vet.Vets();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList1 = vets0.getVetList();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList2 = vets0.getVetList();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList3 = vets0.getVetList();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList4 = vets0.getVetList();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList5 = vets0.getVetList();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList6 = vets0.getVetList();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList6);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        java.time.LocalDate localDate12 = visit5.getDate();
        visit5.setPetId((Integer) 1);
        visit5.setPetId((Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        String str5 = owner0.getLastName();
        Integer int6 = owner0.getId();
        owner0.setCity("hi!");
        String str9 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        owner1.setCity("");
        owner1.setAddress("");
        String str10 = owner1.getCity();
        org.springframework.validation.Errors errors11 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) str10, errors11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.lang.String cannot be cast to class org.springframework.samples.petclinic.owner.Pet (java.lang.String is in module java.base of loader 'bootstrap'; org.springframework.samples.petclinic.owner.Pet is in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        Class<?> wildcardClass1 = vet0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        String str4 = owner0.getAddress();
        String str5 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        String str5 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        java.time.LocalDate localDate8 = null;
        pet6.setBirthDate(localDate8);
        String str10 = pet6.getName();
        org.springframework.samples.petclinic.owner.Owner owner11 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        String str14 = pet12.getName();
        owner11.addPet(pet12);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        pet12.addVisit(visit16);
        Integer int19 = visit16.getPetId();
        String str20 = visit16.getDescription();
        java.time.LocalDate localDate21 = visit16.getDate();
        pet6.addVisit(visit16);
        owner0.addPet(pet6);
        String str24 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        owner5.setFirstName("");
        String str11 = owner5.getFirstName();
        String str12 = owner5.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        vet0.setLastName("");
        int int5 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = pet1.getBirthDate();
        String str9 = pet1.toString();
        pet1.setName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = pet1.getBirthDate();
        // The following exception was thrown during execution in test generation
        try {
            Class<?> wildcardClass9 = localDate8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("hi!", true);
        owner0.setTelephone("");
        owner0.setTelephone("");
        owner0.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        org.springframework.samples.petclinic.owner.Owner owner6 = pet2.getOwner();
        String str7 = owner6.getAddress();
        owner6.setCity("hi!");
        String str10 = owner6.getAddress();
        owner6.setFirstName("");
        owner6.setCity("hi!");
        org.springframework.validation.Errors errors15 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) owner6, errors15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.owner.Owner cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.owner.Owner and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        String str13 = pet9.getName();
        owner0.addPet(pet9);
        String str15 = owner0.getFirstName();
        org.springframework.samples.petclinic.owner.Pet pet18 = owner0.getPet("", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet18);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.springframework.samples.petclinic.vet.Vets vets0 = new org.springframework.samples.petclinic.vet.Vets();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList1 = vets0.getVetList();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList2 = vets0.getVetList();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList3 = vets0.getVetList();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList4 = vets0.getVetList();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList5 = vets0.getVetList();
        Class<?> wildcardClass6 = vetList5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        visit5.setPetId((Integer) (-1));
        visit5.setPetId((Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        pet0.setName("hi!");
        pet0.setId((Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        pet0.setName("");
        java.time.LocalDate localDate10 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType14 = petTypeFormatter1.parse("hi!", locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        String str2 = pet1.toString();
        org.springframework.samples.petclinic.owner.PetType petType3 = pet1.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository4 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter5 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository4);
        org.springframework.samples.petclinic.owner.PetType petType6 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale7 = null;
        String str8 = petTypeFormatter5.print(petType6, locale7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter5.print(petType9, locale10);
        pet1.setType(petType9);
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        String str14 = pet13.toString();
        org.springframework.samples.petclinic.owner.PetType petType15 = null;
        pet13.setType(petType15);
        boolean boolean17 = pet13.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        pet13.setType(petType23);
        pet1.setType(petType23);
        org.springframework.validation.Errors errors28 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) petType23, errors28);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.owner.PetType cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.owner.PetType and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        org.springframework.samples.petclinic.owner.PetType petType8 = pet1.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType8);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        java.time.LocalDate localDate14 = visit11.getDate();
        visit0.setDate(localDate14);
        visit0.setPetId((Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        String str4 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        org.springframework.samples.petclinic.vet.Specialty specialty7 = null;
        vet0.addSpecialty(specialty7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        java.time.LocalDate localDate5 = null;
        pet3.setBirthDate(localDate5);
        String str7 = pet3.getName();
        owner0.addPet(pet3);
        String str9 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        owner5.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet13 = owner5.getPet("", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet13);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        pet0.setName("");
        pet0.setName("");
        java.time.LocalDate localDate12 = pet0.getBirthDate();
        // The following exception was thrown during execution in test generation
        try {
            Class<?> wildcardClass13 = localDate12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        owner1.setId((Integer) 1);
        String str4 = owner1.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet6 = owner1.getPet("hi!");
        org.springframework.validation.Errors errors7 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) pet6, errors7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        java.time.LocalDate localDate10 = visit5.getDate();
        visit5.setPetId((Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        Integer int5 = pet0.getId();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner7 = pet0.getOwner();
        // The following exception was thrown during execution in test generation
        try {
            owner7.setId((Integer) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner7);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        java.time.LocalDate localDate6 = null;
        visit4.setDate(localDate6);
        java.time.LocalDate localDate8 = null;
        visit4.setDate(localDate8);
        visit4.setDescription("");
        visit4.setPetId((Integer) (-1));
        visit4.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner16 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate18 = pet17.getBirthDate();
        String str19 = pet17.getName();
        owner16.addPet(pet17);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet17.addVisit(visit21);
        java.time.LocalDate localDate24 = visit21.getDate();
        visit4.setDate(localDate24);
        visit0.setDate(localDate24);
        java.time.LocalDate localDate27 = visit0.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        pet0.setName("");
        pet0.setName("");
        java.time.LocalDate localDate12 = pet0.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        java.time.LocalDate localDate15 = null;
        visit13.setDate(localDate15);
        java.time.LocalDate localDate17 = null;
        visit13.setDate(localDate17);
        visit13.setDescription("");
        visit13.setPetId((Integer) (-1));
        visit13.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner25 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet26 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate27 = pet26.getBirthDate();
        String str28 = pet26.getName();
        owner25.addPet(pet26);
        org.springframework.samples.petclinic.visit.Visit visit30 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int31 = visit30.getPetId();
        pet26.addVisit(visit30);
        java.time.LocalDate localDate33 = visit30.getDate();
        visit13.setDate(localDate33);
        pet0.setBirthDate(localDate33);
        org.springframework.samples.petclinic.owner.Pet pet36 = new org.springframework.samples.petclinic.owner.Pet();
        String str37 = pet36.toString();
        org.springframework.samples.petclinic.owner.PetType petType38 = pet36.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository39 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter40 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository39);
        org.springframework.samples.petclinic.owner.PetType petType41 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter40.print(petType41, locale42);
        org.springframework.samples.petclinic.owner.PetType petType44 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale45 = null;
        String str46 = petTypeFormatter40.print(petType44, locale45);
        pet36.setType(petType44);
        pet0.setType(petType44);
        org.springframework.samples.petclinic.owner.Owner owner49 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner49);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        boolean boolean5 = owner0.isNew();
        String str6 = owner0.getFirstName();
        Class<?> wildcardClass7 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        Integer int13 = visit10.getPetId();
        String str14 = visit10.getDescription();
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        java.time.LocalDate localDate17 = pet0.getBirthDate();
        Integer int18 = pet0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        String str7 = owner6.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        String str9 = pet8.toString();
        org.springframework.samples.petclinic.owner.PetType petType10 = null;
        pet8.setType(petType10);
        String str12 = pet8.toString();
        owner6.addPet(pet8);
        owner6.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet16 = new org.springframework.samples.petclinic.owner.Pet();
        String str17 = pet16.toString();
        boolean boolean18 = pet16.isNew();
        owner6.addPet(pet16);
        owner0.addPet(pet16);
        String str21 = pet16.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        String str9 = owner0.getFirstName();
        owner0.setCity("");
        String str12 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        pet0.setName("");
        pet0.setName("");
        Integer int12 = pet0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.springframework.samples.petclinic.model.NamedEntity namedEntity0 = new org.springframework.samples.petclinic.model.NamedEntity();
        namedEntity0.setName("hi!");
        String str3 = namedEntity0.getName();
        String str4 = namedEntity0.getName();
        String str5 = namedEntity0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!" + "'", str3.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        owner1.setLastName("");
        Integer int4 = owner1.getId();
        owner1.setAddress("");
        owner1.setTelephone("");
        org.springframework.validation.Errors errors9 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) owner1, errors9);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.owner.Owner cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.owner.Owner and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        Integer int11 = owner0.getId();
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        owner12.setLastName("");
        Integer int15 = owner12.getId();
        owner12.setAddress("");
        owner12.setTelephone("");
        String str20 = owner12.getFirstName();
        owner12.setLastName("hi!");
        String str23 = owner12.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet24 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate25 = pet24.getBirthDate();
        pet24.setName("hi!");
        pet24.setId((Integer) 1);
        owner12.addPet(pet24);
        owner0.addPet(pet24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate25);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        java.time.LocalDate localDate6 = null;
        visit4.setDate(localDate6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        java.time.LocalDate localDate10 = null;
        visit8.setDate(localDate10);
        java.time.LocalDate localDate12 = null;
        visit8.setDate(localDate12);
        visit8.setDescription("");
        visit8.setPetId((Integer) (-1));
        visit8.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate22 = pet21.getBirthDate();
        String str23 = pet21.getName();
        owner20.addPet(pet21);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet21.addVisit(visit25);
        java.time.LocalDate localDate28 = visit25.getDate();
        visit8.setDate(localDate28);
        visit4.setDate(localDate28);
        visit4.setDescription("");
        pet0.addVisit(visit4);
        boolean boolean34 = pet0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        String str9 = visit5.getDescription();
        visit5.setPetId((Integer) (-1));
        visit5.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        owner0.setTelephone("");
        Class<?> wildcardClass4 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        Integer int12 = visit5.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate15 = pet14.getBirthDate();
        String str16 = pet14.getName();
        owner13.addPet(pet14);
        org.springframework.samples.petclinic.visit.Visit visit18 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int19 = visit18.getPetId();
        pet14.addVisit(visit18);
        Integer int21 = visit18.getPetId();
        String str22 = visit18.getDescription();
        Integer int23 = visit18.getPetId();
        java.time.LocalDate localDate24 = visit18.getDate();
        visit5.setDate(localDate24);
        visit5.setPetId((Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        visit0.setPetId((Integer) 10);
        java.time.LocalDate localDate10 = visit0.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        Integer int10 = visit5.getPetId();
        visit5.setPetId((Integer) (-1));
        visit5.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        visit13.setDescription("");
        java.time.LocalDate localDate18 = visit13.getDate();
        pet5.setBirthDate(localDate18);
        org.springframework.samples.petclinic.owner.Owner owner20 = pet5.getOwner();
        owner20.setAddress("");
        Class<?> wildcardClass23 = owner20.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("hi!");
        String str7 = owner0.getCity();
        owner0.setFirstName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.model.NamedEntity namedEntity1 = new org.springframework.samples.petclinic.model.NamedEntity();
        String str2 = namedEntity1.toString();
        org.springframework.validation.Errors errors3 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) namedEntity1, errors3);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.model.NamedEntity cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.model.NamedEntity and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        owner5.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        String str4 = owner0.getCity();
        Class<?> wildcardClass5 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        String str9 = owner0.getFirstName();
        owner0.setCity("");
        owner0.setId((Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.visit.Visit visit1 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int2 = visit1.getPetId();
        java.time.LocalDate localDate3 = null;
        visit1.setDate(localDate3);
        org.springframework.validation.Errors errors5 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) localDate3, errors5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType5 = pet0.getType();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        java.time.LocalDate localDate9 = null;
        visit7.setDate(localDate9);
        java.time.LocalDate localDate11 = null;
        visit7.setDate(localDate11);
        Integer int13 = visit7.getPetId();
        pet0.addVisit(visit7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        owner0.setFirstName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType14 = petTypeFormatter1.parse("", locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        owner5.setCity("hi!");
        owner5.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        String str12 = visit5.getDescription();
        visit5.setId((Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.vet.Vet vet1 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty2 = null;
        vet1.addSpecialty(specialty2);
        org.springframework.samples.petclinic.vet.Specialty specialty4 = null;
        vet1.addSpecialty(specialty4);
        vet1.setFirstName("hi!");
        int int8 = vet1.getNrOfSpecialties();
        int int9 = vet1.getNrOfSpecialties();
        org.springframework.validation.Errors errors10 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) int9, errors10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.lang.Integer cannot be cast to class org.springframework.samples.petclinic.owner.Pet (java.lang.Integer is in module java.base of loader 'bootstrap'; org.springframework.samples.petclinic.owner.Pet is in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        org.springframework.samples.petclinic.owner.Owner owner6 = pet2.getOwner();
        boolean boolean7 = owner6.isNew();
        String str8 = owner6.getTelephone();
        org.springframework.validation.Errors errors9 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) str8, errors9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        String str2 = pet1.toString();
        org.springframework.samples.petclinic.owner.PetType petType3 = null;
        pet1.setType(petType3);
        boolean boolean5 = pet1.isNew();
        org.springframework.samples.petclinic.owner.PetType petType6 = pet1.getType();
        org.springframework.validation.Errors errors7 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) petType6, errors7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType6);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        Integer int5 = pet0.getId();
        String str6 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner7 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner7);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner5 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType6 = pet0.getType();
        String str7 = pet0.getName();
        pet0.setId((Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        Integer int13 = visit10.getPetId();
        String str14 = visit10.getDescription();
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        java.time.LocalDate localDate17 = pet0.getBirthDate();
        java.time.LocalDate localDate18 = pet0.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit19 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int20 = visit19.getPetId();
        java.time.LocalDate localDate21 = null;
        visit19.setDate(localDate21);
        org.springframework.samples.petclinic.visit.Visit visit23 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int24 = visit23.getPetId();
        java.time.LocalDate localDate25 = null;
        visit23.setDate(localDate25);
        java.time.LocalDate localDate27 = null;
        visit23.setDate(localDate27);
        visit23.setDescription("");
        visit23.setPetId((Integer) (-1));
        visit23.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner35 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet36 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate37 = pet36.getBirthDate();
        String str38 = pet36.getName();
        owner35.addPet(pet36);
        org.springframework.samples.petclinic.visit.Visit visit40 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int41 = visit40.getPetId();
        pet36.addVisit(visit40);
        java.time.LocalDate localDate43 = visit40.getDate();
        visit23.setDate(localDate43);
        visit19.setDate(localDate43);
        pet0.setBirthDate(localDate43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate43);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        java.time.LocalDate localDate12 = visit5.getDate();
        visit5.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        String str1 = vet0.getFirstName();
        String str2 = vet0.getFirstName();
        int int3 = vet0.getNrOfSpecialties();
        int int4 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        String str3 = vet0.getLastName();
        vet0.setFirstName("");
        String str6 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty7 = null;
        vet0.addSpecialty(specialty7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        String str8 = owner0.getLastName();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet11 = owner0.getPet("hi!", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        pet2.addVisit(visit6);
        Integer int9 = visit6.getPetId();
        Integer int10 = visit6.getPetId();
        boolean boolean11 = visit6.isNew();
        Integer int12 = visit6.getId();
        org.springframework.validation.Errors errors13 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) visit6, errors13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.visit.Visit cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.visit.Visit and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        Integer int12 = visit5.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate15 = pet14.getBirthDate();
        String str16 = pet14.getName();
        owner13.addPet(pet14);
        org.springframework.samples.petclinic.visit.Visit visit18 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int19 = visit18.getPetId();
        pet14.addVisit(visit18);
        Integer int21 = visit18.getPetId();
        String str22 = visit18.getDescription();
        Integer int23 = visit18.getPetId();
        java.time.LocalDate localDate24 = visit18.getDate();
        visit5.setDate(localDate24);
        Integer int26 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType5 = pet0.getType();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner7 = pet0.getOwner();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = owner7.isNew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner7);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        boolean boolean13 = pet9.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter15.print(petType16, locale17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter15.print(petType19, locale20);
        pet9.setType(petType19);
        owner0.addPet(pet9);
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        String str8 = owner0.getLastName();
        owner0.setFirstName("");
        String str11 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        String str13 = pet9.getName();
        owner0.addPet(pet9);
        String str15 = owner0.getFirstName();
        owner0.setId((Integer) 100);
        String str18 = owner0.getCity();
        String str19 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "hi!" + "'", str19.equals("hi!"));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        java.time.LocalDate localDate6 = null;
        visit4.setDate(localDate6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        java.time.LocalDate localDate10 = null;
        visit8.setDate(localDate10);
        java.time.LocalDate localDate12 = null;
        visit8.setDate(localDate12);
        visit8.setDescription("");
        visit8.setPetId((Integer) (-1));
        visit8.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate22 = pet21.getBirthDate();
        String str23 = pet21.getName();
        owner20.addPet(pet21);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet21.addVisit(visit25);
        java.time.LocalDate localDate28 = visit25.getDate();
        visit8.setDate(localDate28);
        visit4.setDate(localDate28);
        visit4.setDescription("");
        pet0.addVisit(visit4);
        org.springframework.samples.petclinic.owner.Owner owner34 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet35 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate36 = pet35.getBirthDate();
        String str37 = pet35.getName();
        owner34.addPet(pet35);
        org.springframework.samples.petclinic.visit.Visit visit39 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int40 = visit39.getPetId();
        pet35.addVisit(visit39);
        visit39.setDescription("");
        java.time.LocalDate localDate44 = visit39.getDate();
        visit4.setDate(localDate44);
        org.springframework.samples.petclinic.visit.Visit visit46 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int47 = visit46.getPetId();
        java.time.LocalDate localDate48 = null;
        visit46.setDate(localDate48);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int51 = visit50.getPetId();
        java.time.LocalDate localDate52 = null;
        visit50.setDate(localDate52);
        java.time.LocalDate localDate54 = null;
        visit50.setDate(localDate54);
        visit50.setDescription("");
        visit50.setPetId((Integer) (-1));
        visit50.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner62 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet63 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate64 = pet63.getBirthDate();
        String str65 = pet63.getName();
        owner62.addPet(pet63);
        org.springframework.samples.petclinic.visit.Visit visit67 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int68 = visit67.getPetId();
        pet63.addVisit(visit67);
        java.time.LocalDate localDate70 = visit67.getDate();
        visit50.setDate(localDate70);
        visit46.setDate(localDate70);
        visit4.setDate(localDate70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate70);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        java.time.LocalDate localDate5 = null;
        pet3.setBirthDate(localDate5);
        String str7 = pet3.getName();
        owner0.addPet(pet3);
        owner0.setLastName("");
        Class<?> wildcardClass11 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        String str11 = owner0.getFirstName();
        owner0.setId((Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        Class<?> wildcardClass5 = petType2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        boolean boolean4 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        pet0.setType(petType10);
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        java.time.LocalDate localDate16 = null;
        pet14.setBirthDate(localDate16);
        org.springframework.samples.petclinic.owner.Owner owner18 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate20 = pet19.getBirthDate();
        String str21 = pet19.getName();
        owner18.addPet(pet19);
        org.springframework.samples.petclinic.visit.Visit visit23 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int24 = visit23.getPetId();
        pet19.addVisit(visit23);
        Integer int26 = visit23.getPetId();
        Integer int27 = visit23.getPetId();
        boolean boolean28 = visit23.isNew();
        Integer int29 = visit23.getId();
        String str30 = visit23.getDescription();
        pet14.addVisit(visit23);
        pet0.addVisit(visit23);
        java.time.LocalDate localDate33 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate33);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        Integer int11 = owner0.getId();
        String str12 = owner0.getTelephone();
        String str13 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        String str5 = owner0.getTelephone();
        String str6 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        boolean boolean4 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        pet0.setType(petType10);
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        java.time.LocalDate localDate16 = null;
        pet14.setBirthDate(localDate16);
        org.springframework.samples.petclinic.owner.Owner owner18 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate20 = pet19.getBirthDate();
        String str21 = pet19.getName();
        owner18.addPet(pet19);
        org.springframework.samples.petclinic.visit.Visit visit23 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int24 = visit23.getPetId();
        pet19.addVisit(visit23);
        Integer int26 = visit23.getPetId();
        Integer int27 = visit23.getPetId();
        boolean boolean28 = visit23.isNew();
        Integer int29 = visit23.getId();
        String str30 = visit23.getDescription();
        pet14.addVisit(visit23);
        pet0.addVisit(visit23);
        org.springframework.samples.petclinic.visit.Visit visit33 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int34 = visit33.getPetId();
        java.time.LocalDate localDate35 = null;
        visit33.setDate(localDate35);
        java.time.LocalDate localDate37 = null;
        visit33.setDate(localDate37);
        org.springframework.samples.petclinic.owner.Owner owner39 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet40 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate41 = pet40.getBirthDate();
        String str42 = pet40.getName();
        owner39.addPet(pet40);
        org.springframework.samples.petclinic.visit.Visit visit44 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int45 = visit44.getPetId();
        pet40.addVisit(visit44);
        java.time.LocalDate localDate47 = visit44.getDate();
        visit33.setDate(localDate47);
        visit33.setPetId((Integer) 1);
        pet0.addVisit(visit33);
        org.springframework.samples.petclinic.owner.Pet pet52 = new org.springframework.samples.petclinic.owner.Pet();
        String str53 = pet52.toString();
        org.springframework.samples.petclinic.owner.PetType petType54 = pet52.getType();
        java.time.LocalDate localDate55 = pet52.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner56 = pet52.getOwner();
        String str57 = pet52.toString();
        java.time.LocalDate localDate58 = pet52.getBirthDate();
        Integer int59 = pet52.getId();
        org.springframework.samples.petclinic.visit.Visit visit60 = new org.springframework.samples.petclinic.visit.Visit();
        visit60.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit63 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int64 = visit63.getPetId();
        java.time.LocalDate localDate65 = null;
        visit63.setDate(localDate65);
        java.time.LocalDate localDate67 = null;
        visit63.setDate(localDate67);
        org.springframework.samples.petclinic.owner.Owner owner69 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet70 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate71 = pet70.getBirthDate();
        String str72 = pet70.getName();
        owner69.addPet(pet70);
        org.springframework.samples.petclinic.visit.Visit visit74 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int75 = visit74.getPetId();
        pet70.addVisit(visit74);
        java.time.LocalDate localDate77 = visit74.getDate();
        visit63.setDate(localDate77);
        visit60.setDate(localDate77);
        pet52.setBirthDate(localDate77);
        visit33.setDate(localDate77);
        visit33.setPetId((Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate77);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        java.time.LocalDate localDate8 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        String str8 = owner0.getLastName();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet11 = owner0.getPet("", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        owner0.setTelephone("hi!");
        owner0.setLastName("");
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty2 = null;
        vet0.addSpecialty(specialty2);
        org.springframework.samples.petclinic.vet.Specialty specialty4 = null;
        vet0.addSpecialty(specialty4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        org.springframework.samples.petclinic.visit.Visit visit14 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int15 = visit14.getPetId();
        pet10.addVisit(visit14);
        String str17 = pet10.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        String str9 = owner0.getFirstName();
        owner0.setCity("");
        owner0.setAddress("hi!");
        boolean boolean14 = owner0.isNew();
        owner0.setFirstName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet9 = owner0.getPet("hi!", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet9);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        boolean boolean5 = owner0.isNew();
        owner0.setLastName("hi!");
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        String str5 = owner0.getLastName();
        Integer int6 = owner0.getId();
        Class<?> wildcardClass7 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        pet12.setName("hi!");
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        String str19 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        Integer int13 = visit10.getPetId();
        String str14 = visit10.getDescription();
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        java.time.LocalDate localDate17 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter19.print(petType26, locale27);
        org.springframework.samples.petclinic.owner.PetRepository petRepository29 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter30 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository29);
        org.springframework.samples.petclinic.owner.PetType petType31 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale32 = null;
        String str33 = petTypeFormatter30.print(petType31, locale32);
        org.springframework.samples.petclinic.owner.PetRepository petRepository34 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter35 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository34);
        org.springframework.samples.petclinic.owner.PetType petType36 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter35.print(petType36, locale37);
        java.util.Locale locale39 = null;
        String str40 = petTypeFormatter30.print(petType36, locale39);
        java.util.Locale locale41 = null;
        String str42 = petTypeFormatter19.print(petType36, locale41);
        pet0.setType(petType36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        org.springframework.samples.petclinic.owner.Pet pet14 = owner5.getPet("", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet14);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        Integer int11 = owner0.getId();
        String str12 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "hi!" + "'", str12.equals("hi!"));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        vet0.setFirstName("hi!");
        Integer int7 = vet0.getId();
        Integer int8 = vet0.getId();
        String str9 = vet0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        String str5 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        java.time.LocalDate localDate8 = null;
        pet6.setBirthDate(localDate8);
        String str10 = pet6.getName();
        org.springframework.samples.petclinic.owner.Owner owner11 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        String str14 = pet12.getName();
        owner11.addPet(pet12);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        pet12.addVisit(visit16);
        Integer int19 = visit16.getPetId();
        String str20 = visit16.getDescription();
        java.time.LocalDate localDate21 = visit16.getDate();
        pet6.addVisit(visit16);
        owner0.addPet(pet6);
        String str24 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        String str1 = vet0.getFirstName();
        int int2 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        vet0.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        int int3 = vet0.getNrOfSpecialties();
        int int4 = vet0.getNrOfSpecialties();
        String str5 = vet0.getLastName();
        int int6 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.springframework.samples.petclinic.model.BaseEntity baseEntity0 = new org.springframework.samples.petclinic.model.BaseEntity();
        Integer int1 = baseEntity0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner2 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate4 = pet3.getBirthDate();
        String str5 = pet3.getName();
        owner2.addPet(pet3);
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        pet3.addVisit(visit7);
        Integer int10 = visit7.getPetId();
        Integer int11 = visit7.getPetId();
        boolean boolean12 = visit7.isNew();
        Integer int13 = visit7.getId();
        java.time.LocalDate localDate14 = visit7.getDate();
        visit0.setDate(localDate14);
        visit0.setDescription("hi!");
        visit0.setId((Integer) 10);
        visit0.setPetId((Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        Integer int10 = visit5.getPetId();
        visit5.setPetId((Integer) (-1));
        String str13 = visit5.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        Integer int5 = vet0.getId();
        org.springframework.samples.petclinic.vet.Specialty specialty6 = null;
        vet0.addSpecialty(specialty6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = visit5.getDate();
        visit5.setPetId((Integer) 1);
        String str11 = visit5.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        String str5 = owner0.getAddress();
        owner0.setLastName("hi!");
        String str8 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate1 = pet0.getBirthDate();
        pet0.setName("hi!");
        pet0.setId((Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate1);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        boolean boolean11 = owner0.isNew();
        String str12 = owner0.getLastName();
        owner0.setTelephone("");
        String str15 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        String str8 = owner0.getLastName();
        owner0.setFirstName("");
        owner0.setCity("hi!");
        String str13 = owner0.getFirstName();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet15 = owner0.getPet("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        owner1.setFirstName("hi!");
        String str8 = owner1.getAddress();
        org.springframework.validation.Errors errors9 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) owner1, errors9);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.owner.Owner cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.owner.Owner and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        java.time.LocalDate localDate8 = visit0.getDate();
        visit0.setId((Integer) 10);
        String str11 = visit0.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner5 = pet0.getOwner();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.PetType petType7 = pet0.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType7);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType14 = null;
        pet12.setType(petType14);
        boolean boolean16 = pet12.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository17 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter18 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter18.print(petType19, locale20);
        org.springframework.samples.petclinic.owner.PetType petType22 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter18.print(petType22, locale23);
        pet12.setType(petType22);
        pet0.setType(petType22);
        org.springframework.samples.petclinic.owner.Owner owner27 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate29 = pet28.getBirthDate();
        String str30 = pet28.getName();
        owner27.addPet(pet28);
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        pet28.addVisit(visit32);
        Integer int35 = visit32.getPetId();
        Integer int36 = visit32.getPetId();
        pet0.addVisit(visit32);
        boolean boolean38 = visit32.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = pet1.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType12, locale13);
        java.util.Locale locale16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType17 = petTypeFormatter1.parse("hi!", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        String str9 = owner0.getTelephone();
        owner0.setTelephone("");
        String str12 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        java.time.LocalDate localDate10 = visit5.getDate();
        String str11 = visit5.getDescription();
        java.time.LocalDate localDate12 = visit5.getDate();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        String str14 = pet13.toString();
        java.time.LocalDate localDate15 = null;
        pet13.setBirthDate(localDate15);
        pet13.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType19 = null;
        pet13.setType(petType19);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet13.addVisit(visit21);
        visit21.setDescription("");
        org.springframework.samples.petclinic.owner.Owner owner26 = new org.springframework.samples.petclinic.owner.Owner();
        owner26.setLastName("");
        Integer int29 = owner26.getId();
        owner26.setAddress("");
        owner26.setTelephone("");
        String str34 = owner26.getFirstName();
        owner26.setLastName("hi!");
        String str37 = owner26.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet38 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate39 = pet38.getBirthDate();
        pet38.setName("hi!");
        pet38.setId((Integer) 1);
        owner26.addPet(pet38);
        pet38.setName("hi!");
        boolean boolean47 = pet38.isNew();
        org.springframework.samples.petclinic.visit.Visit visit48 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int49 = visit48.getPetId();
        java.time.LocalDate localDate50 = null;
        visit48.setDate(localDate50);
        org.springframework.samples.petclinic.visit.Visit visit52 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int53 = visit52.getPetId();
        java.time.LocalDate localDate54 = null;
        visit52.setDate(localDate54);
        java.time.LocalDate localDate56 = null;
        visit52.setDate(localDate56);
        visit52.setDescription("");
        visit52.setPetId((Integer) (-1));
        visit52.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner64 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet65 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate66 = pet65.getBirthDate();
        String str67 = pet65.getName();
        owner64.addPet(pet65);
        org.springframework.samples.petclinic.visit.Visit visit69 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int70 = visit69.getPetId();
        pet65.addVisit(visit69);
        java.time.LocalDate localDate72 = visit69.getDate();
        visit52.setDate(localDate72);
        visit48.setDate(localDate72);
        pet38.setBirthDate(localDate72);
        org.springframework.samples.petclinic.visit.Visit visit76 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner77 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet78 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate79 = pet78.getBirthDate();
        String str80 = pet78.getName();
        owner77.addPet(pet78);
        org.springframework.samples.petclinic.visit.Visit visit82 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int83 = visit82.getPetId();
        pet78.addVisit(visit82);
        java.time.LocalDate localDate85 = visit82.getDate();
        visit76.setDate(localDate85);
        pet38.setBirthDate(localDate85);
        visit21.setDate(localDate85);
        visit5.setDate(localDate85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "" + "'", str37.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate85);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        pet0.addVisit(visit8);
        visit8.setDescription("");
        String str13 = visit8.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType5 = pet0.getType();
        // The following exception was thrown during execution in test generation
        try {
            petType5.setId((Integer) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType5);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        visit0.setPetId((Integer) 1);
        visit0.setDescription("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getAddress();
        owner0.setFirstName("");
        String str10 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate1 = pet0.getBirthDate();
        pet0.setName("hi!");
        Class<?> wildcardClass4 = pet0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        java.time.LocalDate localDate5 = pet1.getBirthDate();
        boolean boolean6 = pet1.isNew();
        org.springframework.samples.petclinic.owner.PetType petType7 = pet1.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType7);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setCity("");
        boolean boolean7 = owner0.isNew();
        String str8 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        Integer int11 = owner0.getId();
        String str12 = owner0.getTelephone();
        String str13 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!" + "'", str13.equals("hi!"));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        String str13 = pet9.getName();
        owner0.addPet(pet9);
        org.springframework.samples.petclinic.owner.PetType petType15 = pet9.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType15);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        String str9 = pet8.toString();
        boolean boolean10 = pet8.isNew();
        owner0.addPet(pet8);
        org.springframework.samples.petclinic.owner.PetType petType12 = pet8.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType12);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        java.time.LocalDate localDate12 = pet0.getBirthDate();
        java.time.LocalDate localDate13 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        vet0.setFirstName("");
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.PetType petType4 = pet0.getType();
        java.time.LocalDate localDate5 = pet0.getBirthDate();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        java.time.LocalDate localDate4 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        visit10.setDescription("");
        pet0.addVisit(visit10);
        visit10.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        String str11 = owner0.getCity();
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        Integer int7 = pet0.getId();
        java.time.LocalDate localDate8 = pet0.getBirthDate();
        pet0.setId((Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        boolean boolean4 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        pet0.setType(petType10);
        java.time.LocalDate localDate14 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner15 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner15);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        visit13.setDescription("");
        java.time.LocalDate localDate18 = visit13.getDate();
        pet5.setBirthDate(localDate18);
        org.springframework.samples.petclinic.owner.Owner owner20 = pet5.getOwner();
        String str21 = owner20.getFirstName();
        String str22 = owner20.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        java.time.LocalDate localDate4 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        visit10.setDescription("");
        pet0.addVisit(visit10);
        visit10.setPetId((Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        String str3 = owner0.getTelephone();
        Integer int4 = owner0.getId();
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("hi!");
        org.springframework.samples.petclinic.owner.Pet pet9 = owner0.getPet("", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet9);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("");
        owner0.setAddress("");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        String str9 = owner0.getLastName();
        owner0.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        org.springframework.samples.petclinic.owner.Owner owner4 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate6 = pet5.getBirthDate();
        String str7 = pet5.getName();
        owner4.addPet(pet5);
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        pet5.addVisit(visit9);
        Integer int12 = visit9.getPetId();
        Integer int13 = visit9.getPetId();
        boolean boolean14 = visit9.isNew();
        Integer int15 = visit9.getId();
        String str16 = visit9.getDescription();
        pet0.addVisit(visit9);
        org.springframework.samples.petclinic.owner.PetType petType18 = pet0.getType();
        // The following exception was thrown during execution in test generation
        try {
            String str19 = petType18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType18);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        String str13 = pet9.getName();
        owner0.addPet(pet9);
        String str15 = owner0.getFirstName();
        String str16 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        Integer int5 = pet0.getId();
        String str6 = pet0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        String str5 = owner0.getLastName();
        String str6 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        String str5 = owner0.getAddress();
        String str6 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!");
        String str9 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("");
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        java.time.LocalDate localDate5 = null;
        pet3.setBirthDate(localDate5);
        String str7 = pet3.getName();
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        Integer int16 = visit13.getPetId();
        String str17 = visit13.getDescription();
        java.time.LocalDate localDate18 = visit13.getDate();
        pet3.addVisit(visit13);
        owner0.addPet(pet3);
        String str21 = owner0.getCity();
        owner0.setCity("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getTelephone();
        String str9 = owner0.getFirstName();
        owner0.setAddress("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        owner0.setCity("hi!");
        String str9 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        String str5 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        java.time.LocalDate localDate8 = null;
        pet6.setBirthDate(localDate8);
        String str10 = pet6.getName();
        org.springframework.samples.petclinic.owner.Owner owner11 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        String str14 = pet12.getName();
        owner11.addPet(pet12);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        pet12.addVisit(visit16);
        Integer int19 = visit16.getPetId();
        String str20 = visit16.getDescription();
        java.time.LocalDate localDate21 = visit16.getDate();
        pet6.addVisit(visit16);
        owner0.addPet(pet6);
        Integer int24 = owner0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24.equals(1));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.springframework.samples.petclinic.model.Person person0 = new org.springframework.samples.petclinic.model.Person();
        person0.setLastName("");
        person0.setFirstName("hi!");
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        boolean boolean2 = pet0.isNew();
        String str3 = pet0.getName();
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        visit4.setDescription("");
        visit4.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner10 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate12 = pet11.getBirthDate();
        String str13 = pet11.getName();
        owner10.addPet(pet11);
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        pet11.addVisit(visit15);
        Integer int18 = visit15.getPetId();
        Integer int19 = visit15.getPetId();
        boolean boolean20 = visit15.isNew();
        Integer int21 = visit15.getId();
        java.time.LocalDate localDate22 = visit15.getDate();
        visit4.setDate(localDate22);
        pet0.setBirthDate(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        org.springframework.samples.petclinic.owner.Pet pet4 = new org.springframework.samples.petclinic.owner.Pet();
        String str5 = pet4.toString();
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet4.setType(petType6);
        boolean boolean8 = pet4.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository9 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter10 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter10.print(petType11, locale12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter10.print(petType14, locale15);
        pet4.setType(petType14);
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        String str19 = pet18.toString();
        java.time.LocalDate localDate20 = null;
        pet18.setBirthDate(localDate20);
        org.springframework.samples.petclinic.owner.Owner owner22 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate24 = pet23.getBirthDate();
        String str25 = pet23.getName();
        owner22.addPet(pet23);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int28 = visit27.getPetId();
        pet23.addVisit(visit27);
        Integer int30 = visit27.getPetId();
        Integer int31 = visit27.getPetId();
        boolean boolean32 = visit27.isNew();
        Integer int33 = visit27.getId();
        String str34 = visit27.getDescription();
        pet18.addVisit(visit27);
        pet4.addVisit(visit27);
        owner0.addPet(pet4);
        owner0.setFirstName("hi!");
        String str40 = owner0.getCity();
        org.springframework.samples.petclinic.owner.Owner owner41 = new org.springframework.samples.petclinic.owner.Owner();
        owner41.setId((Integer) 1);
        String str44 = owner41.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet46 = owner41.getPet("hi!");
        org.springframework.samples.petclinic.owner.Owner owner47 = new org.springframework.samples.petclinic.owner.Owner();
        String str48 = owner47.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet49 = new org.springframework.samples.petclinic.owner.Pet();
        String str50 = pet49.toString();
        org.springframework.samples.petclinic.owner.PetType petType51 = null;
        pet49.setType(petType51);
        String str53 = pet49.toString();
        owner47.addPet(pet49);
        owner41.addPet(pet49);
        owner0.addPet(pet49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = visit5.getDate();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = pet9.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository12 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter13 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter13.print(petType14, locale15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter13.print(petType17, locale18);
        pet9.setType(petType17);
        org.springframework.samples.petclinic.owner.Owner owner21 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate23 = pet22.getBirthDate();
        String str24 = pet22.getName();
        owner21.addPet(pet22);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        pet22.addVisit(visit26);
        java.time.LocalDate localDate29 = visit26.getDate();
        pet9.setBirthDate(localDate29);
        visit5.setDate(localDate29);
        Integer int32 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        visit5.setDescription("");
        java.time.LocalDate localDate10 = visit5.getDate();
        visit5.setPetId((Integer) (-1));
        Integer int13 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13.equals((-1)));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate1 = pet0.getBirthDate();
        java.time.LocalDate localDate2 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        pet12.setName("hi!");
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        pet12.setName("hi!");
        boolean boolean21 = pet12.isNew();
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        java.time.LocalDate localDate24 = null;
        visit22.setDate(localDate24);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        java.time.LocalDate localDate28 = null;
        visit26.setDate(localDate28);
        java.time.LocalDate localDate30 = null;
        visit26.setDate(localDate30);
        visit26.setDescription("");
        visit26.setPetId((Integer) (-1));
        visit26.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner38 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate40 = pet39.getBirthDate();
        String str41 = pet39.getName();
        owner38.addPet(pet39);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        pet39.addVisit(visit43);
        java.time.LocalDate localDate46 = visit43.getDate();
        visit26.setDate(localDate46);
        visit22.setDate(localDate46);
        pet12.setBirthDate(localDate46);
        org.springframework.samples.petclinic.owner.Owner owner50 = pet12.getOwner();
        Integer int51 = owner50.getId();
        owner50.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getAddress();
        String str8 = owner0.getCity();
        owner0.setCity("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        Integer int10 = visit5.getPetId();
        java.time.LocalDate localDate11 = visit5.getDate();
        visit5.setDescription("");
        Integer int14 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("");
        String str9 = owner5.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        String str12 = pet0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        org.springframework.samples.petclinic.owner.Pet pet4 = new org.springframework.samples.petclinic.owner.Pet();
        String str5 = pet4.toString();
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet4.setType(petType6);
        boolean boolean8 = pet4.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository9 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter10 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter10.print(petType11, locale12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter10.print(petType14, locale15);
        pet4.setType(petType14);
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        String str19 = pet18.toString();
        java.time.LocalDate localDate20 = null;
        pet18.setBirthDate(localDate20);
        org.springframework.samples.petclinic.owner.Owner owner22 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate24 = pet23.getBirthDate();
        String str25 = pet23.getName();
        owner22.addPet(pet23);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int28 = visit27.getPetId();
        pet23.addVisit(visit27);
        Integer int30 = visit27.getPetId();
        Integer int31 = visit27.getPetId();
        boolean boolean32 = visit27.isNew();
        Integer int33 = visit27.getId();
        String str34 = visit27.getDescription();
        pet18.addVisit(visit27);
        pet4.addVisit(visit27);
        owner0.addPet(pet4);
        org.springframework.samples.petclinic.owner.PetType petType38 = pet4.getType();
        pet4.setName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType38);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        owner5.setCity("");
        String str11 = owner5.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        visit5.setDescription("");
        java.time.LocalDate localDate10 = visit5.getDate();
        visit5.setDescription("");
        visit5.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner2 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate4 = pet3.getBirthDate();
        String str5 = pet3.getName();
        owner2.addPet(pet3);
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        pet3.addVisit(visit7);
        Integer int10 = visit7.getPetId();
        Integer int11 = visit7.getPetId();
        boolean boolean12 = visit7.isNew();
        Integer int13 = visit7.getId();
        java.time.LocalDate localDate14 = visit7.getDate();
        visit0.setDate(localDate14);
        visit0.setDescription("hi!");
        visit0.setDescription("");
        visit0.setId((Integer) 0);
        visit0.setId((Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        vet0.setId((Integer) 1);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        owner0.setLastName("");
        owner0.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        visit5.setDescription("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        String str2 = visit0.getDescription();
        java.time.LocalDate localDate3 = visit0.getDate();
        visit0.setId((Integer) 10);
        visit0.setPetId((Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        org.springframework.samples.petclinic.owner.Owner owner2 = pet1.getOwner();
        org.springframework.validation.Errors errors3 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) owner2, errors3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner2);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        owner0.setAddress("");
        String str9 = owner0.getFirstName();
        org.springframework.samples.petclinic.owner.Pet pet12 = owner0.getPet("hi!", false);
        String str13 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        Integer int11 = owner0.getId();
        String str12 = owner0.getTelephone();
        String str13 = owner0.getCity();
        String str14 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        String str4 = pet3.toString();
        java.time.LocalDate localDate5 = null;
        pet3.setBirthDate(localDate5);
        String str7 = pet3.getName();
        owner0.addPet(pet3);
        Class<?> wildcardClass9 = pet3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        pet12.setName("hi!");
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        pet12.setName("hi!");
        boolean boolean21 = pet12.isNew();
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        java.time.LocalDate localDate24 = null;
        visit22.setDate(localDate24);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        java.time.LocalDate localDate28 = null;
        visit26.setDate(localDate28);
        java.time.LocalDate localDate30 = null;
        visit26.setDate(localDate30);
        visit26.setDescription("");
        visit26.setPetId((Integer) (-1));
        visit26.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner38 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate40 = pet39.getBirthDate();
        String str41 = pet39.getName();
        owner38.addPet(pet39);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        pet39.addVisit(visit43);
        java.time.LocalDate localDate46 = visit43.getDate();
        visit26.setDate(localDate46);
        visit22.setDate(localDate46);
        pet12.setBirthDate(localDate46);
        org.springframework.samples.petclinic.owner.Owner owner50 = pet12.getOwner();
        Integer int51 = owner50.getId();
        String str52 = owner50.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        boolean boolean4 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        pet0.setType(petType10);
        org.springframework.samples.petclinic.owner.Owner owner14 = pet0.getOwner();
        String str15 = pet0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        String str10 = owner0.getFirstName();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet12 = owner0.getPet("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        boolean boolean11 = owner0.isNew();
        String str12 = owner0.getFirstName();
        Class<?> wildcardClass13 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "hi!" + "'", str12.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        String str3 = owner0.getTelephone();
        Integer int4 = owner0.getId();
        String str5 = owner0.getAddress();
        owner0.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        org.springframework.samples.petclinic.owner.Owner owner8 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner8);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.getName();
        pet0.setName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        Integer int12 = visit5.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate15 = pet14.getBirthDate();
        String str16 = pet14.getName();
        owner13.addPet(pet14);
        org.springframework.samples.petclinic.visit.Visit visit18 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int19 = visit18.getPetId();
        pet14.addVisit(visit18);
        Integer int21 = visit18.getPetId();
        String str22 = visit18.getDescription();
        Integer int23 = visit18.getPetId();
        java.time.LocalDate localDate24 = visit18.getDate();
        visit5.setDate(localDate24);
        java.time.LocalDate localDate26 = visit5.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        org.springframework.samples.petclinic.owner.Owner owner6 = pet0.getOwner();
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        java.time.LocalDate localDate9 = null;
        visit7.setDate(localDate9);
        java.time.LocalDate localDate11 = null;
        visit7.setDate(localDate11);
        visit7.setDescription("");
        visit7.setPetId((Integer) 10);
        pet0.addVisit(visit7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        String str8 = owner0.getLastName();
        owner0.setFirstName("");
        owner0.setCity("hi!");
        owner0.setCity("");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet16 = owner0.getPet("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        String str2 = vet0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.PetRepository petRepository1 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter2 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetRepository petRepository8 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter9 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter9.print(petType10, locale11);
        org.springframework.samples.petclinic.owner.PetType petType13 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale14 = null;
        String str15 = petTypeFormatter9.print(petType13, locale14);
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter4.print(petType13, locale16);
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter2.print(petType13, locale18);
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        String str21 = pet20.toString();
        org.springframework.samples.petclinic.owner.PetType petType22 = pet20.getType();
        java.time.LocalDate localDate23 = pet20.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner24 = pet20.getOwner();
        String str25 = pet20.toString();
        pet20.setName("hi!");
        pet20.setName("");
        String str30 = pet20.toString();
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate32 = pet31.getBirthDate();
        pet31.setName("hi!");
        pet31.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository37 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter38 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository37);
        org.springframework.samples.petclinic.owner.PetRepository petRepository39 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter40 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository39);
        org.springframework.samples.petclinic.owner.PetType petType41 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter40.print(petType41, locale42);
        org.springframework.samples.petclinic.owner.PetRepository petRepository44 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter45 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository44);
        org.springframework.samples.petclinic.owner.PetType petType46 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale47 = null;
        String str48 = petTypeFormatter45.print(petType46, locale47);
        org.springframework.samples.petclinic.owner.PetType petType49 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale50 = null;
        String str51 = petTypeFormatter45.print(petType49, locale50);
        java.util.Locale locale52 = null;
        String str53 = petTypeFormatter40.print(petType49, locale52);
        java.util.Locale locale54 = null;
        String str55 = petTypeFormatter38.print(petType49, locale54);
        pet31.setType(petType49);
        String str57 = petType49.toString();
        pet20.setType(petType49);
        java.util.Locale locale59 = null;
        String str60 = petTypeFormatter2.print(petType49, locale59);
        org.springframework.validation.Errors errors61 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) petType49, errors61);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.owner.PetType cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.owner.PetType and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "" + "'", str30.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        org.springframework.samples.petclinic.owner.Owner owner4 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate6 = pet5.getBirthDate();
        String str7 = pet5.getName();
        owner4.addPet(pet5);
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        pet5.addVisit(visit9);
        Integer int12 = visit9.getPetId();
        Integer int13 = visit9.getPetId();
        boolean boolean14 = visit9.isNew();
        Integer int15 = visit9.getId();
        String str16 = visit9.getDescription();
        pet0.addVisit(visit9);
        org.springframework.samples.petclinic.owner.PetType petType18 = pet0.getType();
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        String str20 = pet19.toString();
        java.time.LocalDate localDate21 = null;
        pet19.setBirthDate(localDate21);
        String str23 = pet19.getName();
        org.springframework.samples.petclinic.owner.Owner owner24 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate26 = pet25.getBirthDate();
        String str27 = pet25.getName();
        owner24.addPet(pet25);
        org.springframework.samples.petclinic.visit.Visit visit29 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int30 = visit29.getPetId();
        pet25.addVisit(visit29);
        Integer int32 = visit29.getPetId();
        String str33 = visit29.getDescription();
        java.time.LocalDate localDate34 = visit29.getDate();
        pet19.addVisit(visit29);
        java.time.LocalDate localDate36 = visit29.getDate();
        pet0.setBirthDate(localDate36);
        String str38 = pet0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        org.springframework.samples.petclinic.owner.PetType petType12 = pet10.getType();
        org.springframework.samples.petclinic.owner.Owner owner13 = pet10.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType14 = pet10.getType();
        pet10.setName("");
        owner0.addPet(pet10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType14);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType14 = null;
        pet12.setType(petType14);
        boolean boolean16 = pet12.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository17 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter18 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter18.print(petType19, locale20);
        org.springframework.samples.petclinic.owner.PetType petType22 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter18.print(petType22, locale23);
        pet12.setType(petType22);
        pet0.setType(petType22);
        java.time.LocalDate localDate27 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate27);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        org.springframework.samples.petclinic.owner.Owner owner4 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate6 = pet5.getBirthDate();
        String str7 = pet5.getName();
        owner4.addPet(pet5);
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        pet5.addVisit(visit9);
        Integer int12 = visit9.getPetId();
        Integer int13 = visit9.getPetId();
        boolean boolean14 = visit9.isNew();
        Integer int15 = visit9.getId();
        String str16 = visit9.getDescription();
        pet0.addVisit(visit9);
        org.springframework.samples.petclinic.owner.PetType petType18 = pet0.getType();
        org.springframework.samples.petclinic.owner.Owner owner19 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate21 = pet20.getBirthDate();
        String str22 = pet20.getName();
        owner19.addPet(pet20);
        org.springframework.samples.petclinic.visit.Visit visit24 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int25 = visit24.getPetId();
        pet20.addVisit(visit24);
        Integer int27 = visit24.getPetId();
        Integer int28 = visit24.getPetId();
        boolean boolean29 = visit24.isNew();
        Integer int30 = visit24.getId();
        Integer int31 = visit24.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner32 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet33 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate34 = pet33.getBirthDate();
        String str35 = pet33.getName();
        owner32.addPet(pet33);
        org.springframework.samples.petclinic.visit.Visit visit37 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int38 = visit37.getPetId();
        pet33.addVisit(visit37);
        Integer int40 = visit37.getPetId();
        String str41 = visit37.getDescription();
        Integer int42 = visit37.getPetId();
        java.time.LocalDate localDate43 = visit37.getDate();
        visit24.setDate(localDate43);
        pet0.setBirthDate(localDate43);
        org.springframework.samples.petclinic.owner.PetType petType46 = null;
        pet0.setType(petType46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate43);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        String str9 = owner0.getTelephone();
        owner0.setTelephone("");
        String str12 = owner0.getLastName();
        String str13 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        boolean boolean8 = visit5.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        String str5 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("hi!", false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner2 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate4 = pet3.getBirthDate();
        String str5 = pet3.getName();
        owner2.addPet(pet3);
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        pet3.addVisit(visit7);
        Integer int10 = visit7.getPetId();
        Integer int11 = visit7.getPetId();
        boolean boolean12 = visit7.isNew();
        Integer int13 = visit7.getId();
        java.time.LocalDate localDate14 = visit7.getDate();
        visit0.setDate(localDate14);
        visit0.setId((Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getAddress();
        owner0.setLastName("hi!");
        String str10 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        owner0.setCity("hi!");
        String str13 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        boolean boolean4 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetType petType5 = pet0.getType();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        java.time.LocalDate localDate8 = null;
        pet6.setBirthDate(localDate8);
        String str10 = pet6.getName();
        org.springframework.samples.petclinic.owner.Owner owner11 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        String str14 = pet12.getName();
        owner11.addPet(pet12);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        pet12.addVisit(visit16);
        Integer int19 = visit16.getPetId();
        String str20 = visit16.getDescription();
        java.time.LocalDate localDate21 = visit16.getDate();
        pet6.addVisit(visit16);
        java.time.LocalDate localDate23 = visit16.getDate();
        pet0.setBirthDate(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        org.springframework.samples.petclinic.owner.Pet pet4 = new org.springframework.samples.petclinic.owner.Pet();
        String str5 = pet4.toString();
        java.time.LocalDate localDate6 = null;
        pet4.setBirthDate(localDate6);
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        Integer int16 = visit13.getPetId();
        Integer int17 = visit13.getPetId();
        boolean boolean18 = visit13.isNew();
        Integer int19 = visit13.getId();
        String str20 = visit13.getDescription();
        pet4.addVisit(visit13);
        visit13.setDescription("hi!");
        pet0.addVisit(visit13);
        String str25 = pet0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        owner0.setAddress("");
        String str9 = owner0.getFirstName();
        org.springframework.samples.petclinic.owner.Pet pet12 = owner0.getPet("hi!", false);
        org.springframework.samples.petclinic.owner.Pet pet15 = owner0.getPet("", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet15);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        String str8 = visit0.getDescription();
        Integer int9 = visit0.getId();
        boolean boolean10 = visit0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetRepository petRepository2 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter3 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository2);
        org.springframework.samples.petclinic.owner.PetType petType4 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale5 = null;
        String str6 = petTypeFormatter3.print(petType4, locale5);
        org.springframework.samples.petclinic.owner.PetRepository petRepository7 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter8 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter8.print(petType9, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter8.print(petType12, locale13);
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter3.print(petType12, locale15);
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter1.print(petType12, locale17);
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        String str20 = pet19.toString();
        org.springframework.samples.petclinic.owner.PetType petType21 = pet19.getType();
        java.time.LocalDate localDate22 = pet19.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner23 = pet19.getOwner();
        String str24 = pet19.toString();
        pet19.setName("hi!");
        pet19.setName("");
        String str29 = pet19.toString();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate31 = pet30.getBirthDate();
        pet30.setName("hi!");
        pet30.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository36 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter37 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository36);
        org.springframework.samples.petclinic.owner.PetRepository petRepository38 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter39 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository38);
        org.springframework.samples.petclinic.owner.PetType petType40 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale41 = null;
        String str42 = petTypeFormatter39.print(petType40, locale41);
        org.springframework.samples.petclinic.owner.PetRepository petRepository43 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter44 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository43);
        org.springframework.samples.petclinic.owner.PetType petType45 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale46 = null;
        String str47 = petTypeFormatter44.print(petType45, locale46);
        org.springframework.samples.petclinic.owner.PetType petType48 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale49 = null;
        String str50 = petTypeFormatter44.print(petType48, locale49);
        java.util.Locale locale51 = null;
        String str52 = petTypeFormatter39.print(petType48, locale51);
        java.util.Locale locale53 = null;
        String str54 = petTypeFormatter37.print(petType48, locale53);
        pet30.setType(petType48);
        String str56 = petType48.toString();
        pet19.setType(petType48);
        java.util.Locale locale58 = null;
        String str59 = petTypeFormatter1.print(petType48, locale58);
        String str60 = petType48.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        visit0.setDescription("hi!");
        visit0.setPetId((Integer) (-1));
        String str5 = visit0.getDescription();
        visit0.setPetId((Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner2 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate4 = pet3.getBirthDate();
        String str5 = pet3.getName();
        owner2.addPet(pet3);
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        pet3.addVisit(visit7);
        Integer int10 = visit7.getPetId();
        Integer int11 = visit7.getPetId();
        boolean boolean12 = visit7.isNew();
        Integer int13 = visit7.getId();
        java.time.LocalDate localDate14 = visit7.getDate();
        visit0.setDate(localDate14);
        visit0.setDescription("hi!");
        Integer int18 = visit0.getPetId();
        Class<?> wildcardClass19 = visit0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        org.springframework.samples.petclinic.owner.Pet pet4 = new org.springframework.samples.petclinic.owner.Pet();
        String str5 = pet4.toString();
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet4.setType(petType6);
        boolean boolean8 = pet4.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository9 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter10 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter10.print(petType11, locale12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter10.print(petType14, locale15);
        pet4.setType(petType14);
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        String str19 = pet18.toString();
        java.time.LocalDate localDate20 = null;
        pet18.setBirthDate(localDate20);
        org.springframework.samples.petclinic.owner.Owner owner22 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate24 = pet23.getBirthDate();
        String str25 = pet23.getName();
        owner22.addPet(pet23);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int28 = visit27.getPetId();
        pet23.addVisit(visit27);
        Integer int30 = visit27.getPetId();
        Integer int31 = visit27.getPetId();
        boolean boolean32 = visit27.isNew();
        Integer int33 = visit27.getId();
        String str34 = visit27.getDescription();
        pet18.addVisit(visit27);
        pet4.addVisit(visit27);
        owner0.addPet(pet4);
        owner0.setFirstName("hi!");
        String str40 = owner0.getCity();
        owner0.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        boolean boolean2 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetType petType3 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetType petType4 = pet0.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType4);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet18 = owner0.getPet("", true);
        String str19 = owner0.getCity();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate21 = pet20.getBirthDate();
        pet20.setName("hi!");
        owner0.addPet(pet20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate21);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.springframework.samples.petclinic.model.NamedEntity namedEntity0 = new org.springframework.samples.petclinic.model.NamedEntity();
        namedEntity0.setName("hi!");
        String str3 = namedEntity0.getName();
        boolean boolean4 = namedEntity0.isNew();
        boolean boolean5 = namedEntity0.isNew();
        namedEntity0.setName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!" + "'", str3.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        visit0.setDescription("");
        visit0.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        Integer int14 = visit11.getPetId();
        Integer int15 = visit11.getPetId();
        boolean boolean16 = visit11.isNew();
        Integer int17 = visit11.getId();
        java.time.LocalDate localDate18 = visit11.getDate();
        visit0.setDate(localDate18);
        visit0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.Owner owner22 = new org.springframework.samples.petclinic.owner.Owner();
        owner22.setLastName("");
        Integer int25 = owner22.getId();
        owner22.setAddress("");
        owner22.setTelephone("");
        String str30 = owner22.getFirstName();
        owner22.setLastName("hi!");
        String str33 = owner22.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet34 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate35 = pet34.getBirthDate();
        pet34.setName("hi!");
        pet34.setId((Integer) 1);
        owner22.addPet(pet34);
        pet34.setName("hi!");
        boolean boolean43 = pet34.isNew();
        org.springframework.samples.petclinic.visit.Visit visit44 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int45 = visit44.getPetId();
        java.time.LocalDate localDate46 = null;
        visit44.setDate(localDate46);
        org.springframework.samples.petclinic.visit.Visit visit48 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int49 = visit48.getPetId();
        java.time.LocalDate localDate50 = null;
        visit48.setDate(localDate50);
        java.time.LocalDate localDate52 = null;
        visit48.setDate(localDate52);
        visit48.setDescription("");
        visit48.setPetId((Integer) (-1));
        visit48.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner60 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet61 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate62 = pet61.getBirthDate();
        String str63 = pet61.getName();
        owner60.addPet(pet61);
        org.springframework.samples.petclinic.visit.Visit visit65 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int66 = visit65.getPetId();
        pet61.addVisit(visit65);
        java.time.LocalDate localDate68 = visit65.getDate();
        visit48.setDate(localDate68);
        visit44.setDate(localDate68);
        pet34.setBirthDate(localDate68);
        visit0.setDate(localDate68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "" + "'", str33.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate68);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType14 = null;
        pet12.setType(petType14);
        boolean boolean16 = pet12.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository17 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter18 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter18.print(petType19, locale20);
        org.springframework.samples.petclinic.owner.PetType petType22 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter18.print(petType22, locale23);
        pet12.setType(petType22);
        pet0.setType(petType22);
        org.springframework.samples.petclinic.owner.Owner owner27 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate29 = pet28.getBirthDate();
        String str30 = pet28.getName();
        owner27.addPet(pet28);
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        pet28.addVisit(visit32);
        Integer int35 = visit32.getPetId();
        Integer int36 = visit32.getPetId();
        pet0.addVisit(visit32);
        java.time.LocalDate localDate38 = visit32.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.visit.Visit visit1 = new org.springframework.samples.petclinic.visit.Visit();
        visit1.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner4 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate6 = pet5.getBirthDate();
        String str7 = pet5.getName();
        owner4.addPet(pet5);
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        pet5.addVisit(visit9);
        Integer int12 = visit9.getPetId();
        Integer int13 = visit9.getPetId();
        boolean boolean14 = visit9.isNew();
        Integer int15 = visit9.getId();
        java.time.LocalDate localDate16 = visit9.getDate();
        visit1.setDate(localDate16);
        org.springframework.validation.Errors errors18 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) visit1, errors18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.springframework.samples.petclinic.visit.Visit cannot be cast to class org.springframework.samples.petclinic.owner.Pet (org.springframework.samples.petclinic.visit.Visit and org.springframework.samples.petclinic.owner.Pet are in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = pet2.getType();
        java.time.LocalDate localDate5 = pet2.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner6 = pet2.getOwner();
        String str7 = pet2.toString();
        pet2.setName("hi!");
        owner0.addPet(pet2);
        String str11 = pet2.getName();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        java.time.LocalDate localDate14 = null;
        pet12.setBirthDate(localDate14);
        org.springframework.samples.petclinic.owner.Pet pet16 = new org.springframework.samples.petclinic.owner.Pet();
        String str17 = pet16.toString();
        java.time.LocalDate localDate18 = null;
        pet16.setBirthDate(localDate18);
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate22 = pet21.getBirthDate();
        String str23 = pet21.getName();
        owner20.addPet(pet21);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet21.addVisit(visit25);
        Integer int28 = visit25.getPetId();
        Integer int29 = visit25.getPetId();
        boolean boolean30 = visit25.isNew();
        Integer int31 = visit25.getId();
        String str32 = visit25.getDescription();
        pet16.addVisit(visit25);
        visit25.setDescription("hi!");
        pet12.addVisit(visit25);
        pet2.addVisit(visit25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = pet1.getBirthDate();
        String str9 = pet1.toString();
        java.time.LocalDate localDate10 = pet1.getBirthDate();
        org.springframework.samples.petclinic.owner.PetType petType11 = pet1.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType11);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        owner0.setCity("");
        owner0.setAddress("");
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        String str8 = owner0.getLastName();
        String str9 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner5 = pet0.getOwner();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        pet0.setId((Integer) (-1));
        Integer int9 = pet0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9.equals((-1)));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        visit0.setPetId((Integer) (-1));
        visit0.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        java.time.LocalDate localDate20 = visit17.getDate();
        visit0.setDate(localDate20);
        Integer int22 = visit0.getPetId();
        visit0.setDescription("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22.equals((-1)));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        pet5.setId((Integer) 10);
        pet5.setId((Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setCity("");
        owner0.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        owner8.setLastName("");
        Integer int11 = owner8.getId();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        org.springframework.samples.petclinic.owner.PetType petType14 = null;
        pet12.setType(petType14);
        boolean boolean16 = pet12.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository17 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter18 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter18.print(petType19, locale20);
        org.springframework.samples.petclinic.owner.PetType petType22 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter18.print(petType22, locale23);
        pet12.setType(petType22);
        org.springframework.samples.petclinic.owner.Pet pet26 = new org.springframework.samples.petclinic.owner.Pet();
        String str27 = pet26.toString();
        java.time.LocalDate localDate28 = null;
        pet26.setBirthDate(localDate28);
        org.springframework.samples.petclinic.owner.Owner owner30 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate32 = pet31.getBirthDate();
        String str33 = pet31.getName();
        owner30.addPet(pet31);
        org.springframework.samples.petclinic.visit.Visit visit35 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int36 = visit35.getPetId();
        pet31.addVisit(visit35);
        Integer int38 = visit35.getPetId();
        Integer int39 = visit35.getPetId();
        boolean boolean40 = visit35.isNew();
        Integer int41 = visit35.getId();
        String str42 = visit35.getDescription();
        pet26.addVisit(visit35);
        pet12.addVisit(visit35);
        owner8.addPet(pet12);
        org.springframework.samples.petclinic.owner.PetType petType46 = pet12.getType();
        pet0.setType(petType46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType46);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        pet0.setName("");
        pet0.setName("");
        java.time.LocalDate localDate12 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner13 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner13);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        java.time.LocalDate localDate6 = null;
        visit4.setDate(localDate6);
        java.time.LocalDate localDate8 = null;
        visit4.setDate(localDate8);
        visit4.setDescription("");
        visit4.setPetId((Integer) (-1));
        visit4.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner16 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate18 = pet17.getBirthDate();
        String str19 = pet17.getName();
        owner16.addPet(pet17);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet17.addVisit(visit21);
        java.time.LocalDate localDate24 = visit21.getDate();
        visit4.setDate(localDate24);
        visit0.setDate(localDate24);
        Integer int27 = visit0.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner5 = pet0.getOwner();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        pet0.setId((Integer) (-1));
        org.springframework.samples.petclinic.owner.Owner owner9 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner9);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.visit.Visit visit3 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int4 = visit3.getPetId();
        java.time.LocalDate localDate5 = null;
        visit3.setDate(localDate5);
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        java.time.LocalDate localDate9 = null;
        visit7.setDate(localDate9);
        java.time.LocalDate localDate11 = null;
        visit7.setDate(localDate11);
        visit7.setDescription("");
        visit7.setPetId((Integer) (-1));
        visit7.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner19 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate21 = pet20.getBirthDate();
        String str22 = pet20.getName();
        owner19.addPet(pet20);
        org.springframework.samples.petclinic.visit.Visit visit24 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int25 = visit24.getPetId();
        pet20.addVisit(visit24);
        java.time.LocalDate localDate27 = visit24.getDate();
        visit7.setDate(localDate27);
        visit3.setDate(localDate27);
        pet0.setBirthDate(localDate27);
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        String str32 = pet31.toString();
        org.springframework.samples.petclinic.owner.PetType petType33 = null;
        pet31.setType(petType33);
        org.springframework.samples.petclinic.visit.Visit visit35 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int36 = visit35.getPetId();
        java.time.LocalDate localDate37 = null;
        visit35.setDate(localDate37);
        org.springframework.samples.petclinic.visit.Visit visit39 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int40 = visit39.getPetId();
        java.time.LocalDate localDate41 = null;
        visit39.setDate(localDate41);
        java.time.LocalDate localDate43 = null;
        visit39.setDate(localDate43);
        visit39.setDescription("");
        visit39.setPetId((Integer) (-1));
        visit39.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner51 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet52 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate53 = pet52.getBirthDate();
        String str54 = pet52.getName();
        owner51.addPet(pet52);
        org.springframework.samples.petclinic.visit.Visit visit56 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int57 = visit56.getPetId();
        pet52.addVisit(visit56);
        java.time.LocalDate localDate59 = visit56.getDate();
        visit39.setDate(localDate59);
        visit35.setDate(localDate59);
        visit35.setDescription("");
        pet31.addVisit(visit35);
        org.springframework.samples.petclinic.owner.Owner owner65 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet66 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate67 = pet66.getBirthDate();
        String str68 = pet66.getName();
        owner65.addPet(pet66);
        org.springframework.samples.petclinic.visit.Visit visit70 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int71 = visit70.getPetId();
        pet66.addVisit(visit70);
        visit70.setDescription("");
        java.time.LocalDate localDate75 = visit70.getDate();
        visit35.setDate(localDate75);
        pet0.setBirthDate(localDate75);
        org.springframework.samples.petclinic.owner.Owner owner78 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner78);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getAddress();
        owner0.setFirstName("");
        owner0.setLastName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setAddress("hi!");
        String str16 = owner0.getAddress();
        owner0.setAddress("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!" + "'", str16.equals("hi!"));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        java.time.LocalDate localDate8 = visit5.getDate();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = pet9.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository12 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter13 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter13.print(petType14, locale15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter13.print(petType17, locale18);
        pet9.setType(petType17);
        org.springframework.samples.petclinic.owner.Owner owner21 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate23 = pet22.getBirthDate();
        String str24 = pet22.getName();
        owner21.addPet(pet22);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        pet22.addVisit(visit26);
        java.time.LocalDate localDate29 = visit26.getDate();
        pet9.setBirthDate(localDate29);
        visit5.setDate(localDate29);
        visit5.setPetId((Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        pet0.setName("");
        org.springframework.samples.petclinic.visit.Visit visit14 = new org.springframework.samples.petclinic.visit.Visit();
        visit14.setPetId((Integer) 10);
        visit14.setId((Integer) 1);
        pet0.addVisit(visit14);
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        String str21 = pet20.toString();
        java.time.LocalDate localDate22 = null;
        pet20.setBirthDate(localDate22);
        pet20.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType26 = null;
        pet20.setType(petType26);
        org.springframework.samples.petclinic.visit.Visit visit28 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int29 = visit28.getPetId();
        pet20.addVisit(visit28);
        visit28.setDescription("");
        org.springframework.samples.petclinic.visit.Visit visit33 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int34 = visit33.getPetId();
        java.time.LocalDate localDate35 = null;
        visit33.setDate(localDate35);
        java.time.LocalDate localDate37 = null;
        visit33.setDate(localDate37);
        visit33.setDescription("");
        visit33.setPetId((Integer) (-1));
        org.springframework.samples.petclinic.owner.Pet pet43 = new org.springframework.samples.petclinic.owner.Pet();
        String str44 = pet43.toString();
        org.springframework.samples.petclinic.owner.PetType petType45 = null;
        pet43.setType(petType45);
        org.springframework.samples.petclinic.visit.Visit visit47 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int48 = visit47.getPetId();
        java.time.LocalDate localDate49 = null;
        visit47.setDate(localDate49);
        org.springframework.samples.petclinic.visit.Visit visit51 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int52 = visit51.getPetId();
        java.time.LocalDate localDate53 = null;
        visit51.setDate(localDate53);
        java.time.LocalDate localDate55 = null;
        visit51.setDate(localDate55);
        visit51.setDescription("");
        visit51.setPetId((Integer) (-1));
        visit51.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner63 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet64 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate65 = pet64.getBirthDate();
        String str66 = pet64.getName();
        owner63.addPet(pet64);
        org.springframework.samples.petclinic.visit.Visit visit68 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int69 = visit68.getPetId();
        pet64.addVisit(visit68);
        java.time.LocalDate localDate71 = visit68.getDate();
        visit51.setDate(localDate71);
        visit47.setDate(localDate71);
        visit47.setDescription("");
        pet43.addVisit(visit47);
        org.springframework.samples.petclinic.owner.Owner owner77 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet78 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate79 = pet78.getBirthDate();
        String str80 = pet78.getName();
        owner77.addPet(pet78);
        org.springframework.samples.petclinic.visit.Visit visit82 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int83 = visit82.getPetId();
        pet78.addVisit(visit82);
        visit82.setDescription("");
        java.time.LocalDate localDate87 = visit82.getDate();
        visit47.setDate(localDate87);
        visit33.setDate(localDate87);
        visit28.setDate(localDate87);
        visit14.setDate(localDate87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate87);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        String str11 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        java.time.LocalDate localDate14 = null;
        pet12.setBirthDate(localDate14);
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        org.springframework.samples.petclinic.owner.Pet pet21 = owner0.getPet("hi!", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet21);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        org.springframework.samples.petclinic.owner.Owner owner8 = pet5.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner8);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetRepository petRepository2 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter3 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository2);
        org.springframework.samples.petclinic.owner.PetType petType4 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale5 = null;
        String str6 = petTypeFormatter3.print(petType4, locale5);
        org.springframework.samples.petclinic.owner.PetRepository petRepository7 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter8 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter8.print(petType9, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter8.print(petType12, locale13);
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter3.print(petType12, locale15);
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter1.print(petType12, locale17);
        org.springframework.samples.petclinic.owner.PetRepository petRepository19 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter20 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter20.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetType petType24 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale25 = null;
        String str26 = petTypeFormatter20.print(petType24, locale25);
        org.springframework.samples.petclinic.owner.PetType petType27 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter20.print(petType27, locale28);
        org.springframework.samples.petclinic.owner.PetRepository petRepository30 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter31 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository30);
        org.springframework.samples.petclinic.owner.PetType petType32 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale33 = null;
        String str34 = petTypeFormatter31.print(petType32, locale33);
        org.springframework.samples.petclinic.owner.PetRepository petRepository35 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter36 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository35);
        org.springframework.samples.petclinic.owner.PetType petType37 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale38 = null;
        String str39 = petTypeFormatter36.print(petType37, locale38);
        java.util.Locale locale40 = null;
        String str41 = petTypeFormatter31.print(petType37, locale40);
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter20.print(petType37, locale42);
        java.util.Locale locale44 = null;
        String str45 = petTypeFormatter1.print(petType37, locale44);
        org.springframework.samples.petclinic.owner.PetRepository petRepository46 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter47 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository46);
        org.springframework.samples.petclinic.owner.PetType petType48 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale49 = null;
        String str50 = petTypeFormatter47.print(petType48, locale49);
        org.springframework.samples.petclinic.owner.PetRepository petRepository51 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter52 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository51);
        org.springframework.samples.petclinic.owner.PetType petType53 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale54 = null;
        String str55 = petTypeFormatter52.print(petType53, locale54);
        org.springframework.samples.petclinic.owner.PetType petType56 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale57 = null;
        String str58 = petTypeFormatter52.print(petType56, locale57);
        org.springframework.samples.petclinic.owner.PetType petType59 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale60 = null;
        String str61 = petTypeFormatter52.print(petType59, locale60);
        java.util.Locale locale62 = null;
        String str63 = petTypeFormatter47.print(petType59, locale62);
        java.util.Locale locale64 = null;
        String str65 = petTypeFormatter1.print(petType59, locale64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        String str5 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        java.time.LocalDate localDate8 = null;
        pet6.setBirthDate(localDate8);
        String str10 = pet6.getName();
        org.springframework.samples.petclinic.owner.Owner owner11 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        String str14 = pet12.getName();
        owner11.addPet(pet12);
        org.springframework.samples.petclinic.visit.Visit visit16 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int17 = visit16.getPetId();
        pet12.addVisit(visit16);
        Integer int19 = visit16.getPetId();
        String str20 = visit16.getDescription();
        java.time.LocalDate localDate21 = visit16.getDate();
        pet6.addVisit(visit16);
        owner0.addPet(pet6);
        String str24 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        boolean boolean11 = owner0.isNew();
        String str12 = owner0.getFirstName();
        String str13 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "hi!" + "'", str12.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner9 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate11 = pet10.getBirthDate();
        String str12 = pet10.getName();
        owner9.addPet(pet10);
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        owner9.addPet(pet14);
        org.springframework.samples.petclinic.owner.Owner owner17 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate19 = pet18.getBirthDate();
        String str20 = pet18.getName();
        owner17.addPet(pet18);
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        pet18.addVisit(visit22);
        visit22.setDescription("");
        java.time.LocalDate localDate27 = visit22.getDate();
        pet14.setBirthDate(localDate27);
        visit5.setDate(localDate27);
        visit5.setPetId((Integer) 0);
        Integer int32 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32.equals(0));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        Integer int5 = owner0.getId();
        owner0.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        owner5.setCity("hi!");
        String str14 = owner5.getLastName();
        owner5.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        org.springframework.samples.petclinic.owner.Pet pet4 = new org.springframework.samples.petclinic.owner.Pet();
        String str5 = pet4.toString();
        java.time.LocalDate localDate6 = null;
        pet4.setBirthDate(localDate6);
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        Integer int16 = visit13.getPetId();
        Integer int17 = visit13.getPetId();
        boolean boolean18 = visit13.isNew();
        Integer int19 = visit13.getId();
        String str20 = visit13.getDescription();
        pet4.addVisit(visit13);
        visit13.setDescription("hi!");
        pet0.addVisit(visit13);
        org.springframework.samples.petclinic.owner.Owner owner25 = pet0.getOwner();
        java.time.LocalDate localDate26 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter1.print(petType8, locale9);
        org.springframework.samples.petclinic.owner.PetRepository petRepository11 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter12 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository11);
        org.springframework.samples.petclinic.owner.PetType petType13 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale14 = null;
        String str15 = petTypeFormatter12.print(petType13, locale14);
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter17.print(petType18, locale19);
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter12.print(petType18, locale21);
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter1.print(petType18, locale23);
        java.util.Locale locale26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType27 = petTypeFormatter1.parse("", locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        pet0.setName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.Owner owner3 = pet0.getOwner();
        pet0.setName("");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        java.time.LocalDate localDate14 = pet7.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        java.time.LocalDate localDate17 = null;
        visit15.setDate(localDate17);
        java.time.LocalDate localDate19 = null;
        visit15.setDate(localDate19);
        pet7.addVisit(visit15);
        pet0.addVisit(visit15);
        String str23 = visit15.getDescription();
        Integer int24 = visit15.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setCity("");
        String str11 = owner0.getCity();
        Class<?> wildcardClass12 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        String str12 = visit5.getDescription();
        boolean boolean13 = visit5.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getCity();
        owner0.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        vet0.setFirstName("hi!");
        Integer int7 = vet0.getId();
        Integer int8 = vet0.getId();
        vet0.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType12, locale13);
        org.springframework.samples.petclinic.owner.PetRepository petRepository15 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter16 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository15);
        org.springframework.samples.petclinic.owner.PetType petType17 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale18 = null;
        String str19 = petTypeFormatter16.print(petType17, locale18);
        org.springframework.samples.petclinic.owner.PetRepository petRepository20 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter21 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository20);
        org.springframework.samples.petclinic.owner.PetType petType22 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter21.print(petType22, locale23);
        org.springframework.samples.petclinic.owner.PetType petType25 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale26 = null;
        String str27 = petTypeFormatter21.print(petType25, locale26);
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter16.print(petType25, locale28);
        String str30 = petType25.toString();
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter1.print(petType25, locale31);
        org.springframework.samples.petclinic.owner.Pet pet33 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate34 = pet33.getBirthDate();
        pet33.setName("hi!");
        pet33.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository39 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter40 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository39);
        org.springframework.samples.petclinic.owner.PetRepository petRepository41 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter42 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository41);
        org.springframework.samples.petclinic.owner.PetType petType43 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale44 = null;
        String str45 = petTypeFormatter42.print(petType43, locale44);
        org.springframework.samples.petclinic.owner.PetRepository petRepository46 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter47 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository46);
        org.springframework.samples.petclinic.owner.PetType petType48 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale49 = null;
        String str50 = petTypeFormatter47.print(petType48, locale49);
        org.springframework.samples.petclinic.owner.PetType petType51 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale52 = null;
        String str53 = petTypeFormatter47.print(petType51, locale52);
        java.util.Locale locale54 = null;
        String str55 = petTypeFormatter42.print(petType51, locale54);
        java.util.Locale locale56 = null;
        String str57 = petTypeFormatter40.print(petType51, locale56);
        pet33.setType(petType51);
        java.util.Locale locale59 = null;
        String str60 = petTypeFormatter1.print(petType51, locale59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType10, locale13);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = null;
        pet15.setType(petType17);
        String str19 = pet15.getName();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        String str21 = pet20.toString();
        org.springframework.samples.petclinic.owner.PetType petType22 = null;
        pet20.setType(petType22);
        boolean boolean24 = pet20.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository25 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter26 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository25);
        org.springframework.samples.petclinic.owner.PetType petType27 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter26.print(petType27, locale28);
        org.springframework.samples.petclinic.owner.PetType petType30 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter26.print(petType30, locale31);
        pet20.setType(petType30);
        pet15.setType(petType30);
        petType30.setName("");
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter1.print(petType30, locale37);
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        String str40 = pet39.toString();
        org.springframework.samples.petclinic.owner.PetType petType41 = pet39.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository42 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter43 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository42);
        org.springframework.samples.petclinic.owner.PetType petType44 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale45 = null;
        String str46 = petTypeFormatter43.print(petType44, locale45);
        org.springframework.samples.petclinic.owner.PetType petType47 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale48 = null;
        String str49 = petTypeFormatter43.print(petType47, locale48);
        pet39.setType(petType47);
        org.springframework.samples.petclinic.owner.Owner owner51 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet52 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate53 = pet52.getBirthDate();
        String str54 = pet52.getName();
        owner51.addPet(pet52);
        org.springframework.samples.petclinic.visit.Visit visit56 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int57 = visit56.getPetId();
        pet52.addVisit(visit56);
        java.time.LocalDate localDate59 = visit56.getDate();
        pet39.setBirthDate(localDate59);
        org.springframework.samples.petclinic.owner.PetType petType61 = pet39.getType();
        petType61.setName("");
        java.util.Locale locale64 = null;
        String str65 = petTypeFormatter1.print(petType61, locale64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "" + "'", str38.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "" + "'", str65.equals(""));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        pet12.setName("hi!");
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        String str19 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        java.time.LocalDate localDate14 = visit11.getDate();
        visit0.setDate(localDate14);
        visit0.setDescription("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        String str10 = visit5.getDescription();
        java.time.LocalDate localDate11 = visit5.getDate();
        visit5.setDescription("hi!");
        visit5.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getAddress();
        owner0.setLastName("hi!");
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        boolean boolean11 = owner0.isNew();
        String str12 = owner0.getLastName();
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Owner owner15 = new org.springframework.samples.petclinic.owner.Owner();
        owner15.setLastName("");
        Integer int18 = owner15.getId();
        owner15.setAddress("");
        String str21 = owner15.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet23 = owner15.getPet("hi!");
        String str24 = owner15.getFirstName();
        owner15.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet27 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate28 = pet27.getBirthDate();
        owner15.addPet(pet27);
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        String str31 = pet30.toString();
        org.springframework.samples.petclinic.owner.PetType petType32 = pet30.getType();
        org.springframework.samples.petclinic.visit.Visit visit33 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int34 = visit33.getPetId();
        java.time.LocalDate localDate35 = null;
        visit33.setDate(localDate35);
        org.springframework.samples.petclinic.visit.Visit visit37 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int38 = visit37.getPetId();
        java.time.LocalDate localDate39 = null;
        visit37.setDate(localDate39);
        java.time.LocalDate localDate41 = null;
        visit37.setDate(localDate41);
        visit37.setDescription("");
        visit37.setPetId((Integer) (-1));
        visit37.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner49 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet50 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate51 = pet50.getBirthDate();
        String str52 = pet50.getName();
        owner49.addPet(pet50);
        org.springframework.samples.petclinic.visit.Visit visit54 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int55 = visit54.getPetId();
        pet50.addVisit(visit54);
        java.time.LocalDate localDate57 = visit54.getDate();
        visit37.setDate(localDate57);
        visit33.setDate(localDate57);
        pet30.setBirthDate(localDate57);
        pet27.setBirthDate(localDate57);
        owner0.addPet(pet27);
        org.springframework.samples.petclinic.owner.PetType petType63 = pet27.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "" + "'", str21.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType63);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        Integer int5 = pet0.getId();
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        Integer int14 = visit11.getPetId();
        Integer int15 = visit11.getPetId();
        String str16 = visit11.getDescription();
        java.time.LocalDate localDate17 = visit11.getDate();
        pet0.setBirthDate(localDate17);
        org.springframework.samples.petclinic.owner.PetType petType19 = pet0.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType19);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetRepository petRepository2 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter3 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository2);
        org.springframework.samples.petclinic.owner.PetType petType4 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale5 = null;
        String str6 = petTypeFormatter3.print(petType4, locale5);
        org.springframework.samples.petclinic.owner.PetRepository petRepository7 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter8 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter8.print(petType9, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter8.print(petType12, locale13);
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter3.print(petType12, locale15);
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter1.print(petType12, locale17);
        org.springframework.samples.petclinic.owner.Pet pet19 = new org.springframework.samples.petclinic.owner.Pet();
        String str20 = pet19.toString();
        org.springframework.samples.petclinic.owner.PetType petType21 = pet19.getType();
        java.time.LocalDate localDate22 = pet19.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner23 = pet19.getOwner();
        String str24 = pet19.toString();
        pet19.setName("hi!");
        pet19.setName("");
        String str29 = pet19.toString();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate31 = pet30.getBirthDate();
        pet30.setName("hi!");
        pet30.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository36 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter37 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository36);
        org.springframework.samples.petclinic.owner.PetRepository petRepository38 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter39 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository38);
        org.springframework.samples.petclinic.owner.PetType petType40 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale41 = null;
        String str42 = petTypeFormatter39.print(petType40, locale41);
        org.springframework.samples.petclinic.owner.PetRepository petRepository43 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter44 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository43);
        org.springframework.samples.petclinic.owner.PetType petType45 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale46 = null;
        String str47 = petTypeFormatter44.print(petType45, locale46);
        org.springframework.samples.petclinic.owner.PetType petType48 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale49 = null;
        String str50 = petTypeFormatter44.print(petType48, locale49);
        java.util.Locale locale51 = null;
        String str52 = petTypeFormatter39.print(petType48, locale51);
        java.util.Locale locale53 = null;
        String str54 = petTypeFormatter37.print(petType48, locale53);
        pet30.setType(petType48);
        String str56 = petType48.toString();
        pet19.setType(petType48);
        java.util.Locale locale58 = null;
        String str59 = petTypeFormatter1.print(petType48, locale58);
        java.util.Locale locale61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType62 = petTypeFormatter1.parse("", locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "" + "'", str29.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        boolean boolean5 = owner0.isNew();
        String str6 = owner0.getFirstName();
        owner0.setCity("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType5 = pet0.getType();
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        java.time.LocalDate localDate8 = null;
        visit6.setDate(localDate8);
        java.time.LocalDate localDate10 = null;
        visit6.setDate(localDate10);
        visit6.setPetId((Integer) (-1));
        visit6.setDescription("hi!");
        pet0.addVisit(visit6);
        visit6.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        java.time.LocalDate localDate5 = pet1.getBirthDate();
        boolean boolean6 = pet1.isNew();
        java.time.LocalDate localDate7 = pet1.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet12 = owner0.getPet("hi!");
        String str13 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        boolean boolean11 = owner0.isNew();
        String str12 = owner0.getLastName();
        Integer int13 = owner0.getId();
        owner0.setLastName("");
        String str16 = owner0.getAddress();
        owner0.setCity("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        owner0.setTelephone("hi!");
        owner0.setLastName("");
        String str12 = owner0.getLastName();
        owner0.setFirstName("hi!");
        org.springframework.samples.petclinic.owner.Pet pet17 = owner0.getPet("", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet17);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetRepository petRepository2 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter3 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository2);
        org.springframework.samples.petclinic.owner.PetType petType4 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale5 = null;
        String str6 = petTypeFormatter3.print(petType4, locale5);
        org.springframework.samples.petclinic.owner.PetRepository petRepository7 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter8 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter8.print(petType9, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter8.print(petType12, locale13);
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter3.print(petType12, locale15);
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter1.print(petType12, locale17);
        org.springframework.samples.petclinic.owner.PetRepository petRepository19 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter20 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter20.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetType petType24 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale25 = null;
        String str26 = petTypeFormatter20.print(petType24, locale25);
        org.springframework.samples.petclinic.owner.PetType petType27 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter20.print(petType27, locale28);
        org.springframework.samples.petclinic.owner.PetRepository petRepository30 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter31 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository30);
        org.springframework.samples.petclinic.owner.PetType petType32 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale33 = null;
        String str34 = petTypeFormatter31.print(petType32, locale33);
        org.springframework.samples.petclinic.owner.PetRepository petRepository35 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter36 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository35);
        org.springframework.samples.petclinic.owner.PetType petType37 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale38 = null;
        String str39 = petTypeFormatter36.print(petType37, locale38);
        java.util.Locale locale40 = null;
        String str41 = petTypeFormatter31.print(petType37, locale40);
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter20.print(petType37, locale42);
        java.util.Locale locale44 = null;
        String str45 = petTypeFormatter1.print(petType37, locale44);
        String str46 = petType37.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setCity("");
        owner0.setAddress("");
        String str9 = owner0.getCity();
        owner0.setFirstName("");
        String str12 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        org.springframework.samples.petclinic.owner.PetType petType13 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale14 = null;
        String str15 = petTypeFormatter6.print(petType13, locale14);
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter1.print(petType13, locale16);
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType20 = petTypeFormatter1.parse("", locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner9 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate11 = pet10.getBirthDate();
        String str12 = pet10.getName();
        owner9.addPet(pet10);
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        owner9.addPet(pet14);
        org.springframework.samples.petclinic.owner.Owner owner17 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate19 = pet18.getBirthDate();
        String str20 = pet18.getName();
        owner17.addPet(pet18);
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        pet18.addVisit(visit22);
        visit22.setDescription("");
        java.time.LocalDate localDate27 = visit22.getDate();
        pet14.setBirthDate(localDate27);
        visit5.setDate(localDate27);
        visit5.setPetId((Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        String str13 = pet9.getName();
        owner0.addPet(pet9);
        String str15 = owner0.getFirstName();
        owner0.setId((Integer) 100);
        String str18 = owner0.getCity();
        owner0.setTelephone("");
        String str21 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!" + "'", str15.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        visit13.setDescription("");
        java.time.LocalDate localDate18 = visit13.getDate();
        pet5.setBirthDate(localDate18);
        org.springframework.samples.petclinic.owner.Owner owner20 = pet5.getOwner();
        owner20.setAddress("hi!");
        owner20.setAddress("hi!");
        String str25 = owner20.getAddress();
        String str26 = owner20.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "hi!" + "'", str25.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        String str11 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate13 = pet12.getBirthDate();
        pet12.setName("hi!");
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        pet12.setName("hi!");
        boolean boolean21 = pet12.isNew();
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        java.time.LocalDate localDate24 = null;
        visit22.setDate(localDate24);
        org.springframework.samples.petclinic.visit.Visit visit26 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int27 = visit26.getPetId();
        java.time.LocalDate localDate28 = null;
        visit26.setDate(localDate28);
        java.time.LocalDate localDate30 = null;
        visit26.setDate(localDate30);
        visit26.setDescription("");
        visit26.setPetId((Integer) (-1));
        visit26.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner38 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate40 = pet39.getBirthDate();
        String str41 = pet39.getName();
        owner38.addPet(pet39);
        org.springframework.samples.petclinic.visit.Visit visit43 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int44 = visit43.getPetId();
        pet39.addVisit(visit43);
        java.time.LocalDate localDate46 = visit43.getDate();
        visit26.setDate(localDate46);
        visit22.setDate(localDate46);
        pet12.setBirthDate(localDate46);
        pet12.setName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate46);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        java.time.LocalDate localDate12 = visit5.getDate();
        visit5.setPetId((Integer) 1);
        visit5.setPetId((Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setAddress("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet18 = owner0.getPet("", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        String str10 = visit5.getDescription();
        String str11 = visit5.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        Integer int20 = visit17.getPetId();
        Integer int21 = visit17.getPetId();
        boolean boolean22 = visit17.isNew();
        Integer int23 = visit17.getId();
        java.time.LocalDate localDate24 = visit17.getDate();
        visit5.setDate(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        String str10 = visit5.getDescription();
        java.time.LocalDate localDate11 = visit5.getDate();
        java.time.LocalDate localDate12 = visit5.getDate();
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate15 = pet14.getBirthDate();
        String str16 = pet14.getName();
        owner13.addPet(pet14);
        org.springframework.samples.petclinic.visit.Visit visit18 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int19 = visit18.getPetId();
        pet14.addVisit(visit18);
        Integer int21 = visit18.getPetId();
        Integer int22 = visit18.getPetId();
        String str23 = visit18.getDescription();
        java.time.LocalDate localDate24 = visit18.getDate();
        visit5.setDate(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        String str4 = vet0.getLastName();
        int int5 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate10 = pet9.getBirthDate();
        String str11 = pet9.getName();
        owner8.addPet(pet9);
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        pet9.addVisit(visit13);
        visit13.setDescription("");
        java.time.LocalDate localDate18 = visit13.getDate();
        pet5.setBirthDate(localDate18);
        org.springframework.samples.petclinic.owner.Owner owner20 = pet5.getOwner();
        pet5.setName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner20);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate6 = pet5.getBirthDate();
        String str7 = pet5.getName();
        owner4.addPet(pet5);
        org.springframework.samples.petclinic.visit.Visit visit9 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int10 = visit9.getPetId();
        pet5.addVisit(visit9);
        Integer int12 = visit9.getPetId();
        Integer int13 = visit9.getPetId();
        boolean boolean14 = visit9.isNew();
        Integer int15 = visit9.getId();
        java.time.LocalDate localDate16 = visit9.getDate();
        pet0.addVisit(visit9);
        java.time.LocalDate localDate18 = pet0.getBirthDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Owner owner1 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate3 = pet2.getBirthDate();
        String str4 = pet2.getName();
        owner1.addPet(pet2);
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        pet2.addVisit(visit6);
        Integer int9 = visit6.getPetId();
        Integer int10 = visit6.getPetId();
        boolean boolean11 = visit6.isNew();
        Integer int12 = visit6.getId();
        Integer int13 = visit6.getPetId();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate15 = pet14.getBirthDate();
        pet14.setName("hi!");
        org.springframework.samples.petclinic.visit.Visit visit18 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int19 = visit18.getPetId();
        java.time.LocalDate localDate20 = null;
        visit18.setDate(localDate20);
        java.time.LocalDate localDate22 = null;
        visit18.setDate(localDate22);
        visit18.setDescription("");
        visit18.setPetId((Integer) (-1));
        visit18.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner30 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate32 = pet31.getBirthDate();
        String str33 = pet31.getName();
        owner30.addPet(pet31);
        org.springframework.samples.petclinic.visit.Visit visit35 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int36 = visit35.getPetId();
        pet31.addVisit(visit35);
        java.time.LocalDate localDate38 = visit35.getDate();
        visit18.setDate(localDate38);
        pet14.setBirthDate(localDate38);
        visit6.setDate(localDate38);
        org.springframework.validation.Errors errors42 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) localDate38, errors42);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.time.LocalDate cannot be cast to class org.springframework.samples.petclinic.owner.Pet (java.time.LocalDate is in module java.base of loader 'bootstrap'; org.springframework.samples.petclinic.owner.Pet is in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        boolean boolean5 = owner0.isNew();
        String str6 = owner0.getFirstName();
        String str7 = owner0.getLastName();
        owner0.setLastName("hi!");
        String str10 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setLastName("hi!");
        String str16 = owner0.getTelephone();
        String str17 = owner0.getLastName();
        owner0.setTelephone("");
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!" + "'", str17.equals("hi!"));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        pet0.setName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        vet0.setLastName("");
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        Class<?> wildcardClass7 = vet0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        Integer int13 = visit10.getPetId();
        String str14 = visit10.getDescription();
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        String str18 = pet17.toString();
        org.springframework.samples.petclinic.owner.PetType petType19 = null;
        pet17.setType(petType19);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        java.time.LocalDate localDate23 = null;
        visit21.setDate(localDate23);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        java.time.LocalDate localDate27 = null;
        visit25.setDate(localDate27);
        java.time.LocalDate localDate29 = null;
        visit25.setDate(localDate29);
        visit25.setDescription("");
        visit25.setPetId((Integer) (-1));
        visit25.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner37 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet38 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate39 = pet38.getBirthDate();
        String str40 = pet38.getName();
        owner37.addPet(pet38);
        org.springframework.samples.petclinic.visit.Visit visit42 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int43 = visit42.getPetId();
        pet38.addVisit(visit42);
        java.time.LocalDate localDate45 = visit42.getDate();
        visit25.setDate(localDate45);
        visit21.setDate(localDate45);
        visit21.setDescription("");
        pet17.addVisit(visit21);
        String str51 = visit21.getDescription();
        pet0.addVisit(visit21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "" + "'", str51.equals(""));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        org.springframework.samples.petclinic.owner.Owner owner6 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType7 = pet0.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType7);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        String str8 = owner0.getLastName();
        owner0.setFirstName("");
        owner0.setCity("hi!");
        owner0.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = pet15.getType();
        java.time.LocalDate localDate18 = pet15.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner19 = pet15.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner20 = pet15.getOwner();
        java.time.LocalDate localDate21 = pet15.getBirthDate();
        String str22 = pet15.getName();
        owner0.addPet(pet15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        Object obj1 = new Object();
        org.springframework.validation.Errors errors2 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate(obj1, errors2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.lang.Object cannot be cast to class org.springframework.samples.petclinic.owner.Pet (java.lang.Object is in module java.base of loader 'bootstrap'; org.springframework.samples.petclinic.owner.Pet is in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        boolean boolean13 = pet9.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter15.print(petType16, locale17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter15.print(petType19, locale20);
        pet9.setType(petType19);
        owner0.addPet(pet9);
        owner0.setLastName("hi!");
        owner0.setLastName("");
        String str28 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        Integer int13 = visit10.getPetId();
        String str14 = visit10.getDescription();
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        Integer int17 = visit10.getPetId();
        Integer int18 = visit10.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType10, locale13);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = null;
        pet15.setType(petType17);
        String str19 = pet15.getName();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        String str21 = pet20.toString();
        org.springframework.samples.petclinic.owner.PetType petType22 = null;
        pet20.setType(petType22);
        boolean boolean24 = pet20.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository25 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter26 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository25);
        org.springframework.samples.petclinic.owner.PetType petType27 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter26.print(petType27, locale28);
        org.springframework.samples.petclinic.owner.PetType petType30 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter26.print(petType30, locale31);
        pet20.setType(petType30);
        pet15.setType(petType30);
        petType30.setName("");
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter1.print(petType30, locale37);
        java.util.Locale locale40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType41 = petTypeFormatter1.parse("hi!", locale40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "" + "'", str38.equals(""));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        String str5 = owner0.getLastName();
        owner0.setCity("");
        String str8 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        Integer int13 = visit10.getPetId();
        String str14 = visit10.getDescription();
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        Integer int17 = visit10.getPetId();
        java.time.LocalDate localDate18 = visit10.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        visit5.setPetId((Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.Owner owner3 = pet0.getOwner();
        pet0.setName("");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        java.time.LocalDate localDate14 = pet7.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        java.time.LocalDate localDate17 = null;
        visit15.setDate(localDate17);
        java.time.LocalDate localDate19 = null;
        visit15.setDate(localDate19);
        pet7.addVisit(visit15);
        pet0.addVisit(visit15);
        String str23 = pet0.toString();
        pet0.setName("");
        org.springframework.samples.petclinic.owner.PetType petType26 = pet0.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType26);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        String str4 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        String str7 = vet0.getLastName();
        int int8 = vet0.getNrOfSpecialties();
        vet0.setLastName("");
        String str11 = vet0.getLastName();
        String str12 = vet0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        org.springframework.samples.petclinic.owner.PetType petType14 = pet10.getType();
        // The following exception was thrown during execution in test generation
        try {
            Class<?> wildcardClass15 = petType14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType14);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        org.springframework.samples.petclinic.vet.Vets vets0 = new org.springframework.samples.petclinic.vet.Vets();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList1 = vets0.getVetList();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList2 = vets0.getVetList();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList3 = vets0.getVetList();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList4 = vets0.getVetList();
        java.util.List<org.springframework.samples.petclinic.vet.Vet> vetList5 = vets0.getVetList();
        Class<?> wildcardClass6 = vets0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(vetList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        boolean boolean11 = owner0.isNew();
        String str12 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet15 = owner0.getPet("", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet15);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        owner0.setFirstName("hi!");
        owner0.setLastName("hi!");
        owner0.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        org.springframework.samples.petclinic.vet.Specialty specialty4 = null;
        vet0.addSpecialty(specialty4);
        String str6 = vet0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        owner0.setTelephone("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("", false);
        org.springframework.samples.petclinic.owner.Owner owner7 = new org.springframework.samples.petclinic.owner.Owner();
        String str8 = owner7.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        String str13 = pet9.toString();
        owner7.addPet(pet9);
        owner7.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        String str18 = pet17.toString();
        boolean boolean19 = pet17.isNew();
        owner7.addPet(pet17);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet17.addVisit(visit21);
        owner0.addPet(pet17);
        String str25 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        String str20 = visit17.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner21 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate23 = pet22.getBirthDate();
        String str24 = pet22.getName();
        owner21.addPet(pet22);
        org.springframework.samples.petclinic.owner.Pet pet26 = new org.springframework.samples.petclinic.owner.Pet();
        String str27 = pet26.toString();
        owner21.addPet(pet26);
        org.springframework.samples.petclinic.owner.Owner owner29 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate31 = pet30.getBirthDate();
        String str32 = pet30.getName();
        owner29.addPet(pet30);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        pet30.addVisit(visit34);
        visit34.setDescription("");
        java.time.LocalDate localDate39 = visit34.getDate();
        pet26.setBirthDate(localDate39);
        visit17.setDate(localDate39);
        visit17.setPetId((Integer) 0);
        pet0.addVisit(visit17);
        pet0.setId((Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet5 = owner0.getPet("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        String str7 = pet6.toString();
        org.springframework.samples.petclinic.owner.PetType petType8 = null;
        pet6.setType(petType8);
        boolean boolean10 = pet6.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository11 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter12 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository11);
        org.springframework.samples.petclinic.owner.PetType petType13 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale14 = null;
        String str15 = petTypeFormatter12.print(petType13, locale14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter12.print(petType16, locale17);
        pet6.setType(petType16);
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        String str21 = pet20.toString();
        java.time.LocalDate localDate22 = null;
        pet20.setBirthDate(localDate22);
        org.springframework.samples.petclinic.owner.Owner owner24 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate26 = pet25.getBirthDate();
        String str27 = pet25.getName();
        owner24.addPet(pet25);
        org.springframework.samples.petclinic.visit.Visit visit29 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int30 = visit29.getPetId();
        pet25.addVisit(visit29);
        Integer int32 = visit29.getPetId();
        Integer int33 = visit29.getPetId();
        boolean boolean34 = visit29.isNew();
        Integer int35 = visit29.getId();
        String str36 = visit29.getDescription();
        pet20.addVisit(visit29);
        pet6.addVisit(visit29);
        org.springframework.samples.petclinic.visit.Visit visit39 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int40 = visit39.getPetId();
        java.time.LocalDate localDate41 = null;
        visit39.setDate(localDate41);
        java.time.LocalDate localDate43 = null;
        visit39.setDate(localDate43);
        org.springframework.samples.petclinic.owner.Owner owner45 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet46 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate47 = pet46.getBirthDate();
        String str48 = pet46.getName();
        owner45.addPet(pet46);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int51 = visit50.getPetId();
        pet46.addVisit(visit50);
        java.time.LocalDate localDate53 = visit50.getDate();
        visit39.setDate(localDate53);
        visit39.setPetId((Integer) 1);
        pet6.addVisit(visit39);
        pet6.setName("");
        owner0.addPet(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate53);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter1.print(petType7, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType12, locale13);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = pet15.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        pet15.setType(petType23);
        org.springframework.samples.petclinic.owner.Owner owner27 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet28 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate29 = pet28.getBirthDate();
        String str30 = pet28.getName();
        owner27.addPet(pet28);
        org.springframework.samples.petclinic.visit.Visit visit32 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int33 = visit32.getPetId();
        pet28.addVisit(visit32);
        java.time.LocalDate localDate35 = visit32.getDate();
        pet15.setBirthDate(localDate35);
        org.springframework.samples.petclinic.owner.PetType petType37 = pet15.getType();
        java.util.Locale locale38 = null;
        String str39 = petTypeFormatter1.print(petType37, locale38);
        org.springframework.samples.petclinic.owner.Pet pet40 = new org.springframework.samples.petclinic.owner.Pet();
        String str41 = pet40.toString();
        org.springframework.samples.petclinic.owner.PetType petType42 = pet40.getType();
        java.time.LocalDate localDate43 = pet40.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner44 = pet40.getOwner();
        String str45 = pet40.toString();
        pet40.setId((Integer) 100);
        org.springframework.samples.petclinic.visit.Visit visit48 = new org.springframework.samples.petclinic.visit.Visit();
        String str49 = visit48.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner50 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet51 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate52 = pet51.getBirthDate();
        String str53 = pet51.getName();
        owner50.addPet(pet51);
        org.springframework.samples.petclinic.visit.Visit visit55 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int56 = visit55.getPetId();
        pet51.addVisit(visit55);
        Integer int58 = visit55.getPetId();
        Integer int59 = visit55.getPetId();
        boolean boolean60 = visit55.isNew();
        Integer int61 = visit55.getId();
        java.time.LocalDate localDate62 = visit55.getDate();
        visit48.setDate(localDate62);
        pet40.setBirthDate(localDate62);
        org.springframework.samples.petclinic.owner.Owner owner65 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet66 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate67 = pet66.getBirthDate();
        String str68 = pet66.getName();
        owner65.addPet(pet66);
        java.time.LocalDate localDate70 = pet66.getBirthDate();
        boolean boolean71 = pet66.isNew();
        org.springframework.samples.petclinic.owner.PetType petType72 = new org.springframework.samples.petclinic.owner.PetType();
        pet66.setType(petType72);
        pet40.setType(petType72);
        java.util.Locale locale75 = null;
        String str76 = petTypeFormatter1.print(petType72, locale75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = pet2.getType();
        java.time.LocalDate localDate5 = pet2.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner6 = pet2.getOwner();
        String str7 = pet2.toString();
        pet2.setName("hi!");
        owner0.addPet(pet2);
        String str11 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        String str11 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet12 = new org.springframework.samples.petclinic.owner.Pet();
        String str13 = pet12.toString();
        java.time.LocalDate localDate14 = null;
        pet12.setBirthDate(localDate14);
        pet12.setId((Integer) 1);
        owner0.addPet(pet12);
        org.springframework.samples.petclinic.owner.Pet pet21 = owner0.getPet("", true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet21);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        boolean boolean6 = owner5.isNew();
        owner5.setLastName("");
        String str9 = owner5.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType5 = pet0.getType();
        org.springframework.samples.petclinic.visit.Visit visit6 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int7 = visit6.getPetId();
        java.time.LocalDate localDate8 = null;
        visit6.setDate(localDate8);
        java.time.LocalDate localDate10 = null;
        visit6.setDate(localDate10);
        visit6.setPetId((Integer) (-1));
        visit6.setDescription("hi!");
        pet0.addVisit(visit6);
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        String str18 = pet17.toString();
        org.springframework.samples.petclinic.owner.PetType petType19 = null;
        pet17.setType(petType19);
        String str21 = pet17.toString();
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        String str23 = pet22.toString();
        org.springframework.samples.petclinic.owner.PetType petType24 = pet22.getType();
        java.time.LocalDate localDate25 = pet22.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner26 = pet22.getOwner();
        String str27 = pet22.toString();
        pet22.setName("hi!");
        pet22.setName("");
        pet22.setName("");
        java.time.LocalDate localDate34 = pet22.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit35 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int36 = visit35.getPetId();
        java.time.LocalDate localDate37 = null;
        visit35.setDate(localDate37);
        java.time.LocalDate localDate39 = null;
        visit35.setDate(localDate39);
        visit35.setDescription("");
        visit35.setPetId((Integer) (-1));
        visit35.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner47 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet48 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate49 = pet48.getBirthDate();
        String str50 = pet48.getName();
        owner47.addPet(pet48);
        org.springframework.samples.petclinic.visit.Visit visit52 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int53 = visit52.getPetId();
        pet48.addVisit(visit52);
        java.time.LocalDate localDate55 = visit52.getDate();
        visit35.setDate(localDate55);
        pet22.setBirthDate(localDate55);
        pet17.setBirthDate(localDate55);
        pet0.setBirthDate(localDate55);
        String str60 = pet0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate1 = pet0.getBirthDate();
        pet0.setName("hi!");
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        owner5.setFirstName("hi!");
        owner5.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        org.springframework.samples.petclinic.owner.PetType petType16 = null;
        pet14.setType(petType16);
        boolean boolean18 = pet14.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository19 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter20 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter20.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetType petType24 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale25 = null;
        String str26 = petTypeFormatter20.print(petType24, locale25);
        pet14.setType(petType24);
        owner5.addPet(pet14);
        Integer int29 = pet14.getId();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        String str31 = pet30.toString();
        org.springframework.samples.petclinic.owner.PetType petType32 = pet30.getType();
        java.time.LocalDate localDate33 = pet30.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner34 = pet30.getOwner();
        String str35 = pet30.toString();
        java.time.LocalDate localDate36 = pet30.getBirthDate();
        Integer int37 = pet30.getId();
        org.springframework.samples.petclinic.visit.Visit visit38 = new org.springframework.samples.petclinic.visit.Visit();
        visit38.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit41 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int42 = visit41.getPetId();
        java.time.LocalDate localDate43 = null;
        visit41.setDate(localDate43);
        java.time.LocalDate localDate45 = null;
        visit41.setDate(localDate45);
        org.springframework.samples.petclinic.owner.Owner owner47 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet48 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate49 = pet48.getBirthDate();
        String str50 = pet48.getName();
        owner47.addPet(pet48);
        org.springframework.samples.petclinic.visit.Visit visit52 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int53 = visit52.getPetId();
        pet48.addVisit(visit52);
        java.time.LocalDate localDate55 = visit52.getDate();
        visit41.setDate(localDate55);
        visit38.setDate(localDate55);
        pet30.setBirthDate(localDate55);
        pet14.setBirthDate(localDate55);
        pet0.setBirthDate(localDate55);
        String str61 = pet0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "hi!" + "'", str61.equals("hi!"));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        org.springframework.samples.petclinic.owner.Owner owner8 = pet0.getOwner();
        String str9 = pet0.toString();
        String str10 = pet0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setLastName("hi!");
        owner0.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        Integer int12 = visit5.getPetId();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        pet13.setName("hi!");
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        java.time.LocalDate localDate19 = null;
        visit17.setDate(localDate19);
        java.time.LocalDate localDate21 = null;
        visit17.setDate(localDate21);
        visit17.setDescription("");
        visit17.setPetId((Integer) (-1));
        visit17.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner29 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate31 = pet30.getBirthDate();
        String str32 = pet30.getName();
        owner29.addPet(pet30);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        pet30.addVisit(visit34);
        java.time.LocalDate localDate37 = visit34.getDate();
        visit17.setDate(localDate37);
        pet13.setBirthDate(localDate37);
        visit5.setDate(localDate37);
        visit5.setPetId((Integer) 10);
        org.springframework.samples.petclinic.owner.Pet pet43 = new org.springframework.samples.petclinic.owner.Pet();
        String str44 = pet43.toString();
        org.springframework.samples.petclinic.owner.PetType petType45 = pet43.getType();
        org.springframework.samples.petclinic.visit.Visit visit46 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int47 = visit46.getPetId();
        java.time.LocalDate localDate48 = null;
        visit46.setDate(localDate48);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int51 = visit50.getPetId();
        java.time.LocalDate localDate52 = null;
        visit50.setDate(localDate52);
        java.time.LocalDate localDate54 = null;
        visit50.setDate(localDate54);
        visit50.setDescription("");
        visit50.setPetId((Integer) (-1));
        visit50.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner62 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet63 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate64 = pet63.getBirthDate();
        String str65 = pet63.getName();
        owner62.addPet(pet63);
        org.springframework.samples.petclinic.visit.Visit visit67 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int68 = visit67.getPetId();
        pet63.addVisit(visit67);
        java.time.LocalDate localDate70 = visit67.getDate();
        visit50.setDate(localDate70);
        visit46.setDate(localDate70);
        pet43.setBirthDate(localDate70);
        visit5.setDate(localDate70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate70);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        String str6 = visit0.getDescription();
        String str7 = visit0.getDescription();
        visit0.setId((Integer) 100);
        String str10 = visit0.getDescription();
        java.time.LocalDate localDate11 = visit0.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        org.springframework.samples.petclinic.owner.Pet pet4 = new org.springframework.samples.petclinic.owner.Pet();
        String str5 = pet4.toString();
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet4.setType(petType6);
        boolean boolean8 = pet4.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository9 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter10 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter10.print(petType11, locale12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter10.print(petType14, locale15);
        pet4.setType(petType14);
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        String str19 = pet18.toString();
        java.time.LocalDate localDate20 = null;
        pet18.setBirthDate(localDate20);
        org.springframework.samples.petclinic.owner.Owner owner22 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate24 = pet23.getBirthDate();
        String str25 = pet23.getName();
        owner22.addPet(pet23);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int28 = visit27.getPetId();
        pet23.addVisit(visit27);
        Integer int30 = visit27.getPetId();
        Integer int31 = visit27.getPetId();
        boolean boolean32 = visit27.isNew();
        Integer int33 = visit27.getId();
        String str34 = visit27.getDescription();
        pet18.addVisit(visit27);
        pet4.addVisit(visit27);
        owner0.addPet(pet4);
        String str38 = owner0.getAddress();
        owner0.setLastName("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet42 = owner0.getPet("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        boolean boolean2 = pet0.isNew();
        org.springframework.samples.petclinic.owner.PetType petType3 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository4 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter5 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository4);
        org.springframework.samples.petclinic.owner.PetType petType6 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale7 = null;
        String str8 = petTypeFormatter5.print(petType6, locale7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter5.print(petType9, locale10);
        pet0.setType(petType9);
        petType9.setName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        Integer int10 = visit5.getPetId();
        java.time.LocalDate localDate11 = visit5.getDate();
        visit5.setPetId((Integer) 10);
        java.time.LocalDate localDate14 = visit5.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        visit0.setDescription("");
        visit0.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        Integer int14 = visit11.getPetId();
        Integer int15 = visit11.getPetId();
        boolean boolean16 = visit11.isNew();
        Integer int17 = visit11.getId();
        java.time.LocalDate localDate18 = visit11.getDate();
        visit0.setDate(localDate18);
        java.time.LocalDate localDate20 = visit0.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        String str14 = owner0.getAddress();
        owner0.setCity("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        Integer int14 = owner0.getId();
        String str15 = owner0.getCity();
        String str16 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter1.print(petType8, locale9);
        org.springframework.samples.petclinic.owner.PetRepository petRepository11 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter12 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository11);
        org.springframework.samples.petclinic.owner.PetType petType13 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale14 = null;
        String str15 = petTypeFormatter12.print(petType13, locale14);
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter17.print(petType18, locale19);
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter12.print(petType18, locale21);
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter1.print(petType18, locale23);
        java.util.Locale locale26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType27 = petTypeFormatter1.parse("hi!", locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.getName();
        java.time.LocalDate localDate5 = pet0.getBirthDate();
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType8 = pet0.getType();
        org.springframework.samples.petclinic.owner.Owner owner9 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner9);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        Integer int5 = vet0.getId();
        org.springframework.samples.petclinic.vet.Specialty specialty6 = null;
        vet0.addSpecialty(specialty6);
        org.springframework.samples.petclinic.vet.Specialty specialty8 = null;
        vet0.addSpecialty(specialty8);
        int int10 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = pet2.getType();
        java.time.LocalDate localDate5 = pet2.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner6 = pet2.getOwner();
        String str7 = pet2.toString();
        pet2.setName("hi!");
        owner0.addPet(pet2);
        org.springframework.samples.petclinic.owner.Pet pet12 = owner0.getPet("");
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet12);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        String str4 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        String str7 = vet0.getLastName();
        int int8 = vet0.getNrOfSpecialties();
        vet0.setLastName("");
        int int11 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty12 = null;
        vet0.addSpecialty(specialty12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        owner0.setTelephone("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("", false);
        org.springframework.samples.petclinic.owner.Owner owner7 = new org.springframework.samples.petclinic.owner.Owner();
        String str8 = owner7.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        String str13 = pet9.toString();
        owner7.addPet(pet9);
        owner7.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        String str18 = pet17.toString();
        boolean boolean19 = pet17.isNew();
        owner7.addPet(pet17);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet17.addVisit(visit21);
        owner0.addPet(pet17);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.Pet pet26 = owner0.getPet("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        org.springframework.samples.petclinic.model.NamedEntity namedEntity0 = new org.springframework.samples.petclinic.model.NamedEntity();
        namedEntity0.setName("hi!");
        String str3 = namedEntity0.getName();
        String str4 = namedEntity0.getName();
        String str5 = namedEntity0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!" + "'", str3.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        Integer int9 = visit5.getPetId();
        boolean boolean10 = visit5.isNew();
        Integer int11 = visit5.getId();
        Integer int12 = visit5.getPetId();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        pet13.setName("hi!");
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        java.time.LocalDate localDate19 = null;
        visit17.setDate(localDate19);
        java.time.LocalDate localDate21 = null;
        visit17.setDate(localDate21);
        visit17.setDescription("");
        visit17.setPetId((Integer) (-1));
        visit17.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner29 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate31 = pet30.getBirthDate();
        String str32 = pet30.getName();
        owner29.addPet(pet30);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        pet30.addVisit(visit34);
        java.time.LocalDate localDate37 = visit34.getDate();
        visit17.setDate(localDate37);
        pet13.setBirthDate(localDate37);
        visit5.setDate(localDate37);
        visit5.setPetId((Integer) 10);
        java.time.LocalDate localDate43 = visit5.getDate();
        org.springframework.samples.petclinic.owner.Pet pet44 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate45 = pet44.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner46 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet47 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate48 = pet47.getBirthDate();
        String str49 = pet47.getName();
        owner46.addPet(pet47);
        org.springframework.samples.petclinic.visit.Visit visit51 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int52 = visit51.getPetId();
        pet47.addVisit(visit51);
        visit51.setDescription("");
        java.time.LocalDate localDate56 = visit51.getDate();
        pet44.setBirthDate(localDate56);
        java.time.LocalDate localDate58 = pet44.getBirthDate();
        visit5.setDate(localDate58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate58);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        boolean boolean5 = owner0.isNew();
        String str6 = owner0.getFirstName();
        String str7 = owner0.getLastName();
        owner0.setLastName("hi!");
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        String str5 = pet0.toString();
        pet0.setName("hi!");
        pet0.setName("");
        pet0.setName("");
        java.time.LocalDate localDate12 = pet0.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit13 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int14 = visit13.getPetId();
        java.time.LocalDate localDate15 = null;
        visit13.setDate(localDate15);
        java.time.LocalDate localDate17 = null;
        visit13.setDate(localDate17);
        visit13.setDescription("");
        String str21 = visit13.getDescription();
        Integer int22 = visit13.getId();
        pet0.addVisit(visit13);
        visit13.setPetId((Integer) 0);
        org.springframework.samples.petclinic.owner.Pet pet26 = new org.springframework.samples.petclinic.owner.Pet();
        String str27 = pet26.toString();
        java.time.LocalDate localDate28 = null;
        pet26.setBirthDate(localDate28);
        pet26.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType32 = null;
        pet26.setType(petType32);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        pet26.addVisit(visit34);
        visit34.setDescription("");
        org.springframework.samples.petclinic.visit.Visit visit39 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int40 = visit39.getPetId();
        java.time.LocalDate localDate41 = null;
        visit39.setDate(localDate41);
        java.time.LocalDate localDate43 = null;
        visit39.setDate(localDate43);
        visit39.setDescription("");
        visit39.setPetId((Integer) (-1));
        org.springframework.samples.petclinic.owner.Pet pet49 = new org.springframework.samples.petclinic.owner.Pet();
        String str50 = pet49.toString();
        org.springframework.samples.petclinic.owner.PetType petType51 = null;
        pet49.setType(petType51);
        org.springframework.samples.petclinic.visit.Visit visit53 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int54 = visit53.getPetId();
        java.time.LocalDate localDate55 = null;
        visit53.setDate(localDate55);
        org.springframework.samples.petclinic.visit.Visit visit57 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int58 = visit57.getPetId();
        java.time.LocalDate localDate59 = null;
        visit57.setDate(localDate59);
        java.time.LocalDate localDate61 = null;
        visit57.setDate(localDate61);
        visit57.setDescription("");
        visit57.setPetId((Integer) (-1));
        visit57.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner69 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet70 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate71 = pet70.getBirthDate();
        String str72 = pet70.getName();
        owner69.addPet(pet70);
        org.springframework.samples.petclinic.visit.Visit visit74 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int75 = visit74.getPetId();
        pet70.addVisit(visit74);
        java.time.LocalDate localDate77 = visit74.getDate();
        visit57.setDate(localDate77);
        visit53.setDate(localDate77);
        visit53.setDescription("");
        pet49.addVisit(visit53);
        org.springframework.samples.petclinic.owner.Owner owner83 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet84 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate85 = pet84.getBirthDate();
        String str86 = pet84.getName();
        owner83.addPet(pet84);
        org.springframework.samples.petclinic.visit.Visit visit88 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int89 = visit88.getPetId();
        pet84.addVisit(visit88);
        visit88.setDescription("");
        java.time.LocalDate localDate93 = visit88.getDate();
        visit53.setDate(localDate93);
        visit39.setDate(localDate93);
        visit34.setDate(localDate93);
        visit13.setDate(localDate93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "" + "'", str21.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate93);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        String str4 = owner0.getCity();
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.Owner owner3 = pet0.getOwner();
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        java.time.LocalDate localDate6 = null;
        visit4.setDate(localDate6);
        java.time.LocalDate localDate8 = null;
        visit4.setDate(localDate8);
        visit4.setDescription("");
        visit4.setPetId((Integer) 1);
        visit4.setPetId((Integer) 0);
        pet0.addVisit(visit4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        String str7 = owner0.getTelephone();
        String str8 = owner0.getTelephone();
        String str9 = owner0.getCity();
        Class<?> wildcardClass10 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        java.time.LocalDate localDate6 = null;
        visit4.setDate(localDate6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        java.time.LocalDate localDate10 = null;
        visit8.setDate(localDate10);
        java.time.LocalDate localDate12 = null;
        visit8.setDate(localDate12);
        visit8.setDescription("");
        visit8.setPetId((Integer) (-1));
        visit8.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate22 = pet21.getBirthDate();
        String str23 = pet21.getName();
        owner20.addPet(pet21);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet21.addVisit(visit25);
        java.time.LocalDate localDate28 = visit25.getDate();
        visit8.setDate(localDate28);
        visit4.setDate(localDate28);
        visit4.setDescription("");
        pet0.addVisit(visit4);
        org.springframework.samples.petclinic.owner.Owner owner34 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet35 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate36 = pet35.getBirthDate();
        String str37 = pet35.getName();
        owner34.addPet(pet35);
        org.springframework.samples.petclinic.visit.Visit visit39 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int40 = visit39.getPetId();
        pet35.addVisit(visit39);
        visit39.setDescription("");
        java.time.LocalDate localDate44 = visit39.getDate();
        visit4.setDate(localDate44);
        visit4.setDescription("");
        Integer int48 = visit4.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int48);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        org.springframework.samples.petclinic.vet.Specialty specialty1 = null;
        vet0.addSpecialty(specialty1);
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        vet0.setFirstName("hi!");
        String str7 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty8 = null;
        vet0.addSpecialty(specialty8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        String str4 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        String str7 = vet0.getLastName();
        int int8 = vet0.getNrOfSpecialties();
        vet0.setLastName("");
        String str11 = vet0.getLastName();
        int int12 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        visit0.setDescription("");
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setLastName("hi!");
        String str16 = owner0.getTelephone();
        String str17 = owner0.getLastName();
        owner0.setCity("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!" + "'", str17.equals("hi!"));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        owner0.setTelephone("hi!");
        String str13 = owner0.getTelephone();
        String str14 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!" + "'", str13.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!" + "'", str14.equals("hi!"));
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getTelephone();
        owner0.setTelephone("hi!");
        String str10 = owner0.getFirstName();
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!" + "'", str10.equals("hi!"));
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("hi!", true);
        owner0.setTelephone("");
        String str10 = owner0.getCity();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        String str12 = pet11.toString();
        org.springframework.samples.petclinic.owner.PetType petType13 = null;
        pet11.setType(petType13);
        String str15 = pet11.getName();
        boolean boolean16 = pet11.isNew();
        String str17 = pet11.getName();
        owner0.addPet(pet11);
        org.springframework.samples.petclinic.owner.PetRepository petRepository19 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter20 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter20.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetRepository petRepository24 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter25 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter25.print(petType26, locale27);
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter20.print(petType26, locale29);
        org.springframework.samples.petclinic.owner.PetType petType31 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale32 = null;
        String str33 = petTypeFormatter20.print(petType31, locale32);
        org.springframework.samples.petclinic.owner.PetRepository petRepository34 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter35 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository34);
        org.springframework.samples.petclinic.owner.PetType petType36 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter35.print(petType36, locale37);
        org.springframework.samples.petclinic.owner.PetRepository petRepository39 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter40 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository39);
        org.springframework.samples.petclinic.owner.PetType petType41 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter40.print(petType41, locale42);
        org.springframework.samples.petclinic.owner.PetType petType44 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale45 = null;
        String str46 = petTypeFormatter40.print(petType44, locale45);
        java.util.Locale locale47 = null;
        String str48 = petTypeFormatter35.print(petType44, locale47);
        String str49 = petType44.toString();
        java.util.Locale locale50 = null;
        String str51 = petTypeFormatter20.print(petType44, locale50);
        pet11.setType(petType44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        String str7 = owner0.getAddress();
        String str8 = owner0.getAddress();
        String str9 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        org.springframework.samples.petclinic.owner.PetType petType7 = null;
        pet5.setType(petType7);
        boolean boolean9 = pet5.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository10 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter11 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter11.print(petType12, locale13);
        org.springframework.samples.petclinic.owner.PetType petType15 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter11.print(petType15, locale16);
        pet5.setType(petType15);
        pet0.setType(petType15);
        petType15.setName("");
        String str22 = petType15.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "" + "'", str22.equals(""));
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        String str14 = visit11.getDescription();
        visit11.setPetId((Integer) (-1));
        pet1.addVisit(visit11);
        String str18 = pet1.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        org.springframework.samples.petclinic.owner.PetValidator petValidator0 = new org.springframework.samples.petclinic.owner.PetValidator();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        String str2 = pet1.toString();
        org.springframework.samples.petclinic.owner.PetType petType3 = null;
        pet1.setType(petType3);
        boolean boolean5 = pet1.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository6 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter7 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter7.print(petType8, locale9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter7.print(petType11, locale12);
        pet1.setType(petType11);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        java.time.LocalDate localDate17 = null;
        pet15.setBirthDate(localDate17);
        org.springframework.samples.petclinic.owner.Owner owner19 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate21 = pet20.getBirthDate();
        String str22 = pet20.getName();
        owner19.addPet(pet20);
        org.springframework.samples.petclinic.visit.Visit visit24 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int25 = visit24.getPetId();
        pet20.addVisit(visit24);
        Integer int27 = visit24.getPetId();
        Integer int28 = visit24.getPetId();
        boolean boolean29 = visit24.isNew();
        Integer int30 = visit24.getId();
        String str31 = visit24.getDescription();
        pet15.addVisit(visit24);
        pet1.addVisit(visit24);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        java.time.LocalDate localDate36 = null;
        visit34.setDate(localDate36);
        java.time.LocalDate localDate38 = null;
        visit34.setDate(localDate38);
        org.springframework.samples.petclinic.owner.Owner owner40 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet41 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate42 = pet41.getBirthDate();
        String str43 = pet41.getName();
        owner40.addPet(pet41);
        org.springframework.samples.petclinic.visit.Visit visit45 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int46 = visit45.getPetId();
        pet41.addVisit(visit45);
        java.time.LocalDate localDate48 = visit45.getDate();
        visit34.setDate(localDate48);
        visit34.setPetId((Integer) 1);
        pet1.addVisit(visit34);
        org.springframework.samples.petclinic.owner.Pet pet53 = new org.springframework.samples.petclinic.owner.Pet();
        String str54 = pet53.toString();
        org.springframework.samples.petclinic.owner.PetType petType55 = pet53.getType();
        java.time.LocalDate localDate56 = pet53.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner57 = pet53.getOwner();
        String str58 = pet53.toString();
        java.time.LocalDate localDate59 = pet53.getBirthDate();
        Integer int60 = pet53.getId();
        org.springframework.samples.petclinic.visit.Visit visit61 = new org.springframework.samples.petclinic.visit.Visit();
        visit61.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit64 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int65 = visit64.getPetId();
        java.time.LocalDate localDate66 = null;
        visit64.setDate(localDate66);
        java.time.LocalDate localDate68 = null;
        visit64.setDate(localDate68);
        org.springframework.samples.petclinic.owner.Owner owner70 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet71 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate72 = pet71.getBirthDate();
        String str73 = pet71.getName();
        owner70.addPet(pet71);
        org.springframework.samples.petclinic.visit.Visit visit75 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int76 = visit75.getPetId();
        pet71.addVisit(visit75);
        java.time.LocalDate localDate78 = visit75.getDate();
        visit64.setDate(localDate78);
        visit61.setDate(localDate78);
        pet53.setBirthDate(localDate78);
        visit34.setDate(localDate78);
        org.springframework.validation.Errors errors83 = null;
        // The following exception was thrown during execution in test generation
        try {
            petValidator0.validate((Object) localDate78, errors83);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class java.time.LocalDate cannot be cast to class org.springframework.samples.petclinic.owner.Pet (java.time.LocalDate is in module java.base of loader 'bootstrap'; org.springframework.samples.petclinic.owner.Pet is in unnamed module of loader 'app')");
        } catch (ClassCastException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate78);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        owner0.setTelephone("hi!");
        String str13 = owner0.getFirstName();
        owner0.setTelephone("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!" + "'", str13.equals("hi!"));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        java.time.LocalDate localDate4 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        visit10.setDescription("");
        pet0.addVisit(visit10);
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter17.print(petType18, locale19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter17.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetType petType24 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale25 = null;
        String str26 = petTypeFormatter17.print(petType24, locale25);
        pet0.setType(petType24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        String str5 = owner0.getAddress();
        owner0.setFirstName("hi!");
        boolean boolean8 = owner0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        boolean boolean4 = pet0.isNew();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        visit10.setDescription("");
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        Integer int17 = visit10.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        String str1 = vet0.getFirstName();
        int int2 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        int int5 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty6 = null;
        vet0.addSpecialty(specialty6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setLastName("");
        owner0.setTelephone("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate9 = pet8.getBirthDate();
        pet8.setName("hi!");
        pet8.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter17.print(petType18, locale19);
        org.springframework.samples.petclinic.owner.PetRepository petRepository21 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter22 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter22.print(petType23, locale24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter22.print(petType26, locale27);
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter17.print(petType26, locale29);
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter15.print(petType26, locale31);
        pet8.setType(petType26);
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter1.print(petType26, locale34);
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType38 = petTypeFormatter1.parse("", locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        java.time.LocalDate localDate14 = visit11.getDate();
        visit0.setDate(localDate14);
        visit0.setPetId((Integer) 1);
        Integer int18 = visit0.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18.equals(1));
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        pet0.addVisit(visit8);
        visit8.setDescription("");
        org.springframework.samples.petclinic.owner.Owner owner13 = new org.springframework.samples.petclinic.owner.Owner();
        owner13.setLastName("");
        Integer int16 = owner13.getId();
        owner13.setAddress("");
        owner13.setTelephone("");
        String str21 = owner13.getFirstName();
        owner13.setLastName("hi!");
        String str24 = owner13.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet25 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate26 = pet25.getBirthDate();
        pet25.setName("hi!");
        pet25.setId((Integer) 1);
        owner13.addPet(pet25);
        pet25.setName("hi!");
        boolean boolean34 = pet25.isNew();
        org.springframework.samples.petclinic.visit.Visit visit35 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int36 = visit35.getPetId();
        java.time.LocalDate localDate37 = null;
        visit35.setDate(localDate37);
        org.springframework.samples.petclinic.visit.Visit visit39 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int40 = visit39.getPetId();
        java.time.LocalDate localDate41 = null;
        visit39.setDate(localDate41);
        java.time.LocalDate localDate43 = null;
        visit39.setDate(localDate43);
        visit39.setDescription("");
        visit39.setPetId((Integer) (-1));
        visit39.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner51 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet52 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate53 = pet52.getBirthDate();
        String str54 = pet52.getName();
        owner51.addPet(pet52);
        org.springframework.samples.petclinic.visit.Visit visit56 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int57 = visit56.getPetId();
        pet52.addVisit(visit56);
        java.time.LocalDate localDate59 = visit56.getDate();
        visit39.setDate(localDate59);
        visit35.setDate(localDate59);
        pet25.setBirthDate(localDate59);
        org.springframework.samples.petclinic.visit.Visit visit63 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner64 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet65 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate66 = pet65.getBirthDate();
        String str67 = pet65.getName();
        owner64.addPet(pet65);
        org.springframework.samples.petclinic.visit.Visit visit69 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int70 = visit69.getPetId();
        pet65.addVisit(visit69);
        java.time.LocalDate localDate72 = visit69.getDate();
        visit63.setDate(localDate72);
        pet25.setBirthDate(localDate72);
        visit8.setDate(localDate72);
        visit8.setDescription("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate72);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        owner0.setTelephone("hi!");
        owner0.setLastName("");
        String str12 = owner0.getFirstName();
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Owner owner15 = new org.springframework.samples.petclinic.owner.Owner();
        owner15.setLastName("");
        Integer int18 = owner15.getId();
        owner15.setAddress("");
        owner15.setTelephone("");
        String str23 = owner15.getFirstName();
        owner15.setLastName("hi!");
        String str26 = owner15.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet27 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate28 = pet27.getBirthDate();
        pet27.setName("hi!");
        pet27.setId((Integer) 1);
        owner15.addPet(pet27);
        pet27.setName("hi!");
        boolean boolean36 = pet27.isNew();
        org.springframework.samples.petclinic.visit.Visit visit37 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int38 = visit37.getPetId();
        java.time.LocalDate localDate39 = null;
        visit37.setDate(localDate39);
        org.springframework.samples.petclinic.visit.Visit visit41 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int42 = visit41.getPetId();
        java.time.LocalDate localDate43 = null;
        visit41.setDate(localDate43);
        java.time.LocalDate localDate45 = null;
        visit41.setDate(localDate45);
        visit41.setDescription("");
        visit41.setPetId((Integer) (-1));
        visit41.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner53 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet54 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate55 = pet54.getBirthDate();
        String str56 = pet54.getName();
        owner53.addPet(pet54);
        org.springframework.samples.petclinic.visit.Visit visit58 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int59 = visit58.getPetId();
        pet54.addVisit(visit58);
        java.time.LocalDate localDate61 = visit58.getDate();
        visit41.setDate(localDate61);
        visit37.setDate(localDate61);
        pet27.setBirthDate(localDate61);
        owner0.addPet(pet27);
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "" + "'", str26.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate61);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        String str3 = vet0.getLastName();
        vet0.setId((Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        visit0.setDescription("hi!");
        visit0.setPetId((Integer) (-1));
        String str5 = visit0.getDescription();
        Integer int6 = visit0.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6.equals((-1)));
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        owner0.setLastName("");
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        int int3 = vet0.getNrOfSpecialties();
        vet0.setLastName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        org.springframework.samples.petclinic.owner.Pet pet4 = new org.springframework.samples.petclinic.owner.Pet();
        String str5 = pet4.toString();
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet4.setType(petType6);
        boolean boolean8 = pet4.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository9 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter10 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter10.print(petType11, locale12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter10.print(petType14, locale15);
        pet4.setType(petType14);
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        String str19 = pet18.toString();
        java.time.LocalDate localDate20 = null;
        pet18.setBirthDate(localDate20);
        org.springframework.samples.petclinic.owner.Owner owner22 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate24 = pet23.getBirthDate();
        String str25 = pet23.getName();
        owner22.addPet(pet23);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int28 = visit27.getPetId();
        pet23.addVisit(visit27);
        Integer int30 = visit27.getPetId();
        Integer int31 = visit27.getPetId();
        boolean boolean32 = visit27.isNew();
        Integer int33 = visit27.getId();
        String str34 = visit27.getDescription();
        pet18.addVisit(visit27);
        pet4.addVisit(visit27);
        owner0.addPet(pet4);
        owner0.setFirstName("hi!");
        String str40 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "" + "'", str40.equals(""));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetRepository petRepository2 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter3 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository2);
        org.springframework.samples.petclinic.owner.PetType petType4 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale5 = null;
        String str6 = petTypeFormatter3.print(petType4, locale5);
        org.springframework.samples.petclinic.owner.PetRepository petRepository7 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter8 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository7);
        org.springframework.samples.petclinic.owner.PetType petType9 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale10 = null;
        String str11 = petTypeFormatter8.print(petType9, locale10);
        org.springframework.samples.petclinic.owner.PetType petType12 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter8.print(petType12, locale13);
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter3.print(petType12, locale15);
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter1.print(petType12, locale17);
        org.springframework.samples.petclinic.owner.PetRepository petRepository19 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter20 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository19);
        org.springframework.samples.petclinic.owner.PetType petType21 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale22 = null;
        String str23 = petTypeFormatter20.print(petType21, locale22);
        org.springframework.samples.petclinic.owner.PetType petType24 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale25 = null;
        String str26 = petTypeFormatter20.print(petType24, locale25);
        org.springframework.samples.petclinic.owner.PetType petType27 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter20.print(petType27, locale28);
        org.springframework.samples.petclinic.owner.PetRepository petRepository30 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter31 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository30);
        org.springframework.samples.petclinic.owner.PetType petType32 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale33 = null;
        String str34 = petTypeFormatter31.print(petType32, locale33);
        org.springframework.samples.petclinic.owner.PetRepository petRepository35 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter36 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository35);
        org.springframework.samples.petclinic.owner.PetType petType37 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale38 = null;
        String str39 = petTypeFormatter36.print(petType37, locale38);
        java.util.Locale locale40 = null;
        String str41 = petTypeFormatter31.print(petType37, locale40);
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter20.print(petType37, locale42);
        java.util.Locale locale44 = null;
        String str45 = petTypeFormatter1.print(petType37, locale44);
        java.util.Locale locale47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType48 = petTypeFormatter1.parse("hi!", locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setLastName("hi!");
        String str16 = owner0.getTelephone();
        owner0.setFirstName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        owner0.setAddress("hi!");
        String str10 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet11 = null;
        // The following exception was thrown during execution in test generation
        try {
            owner0.addPet(pet11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        String str5 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("");
        String str8 = owner0.getCity();
        String str9 = owner0.getLastName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet9 = new org.springframework.samples.petclinic.owner.Pet();
        String str10 = pet9.toString();
        org.springframework.samples.petclinic.owner.PetType petType11 = null;
        pet9.setType(petType11);
        boolean boolean13 = pet9.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetType petType16 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale17 = null;
        String str18 = petTypeFormatter15.print(petType16, locale17);
        org.springframework.samples.petclinic.owner.PetType petType19 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale20 = null;
        String str21 = petTypeFormatter15.print(petType19, locale20);
        pet9.setType(petType19);
        owner0.addPet(pet9);
        owner0.setLastName("hi!");
        owner0.setTelephone("");
        String str28 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        pet5.setId((Integer) 10);
        org.springframework.samples.petclinic.owner.Owner owner10 = pet5.getOwner();
        java.time.LocalDate localDate11 = null;
        pet5.setBirthDate(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner10);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType5 = pet0.getType();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.PetType petType7 = pet0.getType();
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        java.time.LocalDate localDate10 = null;
        visit8.setDate(localDate10);
        java.time.LocalDate localDate12 = null;
        visit8.setDate(localDate12);
        String str14 = visit8.getDescription();
        String str15 = visit8.getDescription();
        visit8.setId((Integer) 100);
        Integer int18 = visit8.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner19 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate21 = pet20.getBirthDate();
        String str22 = pet20.getName();
        owner19.addPet(pet20);
        org.springframework.samples.petclinic.visit.Visit visit24 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int25 = visit24.getPetId();
        pet20.addVisit(visit24);
        Integer int27 = visit24.getPetId();
        Integer int28 = visit24.getPetId();
        String str29 = visit24.getDescription();
        java.time.LocalDate localDate30 = visit24.getDate();
        java.time.LocalDate localDate31 = visit24.getDate();
        visit8.setDate(localDate31);
        pet0.addVisit(visit8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        String str1 = vet0.getFirstName();
        String str2 = vet0.getFirstName();
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setFirstName("hi!");
        owner0.setTelephone("");
        owner0.setCity("");
        owner0.setTelephone("hi!");
        owner0.setCity("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.getName();
        java.time.LocalDate localDate5 = pet0.getBirthDate();
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType8 = pet0.getType();
        String str9 = pet0.toString();
        String str10 = pet0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty2 = null;
        vet0.addSpecialty(specialty2);
        vet0.setFirstName("hi!");
        int int6 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty7 = null;
        vet0.addSpecialty(specialty7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet7 = owner0.getPet("hi!", false);
        String str8 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        visit0.setPetId((Integer) 10);
        org.springframework.samples.petclinic.visit.Visit visit3 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int4 = visit3.getPetId();
        java.time.LocalDate localDate5 = null;
        visit3.setDate(localDate5);
        java.time.LocalDate localDate7 = null;
        visit3.setDate(localDate7);
        org.springframework.samples.petclinic.owner.Owner owner9 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate11 = pet10.getBirthDate();
        String str12 = pet10.getName();
        owner9.addPet(pet10);
        org.springframework.samples.petclinic.visit.Visit visit14 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int15 = visit14.getPetId();
        pet10.addVisit(visit14);
        java.time.LocalDate localDate17 = visit14.getDate();
        visit3.setDate(localDate17);
        visit0.setDate(localDate17);
        String str20 = visit0.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        java.time.LocalDate localDate6 = null;
        visit4.setDate(localDate6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        java.time.LocalDate localDate10 = null;
        visit8.setDate(localDate10);
        java.time.LocalDate localDate12 = null;
        visit8.setDate(localDate12);
        visit8.setDescription("");
        visit8.setPetId((Integer) (-1));
        visit8.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate22 = pet21.getBirthDate();
        String str23 = pet21.getName();
        owner20.addPet(pet21);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet21.addVisit(visit25);
        java.time.LocalDate localDate28 = visit25.getDate();
        visit8.setDate(localDate28);
        visit4.setDate(localDate28);
        visit4.setDescription("");
        pet0.addVisit(visit4);
        org.springframework.samples.petclinic.owner.Owner owner34 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet35 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate36 = pet35.getBirthDate();
        String str37 = pet35.getName();
        owner34.addPet(pet35);
        org.springframework.samples.petclinic.visit.Visit visit39 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int40 = visit39.getPetId();
        pet35.addVisit(visit39);
        visit39.setDescription("");
        java.time.LocalDate localDate44 = visit39.getDate();
        visit4.setDate(localDate44);
        String str46 = visit4.getDescription();
        visit4.setDescription("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "" + "'", str46.equals(""));
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setPetId((Integer) (-1));
        Class<?> wildcardClass8 = visit0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.Owner owner3 = pet0.getOwner();
        pet0.setName("");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        java.time.LocalDate localDate14 = pet7.getBirthDate();
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        java.time.LocalDate localDate17 = null;
        visit15.setDate(localDate17);
        java.time.LocalDate localDate19 = null;
        visit15.setDate(localDate19);
        pet7.addVisit(visit15);
        pet0.addVisit(visit15);
        String str23 = pet0.toString();
        pet0.setName("");
        org.springframework.samples.petclinic.owner.Pet pet26 = new org.springframework.samples.petclinic.owner.Pet();
        String str27 = pet26.toString();
        org.springframework.samples.petclinic.owner.PetType petType28 = null;
        pet26.setType(petType28);
        String str30 = pet26.getName();
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        String str32 = pet31.toString();
        org.springframework.samples.petclinic.owner.PetType petType33 = null;
        pet31.setType(petType33);
        boolean boolean35 = pet31.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository36 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter37 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository36);
        org.springframework.samples.petclinic.owner.PetType petType38 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale39 = null;
        String str40 = petTypeFormatter37.print(petType38, locale39);
        org.springframework.samples.petclinic.owner.PetType petType41 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale42 = null;
        String str43 = petTypeFormatter37.print(petType41, locale42);
        pet31.setType(petType41);
        pet26.setType(petType41);
        pet0.setType(petType41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        org.springframework.samples.petclinic.owner.Pet pet4 = new org.springframework.samples.petclinic.owner.Pet();
        String str5 = pet4.toString();
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet4.setType(petType6);
        boolean boolean8 = pet4.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository9 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter10 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository9);
        org.springframework.samples.petclinic.owner.PetType petType11 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale12 = null;
        String str13 = petTypeFormatter10.print(petType11, locale12);
        org.springframework.samples.petclinic.owner.PetType petType14 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale15 = null;
        String str16 = petTypeFormatter10.print(petType14, locale15);
        pet4.setType(petType14);
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        String str19 = pet18.toString();
        java.time.LocalDate localDate20 = null;
        pet18.setBirthDate(localDate20);
        org.springframework.samples.petclinic.owner.Owner owner22 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet23 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate24 = pet23.getBirthDate();
        String str25 = pet23.getName();
        owner22.addPet(pet23);
        org.springframework.samples.petclinic.visit.Visit visit27 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int28 = visit27.getPetId();
        pet23.addVisit(visit27);
        Integer int30 = visit27.getPetId();
        Integer int31 = visit27.getPetId();
        boolean boolean32 = visit27.isNew();
        Integer int33 = visit27.getId();
        String str34 = visit27.getDescription();
        pet18.addVisit(visit27);
        pet4.addVisit(visit27);
        owner0.addPet(pet4);
        owner0.setFirstName("hi!");
        String str40 = owner0.getCity();
        String str41 = owner0.getCity();
        owner0.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        owner0.setTelephone("hi!");
        org.springframework.samples.petclinic.owner.Pet pet6 = owner0.getPet("", false);
        String str7 = owner0.getLastName();
        String str8 = owner0.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setPetId((Integer) 0);
        String str8 = visit0.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        visit0.setPetId((Integer) (-1));
        Integer int10 = visit0.getPetId();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        String str12 = pet11.toString();
        org.springframework.samples.petclinic.owner.PetType petType13 = null;
        pet11.setType(petType13);
        String str15 = pet11.toString();
        Integer int16 = pet11.getId();
        java.time.LocalDate localDate17 = pet11.getBirthDate();
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate19 = pet18.getBirthDate();
        pet18.setName("hi!");
        pet18.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository24 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter25 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository24);
        org.springframework.samples.petclinic.owner.PetRepository petRepository26 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter27 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository26);
        org.springframework.samples.petclinic.owner.PetType petType28 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter27.print(petType28, locale29);
        org.springframework.samples.petclinic.owner.PetRepository petRepository31 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter32 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository31);
        org.springframework.samples.petclinic.owner.PetType petType33 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter32.print(petType33, locale34);
        org.springframework.samples.petclinic.owner.PetType petType36 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter32.print(petType36, locale37);
        java.util.Locale locale39 = null;
        String str40 = petTypeFormatter27.print(petType36, locale39);
        java.util.Locale locale41 = null;
        String str42 = petTypeFormatter25.print(petType36, locale41);
        pet18.setType(petType36);
        org.springframework.samples.petclinic.owner.Owner owner44 = new org.springframework.samples.petclinic.owner.Owner();
        owner44.setLastName("");
        Integer int47 = owner44.getId();
        owner44.setAddress("");
        owner44.setTelephone("");
        String str52 = owner44.getFirstName();
        owner44.setLastName("hi!");
        String str55 = owner44.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet56 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate57 = pet56.getBirthDate();
        pet56.setName("hi!");
        pet56.setId((Integer) 1);
        owner44.addPet(pet56);
        pet56.setName("hi!");
        boolean boolean65 = pet56.isNew();
        org.springframework.samples.petclinic.visit.Visit visit66 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int67 = visit66.getPetId();
        java.time.LocalDate localDate68 = null;
        visit66.setDate(localDate68);
        org.springframework.samples.petclinic.visit.Visit visit70 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int71 = visit70.getPetId();
        java.time.LocalDate localDate72 = null;
        visit70.setDate(localDate72);
        java.time.LocalDate localDate74 = null;
        visit70.setDate(localDate74);
        visit70.setDescription("");
        visit70.setPetId((Integer) (-1));
        visit70.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner82 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet83 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate84 = pet83.getBirthDate();
        String str85 = pet83.getName();
        owner82.addPet(pet83);
        org.springframework.samples.petclinic.visit.Visit visit87 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int88 = visit87.getPetId();
        pet83.addVisit(visit87);
        java.time.LocalDate localDate90 = visit87.getDate();
        visit70.setDate(localDate90);
        visit66.setDate(localDate90);
        pet56.setBirthDate(localDate90);
        pet18.setBirthDate(localDate90);
        pet11.setBirthDate(localDate90);
        visit0.setDate(localDate90);
        java.time.LocalDate localDate97 = visit0.getDate();
        String str98 = visit0.getDescription();
        Integer int99 = visit0.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10.equals((-1)));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "" + "'", str55.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str98 + "' != '" + "" + "'", str98.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99.equals((-1)));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        int int2 = vet0.getNrOfSpecialties();
        org.springframework.samples.petclinic.vet.Specialty specialty3 = null;
        vet0.addSpecialty(specialty3);
        String str5 = vet0.getLastName();
        int int6 = vet0.getNrOfSpecialties();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        String str5 = owner0.getAddress();
        String str6 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        java.time.LocalDate localDate7 = null;
        pet5.setBirthDate(localDate7);
        String str9 = pet5.getName();
        org.springframework.samples.petclinic.owner.Owner owner10 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate12 = pet11.getBirthDate();
        String str13 = pet11.getName();
        owner10.addPet(pet11);
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        pet11.addVisit(visit15);
        Integer int18 = visit15.getPetId();
        String str19 = visit15.getDescription();
        java.time.LocalDate localDate20 = visit15.getDate();
        pet5.addVisit(visit15);
        java.time.LocalDate localDate22 = pet5.getBirthDate();
        java.time.LocalDate localDate23 = pet5.getBirthDate();
        owner0.addPet(pet5);
        org.springframework.samples.petclinic.owner.Pet pet27 = owner0.getPet("hi!", true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = pet27.isNew();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet27);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet5 = owner0.getPet("hi!");
        String str6 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        String str8 = pet7.toString();
        org.springframework.samples.petclinic.owner.PetType petType9 = pet7.getType();
        java.time.LocalDate localDate10 = pet7.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner11 = pet7.getOwner();
        String str12 = pet7.toString();
        pet7.setName("hi!");
        pet7.setName("");
        pet7.setName("");
        pet7.setName("hi!");
        owner0.addPet(pet7);
        org.springframework.samples.petclinic.owner.PetRepository petRepository22 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter23 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository22);
        org.springframework.samples.petclinic.owner.PetType petType24 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale25 = null;
        String str26 = petTypeFormatter23.print(petType24, locale25);
        org.springframework.samples.petclinic.owner.PetRepository petRepository27 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter28 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository27);
        org.springframework.samples.petclinic.owner.PetType petType29 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale30 = null;
        String str31 = petTypeFormatter28.print(petType29, locale30);
        java.util.Locale locale32 = null;
        String str33 = petTypeFormatter23.print(petType29, locale32);
        org.springframework.samples.petclinic.owner.PetType petType34 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale35 = null;
        String str36 = petTypeFormatter23.print(petType34, locale35);
        org.springframework.samples.petclinic.owner.PetRepository petRepository37 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter38 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository37);
        org.springframework.samples.petclinic.owner.PetType petType39 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale40 = null;
        String str41 = petTypeFormatter38.print(petType39, locale40);
        org.springframework.samples.petclinic.owner.PetRepository petRepository42 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter43 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository42);
        org.springframework.samples.petclinic.owner.PetType petType44 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale45 = null;
        String str46 = petTypeFormatter43.print(petType44, locale45);
        org.springframework.samples.petclinic.owner.PetType petType47 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale48 = null;
        String str49 = petTypeFormatter43.print(petType47, locale48);
        java.util.Locale locale50 = null;
        String str51 = petTypeFormatter38.print(petType47, locale50);
        String str52 = petType47.toString();
        java.util.Locale locale53 = null;
        String str54 = petTypeFormatter23.print(petType47, locale53);
        String str55 = petType47.toString();
        pet7.setType(petType47);
        petType47.setId((Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        owner0.setTelephone("");
        String str8 = owner0.getFirstName();
        owner0.setAddress("hi!");
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        String str12 = pet11.toString();
        org.springframework.samples.petclinic.owner.PetType petType13 = null;
        pet11.setType(petType13);
        String str15 = pet11.toString();
        pet11.setId((Integer) 10);
        owner0.addPet(pet11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Pet pet5 = new org.springframework.samples.petclinic.owner.Pet();
        String str6 = pet5.toString();
        owner0.addPet(pet5);
        owner0.setLastName("");
        String str10 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        org.springframework.samples.petclinic.vet.Vet vet0 = new org.springframework.samples.petclinic.vet.Vet();
        int int1 = vet0.getNrOfSpecialties();
        vet0.setId((Integer) 0);
        String str4 = vet0.getLastName();
        org.springframework.samples.petclinic.vet.Specialty specialty5 = null;
        vet0.addSpecialty(specialty5);
        String str7 = vet0.getLastName();
        int int8 = vet0.getNrOfSpecialties();
        vet0.setLastName("");
        String str11 = vet0.getLastName();
        Integer int12 = vet0.getId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12.equals(0));
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        pet0.setName("");
        org.springframework.samples.petclinic.visit.Visit visit14 = new org.springframework.samples.petclinic.visit.Visit();
        visit14.setPetId((Integer) 10);
        visit14.setId((Integer) 1);
        pet0.addVisit(visit14);
        org.springframework.samples.petclinic.owner.Owner owner20 = pet0.getOwner();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner20);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        String str3 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet5 = owner0.getPet("hi!");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        owner6.setLastName("");
        Integer int9 = owner6.getId();
        owner6.setAddress("");
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        String str13 = owner12.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        org.springframework.samples.petclinic.owner.PetType petType16 = null;
        pet14.setType(petType16);
        String str18 = pet14.toString();
        owner12.addPet(pet14);
        owner12.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        String str23 = pet22.toString();
        boolean boolean24 = pet22.isNew();
        owner12.addPet(pet22);
        owner6.addPet(pet22);
        owner0.addPet(pet22);
        String str28 = owner0.getLastName();
        org.springframework.samples.petclinic.owner.Pet pet29 = null;
        // The following exception was thrown during execution in test generation
        try {
            owner0.addPet(pet29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner9 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate11 = pet10.getBirthDate();
        String str12 = pet10.getName();
        owner9.addPet(pet10);
        org.springframework.samples.petclinic.owner.Pet pet14 = new org.springframework.samples.petclinic.owner.Pet();
        String str15 = pet14.toString();
        owner9.addPet(pet14);
        org.springframework.samples.petclinic.owner.Owner owner17 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet18 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate19 = pet18.getBirthDate();
        String str20 = pet18.getName();
        owner17.addPet(pet18);
        org.springframework.samples.petclinic.visit.Visit visit22 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int23 = visit22.getPetId();
        pet18.addVisit(visit22);
        visit22.setDescription("");
        java.time.LocalDate localDate27 = visit22.getDate();
        pet14.setBirthDate(localDate27);
        visit5.setDate(localDate27);
        org.springframework.samples.petclinic.owner.Owner owner30 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet31 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate32 = pet31.getBirthDate();
        String str33 = pet31.getName();
        owner30.addPet(pet31);
        org.springframework.samples.petclinic.visit.Visit visit35 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int36 = visit35.getPetId();
        pet31.addVisit(visit35);
        visit35.setDescription("");
        java.time.LocalDate localDate40 = visit35.getDate();
        visit5.setDate(localDate40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate40);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        String str6 = owner5.getAddress();
        owner5.setCity("hi!");
        String str9 = owner5.getAddress();
        owner5.setFirstName("");
        owner5.setCity("hi!");
        String str14 = owner5.getLastName();
        String str15 = owner5.getTelephone();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        java.time.LocalDate localDate3 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner4 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner5 = pet0.getOwner();
        org.springframework.samples.petclinic.owner.PetType petType6 = pet0.getType();
        // The following exception was thrown during execution in test generation
        try {
            String str7 = petType6.getName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType6);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter1.print(petType8, locale9);
        org.springframework.samples.petclinic.owner.PetRepository petRepository11 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter12 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository11);
        org.springframework.samples.petclinic.owner.PetType petType13 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale14 = null;
        String str15 = petTypeFormatter12.print(petType13, locale14);
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter17.print(petType18, locale19);
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter12.print(petType18, locale21);
        java.util.Locale locale23 = null;
        String str24 = petTypeFormatter1.print(petType18, locale23);
        org.springframework.samples.petclinic.owner.Owner owner25 = new org.springframework.samples.petclinic.owner.Owner();
        owner25.setLastName("");
        Integer int28 = owner25.getId();
        owner25.setAddress("");
        owner25.setTelephone("");
        String str33 = owner25.getFirstName();
        owner25.setLastName("hi!");
        String str36 = owner25.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet37 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate38 = pet37.getBirthDate();
        pet37.setName("hi!");
        pet37.setId((Integer) 1);
        owner25.addPet(pet37);
        pet37.setName("hi!");
        boolean boolean46 = pet37.isNew();
        org.springframework.samples.petclinic.owner.Owner owner47 = pet37.getOwner();
        org.springframework.samples.petclinic.owner.Pet pet48 = new org.springframework.samples.petclinic.owner.Pet();
        String str49 = pet48.toString();
        org.springframework.samples.petclinic.owner.PetType petType50 = pet48.getType();
        java.time.LocalDate localDate51 = pet48.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner52 = pet48.getOwner();
        String str53 = pet48.toString();
        pet48.setName("hi!");
        pet48.setName("");
        String str58 = pet48.toString();
        org.springframework.samples.petclinic.owner.Pet pet59 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate60 = pet59.getBirthDate();
        pet59.setName("hi!");
        pet59.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository65 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter66 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository65);
        org.springframework.samples.petclinic.owner.PetRepository petRepository67 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter68 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository67);
        org.springframework.samples.petclinic.owner.PetType petType69 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale70 = null;
        String str71 = petTypeFormatter68.print(petType69, locale70);
        org.springframework.samples.petclinic.owner.PetRepository petRepository72 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter73 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository72);
        org.springframework.samples.petclinic.owner.PetType petType74 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale75 = null;
        String str76 = petTypeFormatter73.print(petType74, locale75);
        org.springframework.samples.petclinic.owner.PetType petType77 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale78 = null;
        String str79 = petTypeFormatter73.print(petType77, locale78);
        java.util.Locale locale80 = null;
        String str81 = petTypeFormatter68.print(petType77, locale80);
        java.util.Locale locale82 = null;
        String str83 = petTypeFormatter66.print(petType77, locale82);
        pet59.setType(petType77);
        String str85 = petType77.toString();
        pet48.setType(petType77);
        pet37.setType(petType77);
        java.util.Locale locale88 = null;
        String str89 = petTypeFormatter1.print(petType77, locale88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "" + "'", str36.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "" + "'", str58.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = null;
        pet2.setType(petType4);
        String str6 = pet2.toString();
        owner0.addPet(pet2);
        owner0.setTelephone("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        boolean boolean12 = pet10.isNew();
        owner0.addPet(pet10);
        owner0.setTelephone("hi!");
        owner0.setAddress("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate9 = pet8.getBirthDate();
        pet8.setName("hi!");
        pet8.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter17.print(petType18, locale19);
        org.springframework.samples.petclinic.owner.PetRepository petRepository21 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter22 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter22.print(petType23, locale24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter22.print(petType26, locale27);
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter17.print(petType26, locale29);
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter15.print(petType26, locale31);
        pet8.setType(petType26);
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter1.print(petType26, locale34);
        org.springframework.samples.petclinic.owner.Pet pet36 = new org.springframework.samples.petclinic.owner.Pet();
        String str37 = pet36.toString();
        org.springframework.samples.petclinic.owner.PetType petType38 = pet36.getType();
        java.time.LocalDate localDate39 = pet36.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner40 = pet36.getOwner();
        String str41 = pet36.toString();
        pet36.setId((Integer) 100);
        org.springframework.samples.petclinic.visit.Visit visit44 = new org.springframework.samples.petclinic.visit.Visit();
        String str45 = visit44.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner46 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet47 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate48 = pet47.getBirthDate();
        String str49 = pet47.getName();
        owner46.addPet(pet47);
        org.springframework.samples.petclinic.visit.Visit visit51 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int52 = visit51.getPetId();
        pet47.addVisit(visit51);
        Integer int54 = visit51.getPetId();
        Integer int55 = visit51.getPetId();
        boolean boolean56 = visit51.isNew();
        Integer int57 = visit51.getId();
        java.time.LocalDate localDate58 = visit51.getDate();
        visit44.setDate(localDate58);
        pet36.setBirthDate(localDate58);
        org.springframework.samples.petclinic.owner.Owner owner61 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet62 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate63 = pet62.getBirthDate();
        String str64 = pet62.getName();
        owner61.addPet(pet62);
        java.time.LocalDate localDate66 = pet62.getBirthDate();
        boolean boolean67 = pet62.isNew();
        org.springframework.samples.petclinic.owner.PetType petType68 = new org.springframework.samples.petclinic.owner.PetType();
        pet62.setType(petType68);
        pet36.setType(petType68);
        java.util.Locale locale71 = null;
        String str72 = petTypeFormatter1.print(petType68, locale71);
        java.util.Locale locale74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType75 = petTypeFormatter1.parse("", locale74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        Integer int8 = visit5.getPetId();
        String str9 = visit5.getDescription();
        java.time.LocalDate localDate10 = visit5.getDate();
        String str11 = visit5.getDescription();
        java.time.LocalDate localDate12 = visit5.getDate();
        Integer int13 = visit5.getPetId();
        Integer int14 = visit5.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getCity();
        String str4 = owner0.getCity();
        String str5 = owner0.getAddress();
        String str6 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter1.print(petType8, locale9);
        boolean boolean11 = petType8.isNew();
        petType8.setName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        java.time.LocalDate localDate4 = pet0.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        visit10.setDescription("");
        pet0.addVisit(visit10);
        org.springframework.samples.petclinic.owner.Owner owner16 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet17 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate18 = pet17.getBirthDate();
        String str19 = pet17.getName();
        owner16.addPet(pet17);
        org.springframework.samples.petclinic.visit.Visit visit21 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int22 = visit21.getPetId();
        pet17.addVisit(visit21);
        Integer int24 = visit21.getPetId();
        Integer int25 = visit21.getPetId();
        boolean boolean26 = visit21.isNew();
        Integer int27 = visit21.getId();
        java.time.LocalDate localDate28 = visit21.getDate();
        java.time.LocalDate localDate29 = visit21.getDate();
        visit10.setDate(localDate29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        String str6 = visit0.getDescription();
        String str7 = visit0.getDescription();
        String str8 = visit0.getDescription();
        java.time.LocalDate localDate9 = visit0.getDate();
        org.springframework.samples.petclinic.owner.Owner owner10 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate12 = pet11.getBirthDate();
        String str13 = pet11.getName();
        owner10.addPet(pet11);
        org.springframework.samples.petclinic.visit.Visit visit15 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int16 = visit15.getPetId();
        pet11.addVisit(visit15);
        Integer int18 = visit15.getPetId();
        Integer int19 = visit15.getPetId();
        String str20 = visit15.getDescription();
        java.time.LocalDate localDate21 = visit15.getDate();
        visit0.setDate(localDate21);
        String str23 = visit0.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        String str9 = pet8.toString();
        org.springframework.samples.petclinic.owner.PetType petType10 = null;
        pet8.setType(petType10);
        String str12 = pet8.getName();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        String str14 = pet13.toString();
        org.springframework.samples.petclinic.owner.PetType petType15 = null;
        pet13.setType(petType15);
        boolean boolean17 = pet13.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository18 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter19 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository18);
        org.springframework.samples.petclinic.owner.PetType petType20 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter19.print(petType20, locale21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter19.print(petType23, locale24);
        pet13.setType(petType23);
        pet8.setType(petType23);
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter1.print(petType23, locale28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        boolean boolean5 = owner0.isNew();
        String str6 = owner0.getFirstName();
        owner0.setCity("hi!");
        String str9 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        visit0.setDescription("");
        visit0.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        Integer int14 = visit11.getPetId();
        Integer int15 = visit11.getPetId();
        boolean boolean16 = visit11.isNew();
        Integer int17 = visit11.getId();
        java.time.LocalDate localDate18 = visit11.getDate();
        visit0.setDate(localDate18);
        String str20 = visit0.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "hi!" + "'", str20.equals("hi!"));
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        String str3 = owner0.getTelephone();
        Integer int4 = owner0.getId();
        String str5 = owner0.getAddress();
        String str6 = owner0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        org.springframework.samples.petclinic.visit.Visit visit4 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int5 = visit4.getPetId();
        java.time.LocalDate localDate6 = null;
        visit4.setDate(localDate6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        java.time.LocalDate localDate10 = null;
        visit8.setDate(localDate10);
        java.time.LocalDate localDate12 = null;
        visit8.setDate(localDate12);
        visit8.setDescription("");
        visit8.setPetId((Integer) (-1));
        visit8.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner20 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet21 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate22 = pet21.getBirthDate();
        String str23 = pet21.getName();
        owner20.addPet(pet21);
        org.springframework.samples.petclinic.visit.Visit visit25 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int26 = visit25.getPetId();
        pet21.addVisit(visit25);
        java.time.LocalDate localDate28 = visit25.getDate();
        visit8.setDate(localDate28);
        visit4.setDate(localDate28);
        visit4.setDescription("");
        pet0.addVisit(visit4);
        java.time.LocalDate localDate34 = visit4.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        String str8 = visit0.getDescription();
        String str9 = visit0.getDescription();
        visit0.setId((Integer) 1);
        Integer int12 = visit0.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setCity("");
        String str7 = owner0.getFirstName();
        owner0.setLastName("");
        owner0.setFirstName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        pet0.addVisit(visit8);
        visit8.setDescription("");
        visit8.setPetId((Integer) (-1));
        String str15 = visit8.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        String str1 = visit0.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner2 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet3 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate4 = pet3.getBirthDate();
        String str5 = pet3.getName();
        owner2.addPet(pet3);
        org.springframework.samples.petclinic.visit.Visit visit7 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int8 = visit7.getPetId();
        pet3.addVisit(visit7);
        Integer int10 = visit7.getPetId();
        Integer int11 = visit7.getPetId();
        boolean boolean12 = visit7.isNew();
        Integer int13 = visit7.getId();
        java.time.LocalDate localDate14 = visit7.getDate();
        visit0.setDate(localDate14);
        String str16 = visit0.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        Integer int13 = visit10.getPetId();
        String str14 = visit10.getDescription();
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        java.time.LocalDate localDate17 = visit10.getDate();
        java.time.LocalDate localDate18 = visit10.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        owner0.setAddress("hi!");
        String str5 = owner0.getAddress();
        String str6 = owner0.getFirstName();
        org.springframework.samples.petclinic.owner.Pet pet8 = owner0.getPet("");
        owner0.setTelephone("");
        owner0.setCity("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet8);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        String str7 = owner0.getTelephone();
        String str8 = owner0.getFirstName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        pet0.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType6 = null;
        pet0.setType(petType6);
        org.springframework.samples.petclinic.visit.Visit visit8 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int9 = visit8.getPetId();
        pet0.addVisit(visit8);
        Integer int11 = visit8.getPetId();
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        String str20 = visit17.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner21 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate23 = pet22.getBirthDate();
        String str24 = pet22.getName();
        owner21.addPet(pet22);
        org.springframework.samples.petclinic.owner.Pet pet26 = new org.springframework.samples.petclinic.owner.Pet();
        String str27 = pet26.toString();
        owner21.addPet(pet26);
        org.springframework.samples.petclinic.owner.Owner owner29 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate31 = pet30.getBirthDate();
        String str32 = pet30.getName();
        owner29.addPet(pet30);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        pet30.addVisit(visit34);
        visit34.setDescription("");
        java.time.LocalDate localDate39 = visit34.getDate();
        pet26.setBirthDate(localDate39);
        visit17.setDate(localDate39);
        visit8.setDate(localDate39);
        Integer int43 = visit8.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11.equals(1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43.equals(1));
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        owner0.setCity("");
        String str7 = owner0.getFirstName();
        owner0.setLastName("");
        owner0.setAddress("");
        Class<?> wildcardClass12 = owner0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getTelephone();
        owner0.setCity("hi!");
        String str7 = owner0.getTelephone();
        owner0.setCity("");
        org.springframework.samples.petclinic.owner.Pet pet10 = new org.springframework.samples.petclinic.owner.Pet();
        String str11 = pet10.toString();
        org.springframework.samples.petclinic.owner.PetType petType12 = pet10.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository13 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter14 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository13);
        org.springframework.samples.petclinic.owner.PetType petType15 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter14.print(petType15, locale16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter14.print(petType18, locale19);
        pet10.setType(petType18);
        java.time.LocalDate localDate22 = pet10.getBirthDate();
        owner0.addPet(pet10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate22);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.owner.Owner owner5 = pet1.getOwner();
        org.springframework.samples.petclinic.owner.Owner owner6 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet7 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate8 = pet7.getBirthDate();
        String str9 = pet7.getName();
        owner6.addPet(pet7);
        org.springframework.samples.petclinic.visit.Visit visit11 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int12 = visit11.getPetId();
        pet7.addVisit(visit11);
        String str14 = visit11.getDescription();
        visit11.setPetId((Integer) (-1));
        pet1.addVisit(visit11);
        pet1.setId((Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(owner5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        String str3 = owner0.getFirstName();
        String str4 = owner0.getCity();
        String str5 = owner0.getLastName();
        String str6 = owner0.getCity();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        Integer int2 = visit0.getPetId();
        boolean boolean3 = visit0.isNew();
        java.time.LocalDate localDate4 = visit0.getDate();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        java.time.LocalDate localDate8 = visit0.getDate();
        Integer int9 = visit0.getPetId();
        boolean boolean10 = visit0.isNew();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setLastName("");
        Integer int3 = owner0.getId();
        owner0.setAddress("");
        String str6 = owner0.getLastName();
        String str7 = owner0.getAddress();
        owner0.setFirstName("");
        owner0.setCity("hi!");
        org.springframework.samples.petclinic.owner.Pet pet14 = owner0.getPet("", true);
        // The following exception was thrown during execution in test generation
        try {
            pet14.setId((Integer) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet14);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetRepository petRepository5 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter6 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository5);
        org.springframework.samples.petclinic.owner.PetType petType7 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale8 = null;
        String str9 = petTypeFormatter6.print(petType7, locale8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter6.print(petType10, locale11);
        java.util.Locale locale13 = null;
        String str14 = petTypeFormatter1.print(petType10, locale13);
        org.springframework.samples.petclinic.owner.Pet pet15 = new org.springframework.samples.petclinic.owner.Pet();
        String str16 = pet15.toString();
        org.springframework.samples.petclinic.owner.PetType petType17 = null;
        pet15.setType(petType17);
        String str19 = pet15.getName();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        String str21 = pet20.toString();
        org.springframework.samples.petclinic.owner.PetType petType22 = null;
        pet20.setType(petType22);
        boolean boolean24 = pet20.isNew();
        org.springframework.samples.petclinic.owner.PetRepository petRepository25 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter26 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository25);
        org.springframework.samples.petclinic.owner.PetType petType27 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale28 = null;
        String str29 = petTypeFormatter26.print(petType27, locale28);
        org.springframework.samples.petclinic.owner.PetType petType30 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter26.print(petType30, locale31);
        pet20.setType(petType30);
        pet15.setType(petType30);
        petType30.setName("");
        java.util.Locale locale37 = null;
        String str38 = petTypeFormatter1.print(petType30, locale37);
        org.springframework.samples.petclinic.owner.Owner owner39 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet40 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate41 = pet40.getBirthDate();
        String str42 = pet40.getName();
        owner39.addPet(pet40);
        java.time.LocalDate localDate44 = pet40.getBirthDate();
        boolean boolean45 = pet40.isNew();
        org.springframework.samples.petclinic.owner.PetType petType46 = new org.springframework.samples.petclinic.owner.PetType();
        pet40.setType(petType46);
        org.springframework.samples.petclinic.owner.PetType petType48 = pet40.getType();
        java.util.Locale locale49 = null;
        String str50 = petTypeFormatter1.print(petType48, locale49);
        java.util.Locale locale52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.samples.petclinic.owner.PetType petType53 = petTypeFormatter1.parse("", locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "" + "'", str38.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(petType48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet2 = owner0.getPet("hi!");
        String str3 = owner0.getTelephone();
        owner0.setLastName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(pet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        org.springframework.samples.petclinic.visit.Visit visit0 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int1 = visit0.getPetId();
        java.time.LocalDate localDate2 = null;
        visit0.setDate(localDate2);
        java.time.LocalDate localDate4 = null;
        visit0.setDate(localDate4);
        visit0.setDescription("");
        String str8 = visit0.getDescription();
        String str9 = visit0.getDescription();
        Integer int10 = visit0.getPetId();
        org.springframework.samples.petclinic.owner.Pet pet11 = new org.springframework.samples.petclinic.owner.Pet();
        String str12 = pet11.toString();
        java.time.LocalDate localDate13 = null;
        pet11.setBirthDate(localDate13);
        pet11.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetType petType17 = null;
        pet11.setType(petType17);
        org.springframework.samples.petclinic.visit.Visit visit19 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int20 = visit19.getPetId();
        pet11.addVisit(visit19);
        visit19.setDescription("");
        org.springframework.samples.petclinic.owner.Owner owner24 = new org.springframework.samples.petclinic.owner.Owner();
        owner24.setLastName("");
        Integer int27 = owner24.getId();
        owner24.setAddress("");
        owner24.setTelephone("");
        String str32 = owner24.getFirstName();
        owner24.setLastName("hi!");
        String str35 = owner24.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet36 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate37 = pet36.getBirthDate();
        pet36.setName("hi!");
        pet36.setId((Integer) 1);
        owner24.addPet(pet36);
        pet36.setName("hi!");
        boolean boolean45 = pet36.isNew();
        org.springframework.samples.petclinic.visit.Visit visit46 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int47 = visit46.getPetId();
        java.time.LocalDate localDate48 = null;
        visit46.setDate(localDate48);
        org.springframework.samples.petclinic.visit.Visit visit50 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int51 = visit50.getPetId();
        java.time.LocalDate localDate52 = null;
        visit50.setDate(localDate52);
        java.time.LocalDate localDate54 = null;
        visit50.setDate(localDate54);
        visit50.setDescription("");
        visit50.setPetId((Integer) (-1));
        visit50.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner62 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet63 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate64 = pet63.getBirthDate();
        String str65 = pet63.getName();
        owner62.addPet(pet63);
        org.springframework.samples.petclinic.visit.Visit visit67 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int68 = visit67.getPetId();
        pet63.addVisit(visit67);
        java.time.LocalDate localDate70 = visit67.getDate();
        visit50.setDate(localDate70);
        visit46.setDate(localDate70);
        pet36.setBirthDate(localDate70);
        org.springframework.samples.petclinic.visit.Visit visit74 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner75 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet76 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate77 = pet76.getBirthDate();
        String str78 = pet76.getName();
        owner75.addPet(pet76);
        org.springframework.samples.petclinic.visit.Visit visit80 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int81 = visit80.getPetId();
        pet76.addVisit(visit80);
        java.time.LocalDate localDate83 = visit80.getDate();
        visit74.setDate(localDate83);
        pet36.setBirthDate(localDate83);
        visit19.setDate(localDate83);
        visit0.setDate(localDate83);
        Integer int88 = visit0.getPetId();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "" + "'", str35.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int88);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        owner0.setId((Integer) 1);
        owner0.setCity("");
        owner0.setId((Integer) 0);
        String str7 = owner0.getTelephone();
        org.springframework.samples.petclinic.owner.Owner owner8 = new org.springframework.samples.petclinic.owner.Owner();
        owner8.setLastName("");
        Integer int11 = owner8.getId();
        owner8.setAddress("");
        owner8.setTelephone("");
        String str16 = owner8.getFirstName();
        owner8.setLastName("hi!");
        String str19 = owner8.getTelephone();
        org.springframework.samples.petclinic.owner.Pet pet20 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate21 = pet20.getBirthDate();
        pet20.setName("hi!");
        pet20.setId((Integer) 1);
        owner8.addPet(pet20);
        pet20.setName("hi!");
        boolean boolean29 = pet20.isNew();
        org.springframework.samples.petclinic.visit.Visit visit30 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int31 = visit30.getPetId();
        java.time.LocalDate localDate32 = null;
        visit30.setDate(localDate32);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        java.time.LocalDate localDate36 = null;
        visit34.setDate(localDate36);
        java.time.LocalDate localDate38 = null;
        visit34.setDate(localDate38);
        visit34.setDescription("");
        visit34.setPetId((Integer) (-1));
        visit34.setDescription("hi!");
        org.springframework.samples.petclinic.owner.Owner owner46 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet47 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate48 = pet47.getBirthDate();
        String str49 = pet47.getName();
        owner46.addPet(pet47);
        org.springframework.samples.petclinic.visit.Visit visit51 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int52 = visit51.getPetId();
        pet47.addVisit(visit51);
        java.time.LocalDate localDate54 = visit51.getDate();
        visit34.setDate(localDate54);
        visit30.setDate(localDate54);
        pet20.setBirthDate(localDate54);
        org.springframework.samples.petclinic.visit.Visit visit58 = new org.springframework.samples.petclinic.visit.Visit();
        org.springframework.samples.petclinic.owner.Owner owner59 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet60 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate61 = pet60.getBirthDate();
        String str62 = pet60.getName();
        owner59.addPet(pet60);
        org.springframework.samples.petclinic.visit.Visit visit64 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int65 = visit64.getPetId();
        pet60.addVisit(visit64);
        java.time.LocalDate localDate67 = visit64.getDate();
        visit58.setDate(localDate67);
        pet20.setBirthDate(localDate67);
        pet20.setName("");
        owner0.addPet(pet20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "" + "'", str19.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate67);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        java.time.LocalDate localDate2 = null;
        pet0.setBirthDate(localDate2);
        String str4 = pet0.getName();
        org.springframework.samples.petclinic.owner.Owner owner5 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet6 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate7 = pet6.getBirthDate();
        String str8 = pet6.getName();
        owner5.addPet(pet6);
        org.springframework.samples.petclinic.visit.Visit visit10 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int11 = visit10.getPetId();
        pet6.addVisit(visit10);
        Integer int13 = visit10.getPetId();
        String str14 = visit10.getDescription();
        java.time.LocalDate localDate15 = visit10.getDate();
        pet0.addVisit(visit10);
        Integer int17 = visit10.getPetId();
        visit10.setId((Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        String str8 = visit5.getDescription();
        visit5.setDescription("");
        String str11 = visit5.getDescription();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        String str1 = owner0.getAddress();
        org.springframework.samples.petclinic.owner.Pet pet2 = new org.springframework.samples.petclinic.owner.Pet();
        String str3 = pet2.toString();
        org.springframework.samples.petclinic.owner.PetType petType4 = pet2.getType();
        java.time.LocalDate localDate5 = pet2.getBirthDate();
        org.springframework.samples.petclinic.owner.Owner owner6 = pet2.getOwner();
        String str7 = pet2.toString();
        pet2.setName("hi!");
        owner0.addPet(pet2);
        String str11 = pet2.getName();
        org.springframework.samples.petclinic.owner.PetType petType12 = pet2.getType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(owner6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!" + "'", str11.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType12);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        org.springframework.samples.petclinic.owner.PetRepository petRepository0 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter1 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository0);
        org.springframework.samples.petclinic.owner.PetType petType2 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale3 = null;
        String str4 = petTypeFormatter1.print(petType2, locale3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter1.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.Pet pet8 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate9 = pet8.getBirthDate();
        pet8.setName("hi!");
        pet8.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.PetRepository petRepository14 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter15 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository14);
        org.springframework.samples.petclinic.owner.PetRepository petRepository16 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter17 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter17.print(petType18, locale19);
        org.springframework.samples.petclinic.owner.PetRepository petRepository21 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter22 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository21);
        org.springframework.samples.petclinic.owner.PetType petType23 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale24 = null;
        String str25 = petTypeFormatter22.print(petType23, locale24);
        org.springframework.samples.petclinic.owner.PetType petType26 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale27 = null;
        String str28 = petTypeFormatter22.print(petType26, locale27);
        java.util.Locale locale29 = null;
        String str30 = petTypeFormatter17.print(petType26, locale29);
        java.util.Locale locale31 = null;
        String str32 = petTypeFormatter15.print(petType26, locale31);
        pet8.setType(petType26);
        java.util.Locale locale34 = null;
        String str35 = petTypeFormatter1.print(petType26, locale34);
        org.springframework.samples.petclinic.owner.Owner owner36 = new org.springframework.samples.petclinic.owner.Owner();
        owner36.setId((Integer) 1);
        org.springframework.samples.petclinic.owner.Pet pet39 = new org.springframework.samples.petclinic.owner.Pet();
        String str40 = pet39.toString();
        java.time.LocalDate localDate41 = null;
        pet39.setBirthDate(localDate41);
        String str43 = pet39.getName();
        owner36.addPet(pet39);
        org.springframework.samples.petclinic.owner.Pet pet45 = new org.springframework.samples.petclinic.owner.Pet();
        String str46 = pet45.toString();
        org.springframework.samples.petclinic.owner.PetType petType47 = pet45.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository48 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter49 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository48);
        org.springframework.samples.petclinic.owner.PetType petType50 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale51 = null;
        String str52 = petTypeFormatter49.print(petType50, locale51);
        org.springframework.samples.petclinic.owner.PetType petType53 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale54 = null;
        String str55 = petTypeFormatter49.print(petType53, locale54);
        pet45.setType(petType53);
        pet39.setType(petType53);
        java.util.Locale locale58 = null;
        String str59 = petTypeFormatter1.print(petType53, locale58);
        org.springframework.samples.petclinic.owner.PetRepository petRepository60 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter61 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository60);
        org.springframework.samples.petclinic.owner.PetType petType62 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale63 = null;
        String str64 = petTypeFormatter61.print(petType62, locale63);
        org.springframework.samples.petclinic.owner.PetRepository petRepository65 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter66 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository65);
        org.springframework.samples.petclinic.owner.PetType petType67 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale68 = null;
        String str69 = petTypeFormatter66.print(petType67, locale68);
        java.util.Locale locale70 = null;
        String str71 = petTypeFormatter61.print(petType67, locale70);
        org.springframework.samples.petclinic.owner.PetType petType72 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale73 = null;
        String str74 = petTypeFormatter61.print(petType72, locale73);
        org.springframework.samples.petclinic.owner.PetRepository petRepository75 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter76 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository75);
        org.springframework.samples.petclinic.owner.PetType petType77 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale78 = null;
        String str79 = petTypeFormatter76.print(petType77, locale78);
        org.springframework.samples.petclinic.owner.PetRepository petRepository80 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter81 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository80);
        org.springframework.samples.petclinic.owner.PetType petType82 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale83 = null;
        String str84 = petTypeFormatter81.print(petType82, locale83);
        org.springframework.samples.petclinic.owner.PetType petType85 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale86 = null;
        String str87 = petTypeFormatter81.print(petType85, locale86);
        java.util.Locale locale88 = null;
        String str89 = petTypeFormatter76.print(petType85, locale88);
        String str90 = petType85.toString();
        java.util.Locale locale91 = null;
        String str92 = petTypeFormatter61.print(petType85, locale91);
        java.util.Locale locale93 = null;
        String str94 = petTypeFormatter1.print(petType85, locale93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = null;
        pet0.setType(petType2);
        String str4 = pet0.toString();
        Integer int5 = pet0.getId();
        java.time.LocalDate localDate6 = pet0.getBirthDate();
        String str7 = pet0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        org.springframework.samples.petclinic.owner.Owner owner0 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet1 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate2 = pet1.getBirthDate();
        String str3 = pet1.getName();
        owner0.addPet(pet1);
        org.springframework.samples.petclinic.visit.Visit visit5 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int6 = visit5.getPetId();
        pet1.addVisit(visit5);
        org.springframework.samples.petclinic.owner.PetRepository petRepository8 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter9 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository8);
        org.springframework.samples.petclinic.owner.PetType petType10 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale11 = null;
        String str12 = petTypeFormatter9.print(petType10, locale11);
        org.springframework.samples.petclinic.owner.PetRepository petRepository13 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter14 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository13);
        org.springframework.samples.petclinic.owner.PetType petType15 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale16 = null;
        String str17 = petTypeFormatter14.print(petType15, locale16);
        org.springframework.samples.petclinic.owner.PetType petType18 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale19 = null;
        String str20 = petTypeFormatter14.print(petType18, locale19);
        java.util.Locale locale21 = null;
        String str22 = petTypeFormatter9.print(petType18, locale21);
        String str23 = petType18.toString();
        pet1.setType(petType18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        org.springframework.samples.petclinic.owner.Pet pet0 = new org.springframework.samples.petclinic.owner.Pet();
        String str1 = pet0.toString();
        org.springframework.samples.petclinic.owner.PetType petType2 = pet0.getType();
        org.springframework.samples.petclinic.owner.PetRepository petRepository3 = null;
        org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter4 = new org.springframework.samples.petclinic.owner.PetTypeFormatter(petRepository3);
        org.springframework.samples.petclinic.owner.PetType petType5 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale6 = null;
        String str7 = petTypeFormatter4.print(petType5, locale6);
        org.springframework.samples.petclinic.owner.PetType petType8 = new org.springframework.samples.petclinic.owner.PetType();
        java.util.Locale locale9 = null;
        String str10 = petTypeFormatter4.print(petType8, locale9);
        pet0.setType(petType8);
        org.springframework.samples.petclinic.owner.Owner owner12 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet13 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate14 = pet13.getBirthDate();
        String str15 = pet13.getName();
        owner12.addPet(pet13);
        org.springframework.samples.petclinic.visit.Visit visit17 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int18 = visit17.getPetId();
        pet13.addVisit(visit17);
        String str20 = visit17.getDescription();
        org.springframework.samples.petclinic.owner.Owner owner21 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet22 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate23 = pet22.getBirthDate();
        String str24 = pet22.getName();
        owner21.addPet(pet22);
        org.springframework.samples.petclinic.owner.Pet pet26 = new org.springframework.samples.petclinic.owner.Pet();
        String str27 = pet26.toString();
        owner21.addPet(pet26);
        org.springframework.samples.petclinic.owner.Owner owner29 = new org.springframework.samples.petclinic.owner.Owner();
        org.springframework.samples.petclinic.owner.Pet pet30 = new org.springframework.samples.petclinic.owner.Pet();
        java.time.LocalDate localDate31 = pet30.getBirthDate();
        String str32 = pet30.getName();
        owner29.addPet(pet30);
        org.springframework.samples.petclinic.visit.Visit visit34 = new org.springframework.samples.petclinic.visit.Visit();
        Integer int35 = visit34.getPetId();
        pet30.addVisit(visit34);
        visit34.setDescription("");
        java.time.LocalDate localDate39 = visit34.getDate();
        pet26.setBirthDate(localDate39);
        visit17.setDate(localDate39);
        visit17.setPetId((Integer) 0);
        pet0.addVisit(visit17);
        visit17.setPetId((Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(petType2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(localDate31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(localDate39);
    }
}

