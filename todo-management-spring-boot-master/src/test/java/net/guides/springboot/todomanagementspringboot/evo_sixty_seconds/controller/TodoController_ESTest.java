/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 12 23:16:24 GMT 2019
 */

package net.guides.springboot.todomanagementspringboot.evo_sixty_seconds.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Optional;
import net.guides.springboot.todomanagement.controller.TodoController;
import net.guides.springboot.todomanagement.model.Todo;
import net.guides.springboot.todomanagement.service.ITodoService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TodoController_ESTest extends TodoController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TodoController todoController0 = new TodoController();
      Todo todo0 = new Todo("-&Atv\tnEr l)", "-&Atv\tnEr l)", (Date) null, true);
      Optional<Todo> optional0 = Optional.of(todo0);
      ITodoService iTodoService0 = mock(ITodoService.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(iTodoService0).getTodoById(anyLong());
      Injector.inject(todoController0, (Class<?>) TodoController.class, "todoService", (Object) iTodoService0);
      Injector.validateBean(todoController0, (Class<?>) TodoController.class);
      ModelMap modelMap0 = new ModelMap();
      String string0 = todoController0.showUpdateTodoPage((-2103L), modelMap0);
      assertEquals("todo", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TodoController todoController0 = new TodoController();
      ITodoService iTodoService0 = mock(ITodoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(todoController0, (Class<?>) TodoController.class, "todoService", (Object) iTodoService0);
      Injector.validateBean(todoController0, (Class<?>) TodoController.class);
      ModelMap modelMap0 = new ModelMap();
      MockDate mockDate0 = new MockDate((-688L));
      Todo todo0 = new Todo("redirect:/list-todos", "redirect:/list-todos", mockDate0, false);
      // Undeclared exception!
      try { 
        todoController0.updateTodo(modelMap0, todo0, (BindingResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.guides.springboot.todomanagement.controller.TodoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TodoController todoController0 = new TodoController();
      ITodoService iTodoService0 = mock(ITodoService.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(iTodoService0).getTodoById(anyLong());
      Injector.inject(todoController0, (Class<?>) TodoController.class, "todoService", (Object) iTodoService0);
      Injector.validateBean(todoController0, (Class<?>) TodoController.class);
      ModelMap modelMap0 = new ModelMap();
      // Undeclared exception!
      try { 
        todoController0.showUpdateTodoPage(0L, modelMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.guides.springboot.todomanagement.controller.TodoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TodoController todoController0 = new TodoController();
      ITodoService iTodoService0 = mock(ITodoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(todoController0, (Class<?>) TodoController.class, "todoService", (Object) iTodoService0);
      Injector.validateBean(todoController0, (Class<?>) TodoController.class);
      // Undeclared exception!
      try { 
        todoController0.showAddTodoPage((ModelMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.guides.springboot.todomanagement.controller.TodoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TodoController todoController0 = new TodoController();
      ITodoService iTodoService0 = mock(ITodoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(todoController0, (Class<?>) TodoController.class, "todoService", (Object) iTodoService0);
      Injector.validateBean(todoController0, (Class<?>) TodoController.class);
      ModelMap modelMap0 = new ModelMap();
      // Undeclared exception!
      try { 
        todoController0.addTodo(modelMap0, (Todo) null, (BindingResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.guides.springboot.todomanagement.controller.TodoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TodoController todoController0 = new TodoController();
      ITodoService iTodoService0 = mock(ITodoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(todoController0, (Class<?>) TodoController.class, "todoService", (Object) iTodoService0);
      Injector.validateBean(todoController0, (Class<?>) TodoController.class);
      ModelMap modelMap0 = new ModelMap();
      // Undeclared exception!
      try { 
        todoController0.showAddTodoPage(modelMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/springframework/util/Assert
         //
         verifyException("org.springframework.ui.ModelMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TodoController todoController0 = new TodoController();
      ITodoService iTodoService0 = mock(ITodoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(todoController0, (Class<?>) TodoController.class, "todoService", (Object) iTodoService0);
      Injector.validateBean(todoController0, (Class<?>) TodoController.class);
      // Undeclared exception!
      try { 
        todoController0.initBinder((WebDataBinder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.guides.springboot.todomanagement.controller.TodoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TodoController todoController0 = new TodoController();
      ITodoService iTodoService0 = mock(ITodoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(todoController0, (Class<?>) TodoController.class, "todoService", (Object) iTodoService0);
      Injector.validateBean(todoController0, (Class<?>) TodoController.class);
      ModelMap modelMap0 = new ModelMap();
      // Undeclared exception!
      try { 
        todoController0.showTodos(modelMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/springframework/security/core/context/SecurityContextHolder
         //
         verifyException("net.guides.springboot.todomanagement.controller.TodoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TodoController todoController0 = new TodoController();
      ITodoService iTodoService0 = mock(ITodoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(todoController0, (Class<?>) TodoController.class, "todoService", (Object) iTodoService0);
      Injector.validateBean(todoController0, (Class<?>) TodoController.class);
      String string0 = todoController0.deleteTodo((-688L));
      assertEquals("redirect:/list-todos", string0);
  }
}
